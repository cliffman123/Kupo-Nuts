{"version":3,"file":"static/js/415.42b2ce0e.chunk.js","mappings":"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","sources":["config.js","components/VideoList.js"],"sourcesContent":["const config = {\r\n  API_URL: ' https://b3db-2600-4040-441b-5e00-619b-3ee1-6c0d-cae2.ngrok-free.app'  // Replace with YOUR ngrok URL\r\n};\r\n\r\nconsole.log('Using API URL:', config.API_URL);\r\n\r\nexport default config;\r\n","import React, { useState, useEffect, useRef, useCallback, useMemo } from 'react';\r\nimport Masonry from 'react-masonry-css';\r\nimport './VideoList.css';\r\nimport JSZip from 'jszip';\r\nimport defaultLinks from './default-links.json';\r\nimport config from '../config'; // Import the config file\r\n\r\nconst API_URL = config.API_URL;\r\n\r\nconst getAuthToken = () => {\r\n    const tokenCookie = document.cookie.split(';').find(c => c.trim().startsWith('token='));\r\n    return tokenCookie ? tokenCookie.split('=')[1] : null;\r\n};\r\n\r\nconst fetchConfig = {\r\n    credentials: 'include',\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n        'Accept': 'application/json',\r\n    }\r\n};\r\n\r\nconst getAuthenticatedFetchConfig = () => {\r\n    const token = getAuthToken();\r\n    return {\r\n        ...fetchConfig,\r\n        headers: {\r\n            ...fetchConfig.headers,\r\n            'Authorization': token ? `Bearer ${token}` : '',\r\n        }\r\n    };\r\n};\r\n\r\nconst VideoList = () => {\r\n    const [mediaUrls, setMediaUrls] = useState([]);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [scrapeUrl, setScrapeUrl] = useState('');\r\n    const [fullscreenMedia, setFullscreenMedia] = useState(null);\r\n    const [loading, setLoading] = useState(false);\r\n    const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n    const [autoScroll, setAutoScroll] = useState(!isLoggedIn);\r\n    const [filter, setFilter] = useState('default');\r\n    const [showSettings, setShowSettings] = useState(false);\r\n    const [notifications, setNotifications] = useState([]);\r\n    const [showLogin, setShowLogin] = useState(false);\r\n    const [isRegistering, setIsRegistering] = useState(false);\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [loginError, setLoginError] = useState('');\r\n    const [passwordRequirements, setPasswordRequirements] = useState({\r\n        length: false,\r\n        uppercase: false,\r\n        lowercase: false,\r\n        number: false,\r\n        special: false\r\n    });\r\n    const [showProfileMenu, setShowProfileMenu] = useState(false);\r\n    const [isClickable, setIsClickable] = useState(true);\r\n    const [loadedMedia, setLoadedMedia] = useState({});\r\n    const mediaRefs = useRef([]);\r\n    const mediaSet = useRef(new Set());\r\n    const observer = useRef();\r\n\r\n    const initialMediaPerPage = 8;\r\n    const mediaPerPage = 16;\r\n\r\n    const shuffleArray = (array) => {\r\n        array.reverse();\r\n        for (let i = array.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            [array[i], array[j]] = [array[j], array[i]];\r\n        }\r\n        array.reverse();\r\n        return array;\r\n    };\r\n\r\n    const fetchMedia = useCallback(async (page, limit) => {\r\n        setLoading(true);\r\n        try {\r\n            let mediaLinks;\r\n            if (isLoggedIn) {\r\n                const response = await fetch(`${API_URL}/api/media`, {\r\n                    ...getAuthenticatedFetchConfig(),\r\n                    cache: 'no-cache'\r\n                });\r\n                \r\n                if (!response.ok) {\r\n                    if (response.status === 401) {\r\n                        setIsLoggedIn(false);\r\n                        setShowLogin(true);\r\n                        throw new Error('Please login to view media');\r\n                    }\r\n                    throw new Error('Network response was not ok');\r\n                }\r\n                \r\n                const data = await response.json();\r\n                mediaLinks = data.map(item => [item.postLink || '', item.videoLinks]);\r\n            } else {\r\n                // Only load default links if not logged in and they exist\r\n                if (!defaultLinks || defaultLinks.length === 0) {\r\n                    mediaLinks = [];\r\n                    return; // Exit early if no default links\r\n                }\r\n                mediaLinks = defaultLinks.map(item => [item.postLink || '', item.videoLinks]);\r\n            }\r\n\r\n            // Prepare arrays before switch\r\n            let sortedMediaLinks;\r\n            const shuffledLinks = shuffleArray([...mediaLinks]);\r\n            const reversedLinks = [...mediaLinks].reverse();\r\n\r\n            switch (filter.toLowerCase()) {\r\n                case 'newest':\r\n                    sortedMediaLinks = reversedLinks;\r\n                    break;\r\n                case 'random':\r\n                    sortedMediaLinks = shuffleArray([...mediaLinks]); // Create completely random array\r\n                    break;\r\n                default:\r\n                    sortedMediaLinks = page % 2 === 0 ? reversedLinks : shuffledLinks;\r\n                    break;\r\n            }\r\n\r\n            const startIndex = (page - 1) * limit;\r\n            const endIndex = startIndex + limit;\r\n            const newMediaUrls = sortedMediaLinks.slice(startIndex, endIndex);\r\n\r\n            if (page === 1) {\r\n                mediaSet.current.clear(); // Clear mediaSet before setting new media URLs\r\n            }\r\n\r\n            const uniqueMediaUrls = newMediaUrls.filter(media => !mediaSet.current.has(media[1][0]));\r\n            uniqueMediaUrls.forEach(media => mediaSet.current.add(media[1][0]));\r\n\r\n            if (page === 1) {\r\n                setMediaUrls(uniqueMediaUrls);\r\n            } else {\r\n                setMediaUrls(prevMediaUrls => [...prevMediaUrls, ...uniqueMediaUrls]);\r\n            }\r\n        } catch (error) {\r\n            console.error('Failed to load media:', error);\r\n            showNotification(error.message, 'error');\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, [filter, isLoggedIn]);\r\n\r\n    const setCookies = () => {\r\n        const cookies = JSON.parse(localStorage.getItem('cookies'));\r\n        if (cookies) {\r\n            cookies.forEach(cookie => {\r\n                document.cookie = `${cookie.name}=${cookie.value}; domain=${cookie.domain}; path=${cookie.path}`;\r\n            });\r\n        }\r\n    };\r\n\r\n    const fetchTweetsFromList = async (username) => {\r\n        try {\r\n            const response = await fetch(`${API_URL}/api/tweets`, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ username }),\r\n                ...getAuthenticatedFetchConfig()\r\n            });\r\n            if (!response.ok) throw new Error('Network response was not ok');\r\n        } catch (error) {\r\n            alert('Failed to fetch tweets. Please try again later.');\r\n        }\r\n    };\r\n\r\n    const showNotification = (message, type = 'info') => {\r\n        const id = Date.now(); // Create unique ID for each notification\r\n        const newNotification = { id, message, type };\r\n        \r\n        setNotifications(prev => [...prev, newNotification]);\r\n        \r\n        // Remove this specific notification after 3 seconds\r\n        setTimeout(() => {\r\n            setNotifications(prev => prev.filter(notification => notification.id !== id));\r\n        }, 3000);\r\n    };\r\n\r\n    const showProgressNotification = (id, message, count = 0, isComplete = false) => {\r\n        console.log('Showing progress notification:', { id, message, count, isComplete });\r\n        \r\n        setNotifications(prev => {\r\n            const existing = prev.find(n => n.id === id);\r\n            const updatedNotifications = existing \r\n                ? prev.map(n => n.id === id ? { ...n, message, count, isComplete } : n)\r\n                : [...prev, { id, message, type: 'progress', count, isComplete }];\r\n            \r\n            return updatedNotifications;\r\n        });\r\n    };\r\n\r\n    const removeNotification = (id) => {\r\n        setNotifications(prev => prev.filter(n => n.id !== id));\r\n    };\r\n\r\n    // New helper function to fetch only the latest added media\r\n    const fetchLatestMedia = async (count = 10) => {\r\n        try {\r\n            const response = await fetch(`${API_URL}/api/media/latest?count=${count}`, {\r\n                ...getAuthenticatedFetchConfig(),\r\n                cache: 'no-cache'\r\n            });\r\n            \r\n            if (!response.ok) {\r\n                throw new Error('Failed to fetch latest media');\r\n            }\r\n            \r\n            const data = await response.json();\r\n            return data.map(item => [item.postLink || '', item.videoLinks]);\r\n        } catch (error) {\r\n            console.error('Error fetching latest media:', error);\r\n            return [];\r\n        }\r\n    };\r\n\r\n    // Updated handleScrape function\r\n    const handleScrape = async () => {\r\n        const notificationId = Date.now();\r\n        try {\r\n            // Show initial \"in progress\" notification without count\r\n            showProgressNotification(notificationId, 'Scraping in progress...', 0, false);\r\n            console.log('Scraping URL:', scrapeUrl);\r\n            \r\n            const response = await fetch(`${API_URL}/api/scrape`, {\r\n                method: 'POST',\r\n                headers: { \r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Bearer ${document.cookie.split('token=')[1]}`\r\n                },\r\n                ...getAuthenticatedFetchConfig(),\r\n                body: JSON.stringify({ url: scrapeUrl }),\r\n            });\r\n            \r\n            if (!response.ok) {\r\n                if (response.status === 401) {\r\n                    setIsLoggedIn(false);\r\n                    setShowLogin(true);\r\n                    throw new Error('Please login to scrape media');\r\n                }\r\n                throw new Error('Network response was not ok');\r\n            }\r\n\r\n            const result = await response.json();\r\n            \r\n            // Update notification with final count when complete and mark as complete\r\n            showProgressNotification(notificationId, 'Scraping completed successfully!', result.linksAdded || 0, true);\r\n            \r\n            // Handle media updates based on current sort\r\n            if (filter.toLowerCase() === 'newest') {\r\n                // Refresh the entire media list for \"newest\" sort\r\n                setCurrentPage(1);\r\n                setMediaUrls([]);\r\n                await fetchMedia(1, initialMediaPerPage);\r\n            } else if (result.linksAdded > 0) {\r\n                // For other sorts, append new media to the end of the current list\r\n                const latestMedia = await fetchLatestMedia(result.linksAdded);\r\n                \r\n                // Add only unique media that isn't already in our list\r\n                const existingUrls = new Set(mediaUrls.map(media => media[0]));\r\n                const uniqueNewMedia = latestMedia.filter(media => !existingUrls.has(media[0]));\r\n                \r\n                if (uniqueNewMedia.length > 0) {\r\n                    setMediaUrls(prevMediaUrls => [...prevMediaUrls, ...uniqueNewMedia]);\r\n                }\r\n            }\r\n            \r\n            // Auto-remove notification after a few seconds\r\n            setTimeout(() => removeNotification(notificationId), 5000);\r\n        } catch (error) {\r\n            console.error('Failed to scrape:', error);\r\n            showNotification(error.message || 'Failed to scrape. Please try again.', 'error');\r\n            removeNotification(notificationId);\r\n        }\r\n    };\r\n\r\n    const handleRemove = async (postLink) => {\r\n        try {\r\n            const response = await fetch(`${API_URL}/api/remove`, {\r\n                method: 'POST',\r\n                headers: { \r\n                    'Content-Type': 'application/json',\r\n                },\r\n                ...getAuthenticatedFetchConfig(),\r\n                body: JSON.stringify({ postLink }),\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error('Failed to remove media');\r\n            }\r\n\r\n            // Update the local state to remove the entire post\r\n            setMediaUrls(prevMediaUrls => \r\n                prevMediaUrls.filter(media => media[0] !== postLink)\r\n            );\r\n\r\n            showNotification('Media removed successfully', 'success');\r\n        } catch (error) {\r\n            console.error('Failed to remove media:', error);\r\n            showNotification('Failed to remove media', 'error');\r\n        }\r\n    };\r\n\r\n    const addScrapeUrlToFile = async (url) => {\r\n        try {\r\n            console.log('Adding scrape URL to file:', url); // Add logging\r\n            const response = await fetch(`${API_URL}/api/save-scrape-url`, {\r\n                method: 'POST',\r\n                headers: { \r\n                    'Content-Type': 'application/json',\r\n                    // Add credentials header if needed\r\n                    'Authorization': `Bearer ${document.cookie.split('token=')[1]}`\r\n                },\r\n                ...getAuthenticatedFetchConfig(),\r\n                body: JSON.stringify({ url }),\r\n            });\r\n            if (!response.ok) {\r\n                if (response.status === 401) {\r\n                    setIsLoggedIn(false);\r\n                    setShowLogin(true);\r\n                    throw new Error('Please login to save scrape URL');\r\n                }\r\n                throw new Error('Network response was not ok');\r\n            }\r\n        } catch (error) {\r\n            console.error('Failed to add scrape URL to file:', error);\r\n            showNotification(error.message || 'Failed to save scrape URL', 'error');\r\n        }\r\n    };\r\n\r\n    const scrapeSavedLinks = async () => {\r\n        try {\r\n            const response = await fetch(`${API_URL}/api/scrape-saved-links`, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                ...getAuthenticatedFetchConfig()\r\n            });\r\n            if (!response.ok) throw new Error('Network response was not ok');\r\n        } catch (error) {\r\n            alert('Failed to scrape media. Please try again later.');\r\n            showNotification('Failed to scrape media. Please try again later.', 'error');\r\n        }\r\n    };\r\n\r\n    // Updated handleSimilar function\r\n    const handleSimilar = async (postLink) => {\r\n        const notificationId = Date.now();\r\n        try {\r\n            // Show initial notification without count\r\n            showProgressNotification(notificationId, 'Searching for similar posts...', 0, false);\r\n            console.log('Finding similar posts for:', postLink);\r\n            \r\n            const response = await fetch(`${API_URL}/api/similar`, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                ...getAuthenticatedFetchConfig(),\r\n                body: JSON.stringify({ url: postLink }),\r\n            });\r\n\r\n            if (!response.ok) {\r\n                const errorData = await response.json().catch(() => ({}));\r\n                throw new Error(errorData.message || 'Failed to find similar posts');\r\n            }\r\n\r\n            const result = await response.json();\r\n            \r\n            if (result.count === 0) {\r\n                showProgressNotification(notificationId, 'No similar posts found', 0, true);\r\n            } else {\r\n                showProgressNotification(notificationId, 'Similar posts found!', result.count, true);\r\n                \r\n                // Handle media updates based on current sort\r\n                if (filter.toLowerCase() === 'newest') {\r\n                    // Refresh the entire media list for \"newest\" sort\r\n                    setCurrentPage(1);\r\n                    setMediaUrls([]);\r\n                    await fetchMedia(1, initialMediaPerPage);\r\n                } else if (result.count > 0) {\r\n                    // For other sorts, append new media to the end of the current list\r\n                    const latestMedia = await fetchLatestMedia(result.count);\r\n                    \r\n                    // Add only unique media that isn't already in our list\r\n                    const existingUrls = new Set(mediaUrls.map(media => media[0]));\r\n                    const uniqueNewMedia = latestMedia.filter(media => !existingUrls.has(media[0]));\r\n                    \r\n                    if (uniqueNewMedia.length > 0) {\r\n                        setMediaUrls(prevMediaUrls => [...prevMediaUrls, ...uniqueNewMedia]);\r\n                    }\r\n                }\r\n            }\r\n            \r\n            setTimeout(() => removeNotification(notificationId), 3000);\r\n        } catch (error) {\r\n            console.error('Failed to find similar:', error);\r\n            showNotification(error.message || 'Failed to find similar posts', 'error');\r\n            removeNotification(notificationId);\r\n        }\r\n    };\r\n\r\n    const scrollToMedia = useCallback((index) => {\r\n        const mediaElement = mediaRefs.current[index];\r\n        if (mediaElement) {\r\n            mediaElement.scrollIntoView({ behavior: 'smooth', block: 'center' });\r\n        }\r\n    }, []);\r\n\r\n    const handleMediaClick = (index) => {\r\n        if (!isClickable) return; // Prevent clicking if in cooldown\r\n        setFullscreenMedia(index);\r\n        mediaRefs.current.forEach((media, i) => {\r\n            if (media && i !== index && media.tagName === 'VIDEO') media.pause();\r\n        });\r\n        const mediaContainer = document.getElementById('media-container');\r\n        if (mediaContainer) {\r\n            mediaContainer.classList.add('fullscreen-active');\r\n        }\r\n        document.querySelectorAll('.postlink-icon, .close-icon, .remove-icon, .similar-icon').forEach(button => {\r\n            button.style.zIndex = '1002';\r\n        });\r\n        document.querySelector('.profile-button').style.display = 'none';\r\n        scrollToMedia(index);\r\n    };\r\n\r\n    const handleMediaClose = () => {\r\n        setFullscreenMedia(null);\r\n        setIsClickable(false); // Disable clicking\r\n        mediaRefs.current.forEach(media => {\r\n            if (media && media.tagName === 'VIDEO') media.pause();\r\n        });\r\n        const mediaContainer = document.getElementById('media-container');\r\n        if (mediaContainer) {\r\n            mediaContainer.classList.remove('fullscreen-active');\r\n        }\r\n        document.querySelectorAll('.postlink-icon, .close-icon, .remove-icon').forEach(button => {\r\n            button.style.zIndex = '';\r\n        });\r\n        document.querySelector('.profile-button').style.display = '';\r\n        \r\n        // Enable clicking after 500ms (0.5 seconds)\r\n        setTimeout(() => {\r\n            setIsClickable(true);\r\n        }, 100);\r\n    };\r\n\r\n    const handleClickOutside = (event) => {\r\n        if (fullscreenMedia !== null && !mediaRefs.current[fullscreenMedia]?.contains(event.target) && !event.target.closest('.postlink-icon, .close-icon, .remove-icon, .scrape-button, .auto-scroll-button, .similar-icon')) {\r\n            handleMediaClose();\r\n        }\r\n    };\r\n\r\n    const handleKeyPress = useCallback((e) => {\r\n        if (fullscreenMedia === null) return;\r\n\r\n        if (e.key === 'ArrowDown') {\r\n            const nextIndex = (fullscreenMedia + 1) % mediaUrls.length;\r\n            setFullscreenMedia(nextIndex);\r\n            const nextMedia = mediaRefs.current[nextIndex];\r\n            if (nextMedia && nextMedia.tagName === 'VIDEO') {\r\n                nextMedia.play().catch(() => {});\r\n            }\r\n            scrollToMedia(nextIndex);\r\n        } else if (e.key === 'ArrowUp') {\r\n            const prevIndex = (fullscreenMedia - 1 + mediaUrls.length) % mediaUrls.length;\r\n            setFullscreenMedia(prevIndex);\r\n            const prevMedia = mediaRefs.current[prevIndex];\r\n            if (prevMedia && prevMedia.tagName === 'VIDEO') {\r\n                prevMedia.play().catch(() => {});\r\n            }\r\n            scrollToMedia(prevIndex);\r\n        }\r\n    }, [fullscreenMedia, mediaUrls.length, scrollToMedia]);\r\n\r\n    const lastMediaElementRef = useCallback(node => {\r\n        if (!node) return;\r\n        \r\n        if (observer.current) observer.current.disconnect();\r\n        observer.current = new IntersectionObserver(entries => {\r\n            if (entries.some(entry => entry.isIntersecting)) {\r\n                setCurrentPage(prevPage => prevPage + 1);\r\n            }\r\n        }, { \r\n            threshold: 0.1,\r\n            rootMargin: '100px'\r\n        });\r\n                           \r\n        const lastColumnItems = document.querySelectorAll('.masonry-grid_column > div:last-child');\r\n        lastColumnItems.forEach(item => {\r\n            observer.current.observe(item);\r\n        });\r\n        \r\n        // Also observe the provided node\r\n        observer.current.observe(node);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        setCurrentPage(1);\r\n        setMediaUrls([]);\r\n        fetchMedia(1, initialMediaPerPage);\r\n    }, [filter, fetchMedia]);\r\n\r\n    useEffect(() => {\r\n        fetchMedia(currentPage, mediaPerPage);\r\n    }, [currentPage, fetchMedia]);\r\n\r\n    useEffect(() => {\r\n        document.addEventListener('mousedown', handleClickOutside);\r\n        document.addEventListener('keydown', handleKeyPress);\r\n        document.body.style.overflow = fullscreenMedia !== null ? 'hidden' : 'auto';\r\n        return () => {\r\n            document.removeEventListener('mousedown', handleClickOutside);\r\n            document.removeEventListener('keydown', handleKeyPress);\r\n            document.body.style.overflow = 'auto';\r\n        };\r\n    }, [fullscreenMedia, handleKeyPress]);\r\n\r\n    useEffect(() => {\r\n        if (autoScroll && fullscreenMedia !== null) {\r\n            const currentMedia = mediaRefs.current[fullscreenMedia];\r\n            const videoDuration = currentMedia.tagName === 'VIDEO' ? currentMedia.duration * 1000 : 10000;\r\n            const timeoutId = setTimeout(() => {\r\n                const nextIndex = (fullscreenMedia + 1) % mediaUrls.length;\r\n                setFullscreenMedia(nextIndex);\r\n                const nextMedia = mediaRefs.current[nextIndex];\r\n                if (nextMedia && nextMedia.tagName === 'VIDEO') {\r\n                    nextMedia.play().catch(() => {});\r\n                }\r\n            }, videoDuration <= 1 ? videoDuration * 5 : videoDuration);\r\n            return () => clearTimeout(timeoutId);\r\n        }\r\n    }, [fullscreenMedia, mediaUrls, autoScroll]);\r\n\r\n    useEffect(() => {\r\n        if (autoScroll && fullscreenMedia === null) {\r\n            const intervalId = setInterval(() => {\r\n                window.scrollBy({ top: 3, behavior: 'smooth' });\r\n            }, 1);\r\n            return () => clearInterval(intervalId);\r\n        }\r\n    }, [autoScroll, fullscreenMedia]);\r\n\r\n    const selectedMedia = useMemo(() => {\r\n        const startIndex = (currentPage - 1) * mediaPerPage;\r\n        return mediaUrls.slice(0, startIndex + (2 * mediaPerPage));\r\n    }, [currentPage, mediaUrls, mediaPerPage]);\r\n\r\n    const handleIconClick = (url) => window.open(url, '_blank');\r\n\r\n    const handleScrapeInputKeyPress = (event) => {\r\n        if (event.key === 'Enter') {\r\n            if (scrapeUrl.includes('@')) {\r\n                const listId = scrapeUrl.replace('@', '');\r\n                fetchTweetsFromList(listId);\r\n            } else if (scrapeUrl.includes('❤️')) {\r\n                scrapeSavedLinks();\r\n            } else {\r\n                addScrapeUrlToFile(scrapeUrl);\r\n                handleScrape();\r\n            }\r\n            setScrapeUrl('');\r\n        }\r\n    };\r\n\r\n    const breakpointColumnsObj = useMemo(() => ({\r\n        default: 4,\r\n        1100: 3,\r\n        700: 2,\r\n        500: 1\r\n    }), []);\r\n\r\n    const handleImageError = (e, link, index) => {\r\n        console.error('Image failed to load:', e);\r\n        e.target.style.display = 'none'; // Hide the broken image\r\n        \r\n        // If in fullscreen and all media in this item failed to display, move to next\r\n        if (fullscreenMedia === index) {\r\n            const mediaItem = mediaUrls[index];\r\n            const allMediaFailed = mediaItem[1].every(mediaLink => {\r\n                const mediaElement = Array.from(document.querySelectorAll(`img[src=\"${mediaLink}\"], video[src=\"${mediaLink}\"]`));\r\n                return mediaElement.every(el => el.style.display === 'none');\r\n            });\r\n            \r\n            if (allMediaFailed) {\r\n                const nextIndex = (index + 1) % mediaUrls.length;\r\n                setFullscreenMedia(nextIndex);\r\n                const nextMedia = mediaRefs.current[nextIndex];\r\n                if (nextMedia && nextMedia.tagName === 'VIDEO') {\r\n                    nextMedia.play().catch(() => {});\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleVideoError = async (e) => {\r\n        console.error('Video failed to load:', e);\r\n        if (e.target.error.code === 4) { // 404 error\r\n            e.target.style.display = 'none'; // Hide the broken video\r\n            \r\n            // Get the index from the video element's reference in mediaRefs\r\n            const index = Object.keys(mediaRefs.current).find(key => \r\n                mediaRefs.current[key] === e.target\r\n            );\r\n            \r\n            if (fullscreenMedia === Number(index)) {\r\n                const nextIndex = (Number(index) + 1) % mediaUrls.length;\r\n                setFullscreenMedia(nextIndex);\r\n                const nextMedia = mediaRefs.current[nextIndex];\r\n                if (nextMedia && nextMedia.tagName === 'VIDEO') {\r\n                    nextMedia.play().catch(() => {});\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    const checkPasswordRequirements = (password) => {\r\n        setPasswordRequirements({\r\n            length: password.length >= 12,\r\n            uppercase: /[A-Z]/.test(password),\r\n            lowercase: /[a-z]/.test(password),\r\n            number: /\\d/.test(password),\r\n            special: /[@$!%*?&]/.test(password)\r\n        });\r\n    };\r\n\r\n    const handleLogin = async (e) => {\r\n        e.preventDefault();\r\n        setLoginError('');\r\n        \r\n        try {\r\n            const response = await fetch(`${API_URL}/api/login`, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                ...getAuthenticatedFetchConfig(),\r\n                body: JSON.stringify({ username, password }),\r\n            });\r\n\r\n            const data = await response.json();\r\n\r\n            if (!response.ok) {\r\n                throw new Error(data.message || 'Login failed');\r\n            }\r\n\r\n            setIsLoggedIn(true);\r\n            setShowLogin(false);\r\n            showNotification('Login successful', 'success');\r\n            setUsername('');\r\n            setPassword('');\r\n            \r\n            // Add this: Reset page and fetch media after successful login\r\n            setCurrentPage(1);\r\n            setMediaUrls([]);\r\n            await fetchMedia(1, initialMediaPerPage);\r\n            \r\n        } catch (error) {\r\n            setLoginError(error.message);\r\n            showNotification(error.message, 'error');\r\n        }\r\n    };\r\n\r\n    const handleRegister = async (e) => {\r\n        e.preventDefault();\r\n        setLoginError('');\r\n\r\n        try {\r\n            const response = await fetch(`${API_URL}/api/register`, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ username, password }),\r\n            });\r\n\r\n            const data = await response.json();\r\n\r\n            if (!response.ok) {\r\n                throw new Error(data.message || 'Registration failed');\r\n            }\r\n\r\n            showNotification('Registration successful! Please log in.', 'success');\r\n            setIsRegistering(false);\r\n            setUsername('');\r\n            setPassword('');\r\n        } catch (error) {\r\n            setLoginError(error.message);\r\n            showNotification(error.message, 'error');\r\n        }\r\n    };\r\n\r\n    const handleLogout = async () => {\r\n        try {\r\n            await fetch(`${API_URL}/api/logout`, {\r\n                method: 'POST',\r\n                ...getAuthenticatedFetchConfig(),\r\n            });\r\n            setIsLoggedIn(false);\r\n            showNotification('Logged out successfully', 'success');\r\n            \r\n            // Close profile menu\r\n            setShowProfileMenu(false);\r\n            \r\n            // Short timeout to allow notification to appear before refresh\r\n            setTimeout(() => {\r\n                window.location.reload(); // Refresh the page\r\n            }, 1000);\r\n        } catch (error) {\r\n            showNotification('Logout failed', 'error');\r\n        }\r\n    };\r\n\r\n    // Add this function to handle saving filter preference\r\n    const saveFilterPreference = (filterValue) => {\r\n        document.cookie = `preferred_filter=${filterValue}; max-age=31536000; path=/`; // Expires in 1 year\r\n    };\r\n\r\n    // Add this function to get filter from cookie\r\n    const getFilterFromCookie = () => {\r\n        const match = document.cookie.match(/preferred_filter=([^;]+)/);\r\n        return match ? match[1] : 'default';\r\n    };\r\n\r\n    // Add this new effect to check login status on component mount\r\n    useEffect(() => {\r\n        const checkLoginStatus = async () => {\r\n            try {\r\n                const response = await fetch(`${API_URL}/api/profile`, {\r\n                    ...getAuthenticatedFetchConfig()\r\n                });\r\n                \r\n                if (response.ok) {\r\n                    setIsLoggedIn(true);\r\n                    setAutoScroll(false); // Disable autoScroll when user logs in\r\n                    // Load saved filter preference\r\n                    const savedFilter = getFilterFromCookie();\r\n                    setFilter(savedFilter);\r\n                    setCurrentPage(1);\r\n                    setMediaUrls([]);\r\n                    await fetchMedia(1, initialMediaPerPage);\r\n                } else {\r\n                    setIsLoggedIn(false);\r\n                    setShowLogin(true);\r\n                }\r\n            } catch (error) {\r\n                console.error('Error checking login status:', error);\r\n                setIsLoggedIn(false);\r\n                setShowLogin(true);\r\n            }\r\n        };\r\n\r\n        checkLoginStatus();\r\n    }, []);\r\n\r\n    const handleExport = async () => {\r\n        try {\r\n            const mediaResponse = await fetch(`${API_URL}/api/export-links`, {\r\n                ...getAuthenticatedFetchConfig(),\r\n                headers: {\r\n                    ...getAuthenticatedFetchConfig().headers,\r\n                    'Accept': 'application/json'\r\n                }\r\n            });\r\n            \r\n            if (!mediaResponse.ok) {\r\n                throw new Error(`Failed to export media links: ${mediaResponse.statusText}`);\r\n            }\r\n            \r\n            const scrapeResponse = await fetch(`${API_URL}/api/export-scrape-list`, {\r\n                ...getAuthenticatedFetchConfig(),\r\n                headers: {\r\n                    ...getAuthenticatedFetchConfig().headers,\r\n                    'Accept': 'application/json'\r\n                }\r\n            });\r\n            \r\n            if (!scrapeResponse.ok) {\r\n                throw new Error(`Failed to export scrape links: ${scrapeResponse.statusText}`);\r\n            }\r\n\r\n            // Parse responses with error handling\r\n            let mediaData;\r\n            let scrapeData;\r\n            \r\n            try {\r\n                mediaData = await mediaResponse.json();\r\n                // Accept either array or object with links property\r\n                if (!Array.isArray(mediaData) && !mediaData.links) {\r\n                    mediaData = []; // Default to empty array if no valid data\r\n                }\r\n                // Convert to array if it's in object format\r\n                mediaData = Array.isArray(mediaData) ? mediaData : mediaData.links || [];\r\n            } catch (error) {\r\n                console.error('Media parse error:', error);\r\n                mediaData = []; // Default to empty array on parse error\r\n            }\r\n\r\n            try {\r\n                scrapeData = await scrapeResponse.json();\r\n                // Accept either array or object format\r\n                if (typeof scrapeData === 'string') {\r\n                    scrapeData = [scrapeData]; // Convert single string to array\r\n                } else if (!Array.isArray(scrapeData) && typeof scrapeData === 'object') {\r\n                    scrapeData = scrapeData.urls || Object.values(scrapeData) || []; // Try to extract URLs\r\n                } else if (!Array.isArray(scrapeData)) {\r\n                    scrapeData = []; // Default to empty array if no valid data\r\n                }\r\n            } catch (error) {\r\n                console.error('Scrape parse error:', error);\r\n                scrapeData = []; // Default to empty array on parse error\r\n            }\r\n            \r\n            // Create zip file with error handling\r\n            try {\r\n                const zip = new JSZip();\r\n                zip.file(\"media-links.json\", JSON.stringify(mediaData, null, 2));\r\n                zip.file(\"scrape-links.json\", JSON.stringify(scrapeData, null, 2));\r\n                \r\n                const content = await zip.generateAsync({ type: \"blob\" });\r\n                \r\n                // Create download link\r\n                const url = window.URL.createObjectURL(content);\r\n                const a = document.createElement('a');\r\n                a.href = url;\r\n                a.download = 'KupoNutEX.zip';\r\n                document.body.appendChild(a);\r\n                a.click();\r\n                window.URL.revokeObjectURL(url);\r\n                document.body.removeChild(a);\r\n                \r\n                showNotification('Collection exported successfully', 'success');\r\n            } catch (error) {\r\n                throw new Error('Failed to create zip file: ' + error.message);\r\n            }\r\n        } catch (error) {\r\n            console.error('Export error:', error);\r\n            showNotification(error.message || 'Failed to export collection', 'error');\r\n        }\r\n    };\r\n\r\n    const handleImport = async (event) => {\r\n        try {\r\n            const file = event.target.files[0];\r\n            if (!file) return;\r\n\r\n            showNotification('Reading import file...', 'info');\r\n\r\n            const reader = new FileReader();\r\n            reader.onload = async (e) => {\r\n                try {\r\n                    console.log('File content loaded, parsing JSON...');\r\n                    let content;\r\n                    \r\n                    try {\r\n                        content = JSON.parse(e.target.result);\r\n                        console.log('JSON parsed successfully:', typeof content, Array.isArray(content));\r\n                    } catch (parseError) {\r\n                        console.error('JSON parse error:', parseError);\r\n                        showNotification('Invalid JSON format in file', 'error');\r\n                        return;\r\n                    }\r\n                    \r\n                    // Convert old format if necessary\r\n                    if (!Array.isArray(content)) {\r\n                        content = Object.entries(content).map(([postLink, videoLinks]) => ({\r\n                            postLink,\r\n                            videoLinks: Array.isArray(videoLinks) ? videoLinks : [videoLinks]\r\n                        }));\r\n                    }\r\n\r\n                    // Validate content structure\r\n                    const validContent = content.filter(item => {\r\n                        return item && \r\n                               typeof item === 'object' && \r\n                               typeof item.postLink === 'string' && \r\n                               (Array.isArray(item.videoLinks) || typeof item.videoLinks === 'string');\r\n                    });\r\n\r\n                    if (validContent.length === 0) {\r\n                        throw new Error('No valid media links found in file');\r\n                    }\r\n\r\n                    showNotification(`Importing ${validContent.length} links...`, 'info');\r\n                    console.log('Sending import request to server...');\r\n                    \r\n                    // Get fresh auth config\r\n                    const config = getAuthenticatedFetchConfig();\r\n                    console.log('Auth headers ready:', !!config.headers.Authorization);\r\n\r\n                    const response = await fetch(`${API_URL}/api/import-links`, {\r\n                        method: 'POST',\r\n                        ...config,\r\n                        body: JSON.stringify(validContent)\r\n                    });\r\n\r\n                    if (!response.ok) {\r\n                        // If unauthorized, try to alert user\r\n                        if (response.status === 401) {\r\n                            setIsLoggedIn(false);\r\n                            setShowLogin(true);\r\n                            throw new Error('Authentication required. Please login again.');\r\n                        }\r\n                        \r\n                        const errorData = await response.json().catch(() => ({}));\r\n                        throw new Error(errorData.message || 'Failed to import links');\r\n                    }\r\n               \r\n                    showNotification(`Successfully imported ${validContent.length} links`, 'success');\r\n                    \r\n                    // Refresh media after import\r\n                    setCurrentPage(1);\r\n                    setMediaUrls([]);\r\n                    await fetchMedia(1, initialMediaPerPage);\r\n                    \r\n                } catch (error) {\r\n                    console.error('Import error:', error);\r\n                    showNotification(error.message || 'Invalid file format', 'error');\r\n                }\r\n            };\r\n            \r\n            reader.onerror = () => {\r\n                showNotification('Failed to read file', 'error');\r\n            };\r\n            \r\n            reader.readAsText(file);\r\n        } catch (error) {\r\n            console.error('File handling error:', error);\r\n            showNotification('Failed to read import file', 'error');\r\n        }\r\n        \r\n        // Reset file input\r\n        event.target.value = '';\r\n    };\r\n\r\n    const handleImportScrapeList = async (event) => {\r\n        try {\r\n            const file = event.target.files[0];\r\n            if (!file) return;\r\n\r\n            const reader = new FileReader();\r\n            reader.onload = async (e) => {\r\n                try {\r\n                    const content = JSON.parse(e.target.result);\r\n                    \r\n                    const response = await fetch(`${API_URL}/api/import-scrape-list`, {\r\n                        method: 'POST',\r\n                        headers: { 'Content-Type': 'application/json' },\r\n                        ...getAuthenticatedFetchConfig(),\r\n                        body: JSON.stringify(content)\r\n                    });\r\n\r\n                    if (!response.ok) {\r\n                        const error = await response.json();\r\n                        throw new Error(error.message || 'Failed to import scrape list');\r\n                    }\r\n\r\n                    const result = await response.json();\r\n                    showNotification(`Successfully imported ${result.total} URLs and started scraping`, 'success');\r\n                    \r\n                    // Refresh media after import and scrape\r\n                    setCurrentPage(1);\r\n                    setMediaUrls([]);\r\n                    await fetchMedia(1, initialMediaPerPage);\r\n                } catch (error) {\r\n                    console.error('Import error:', error);\r\n                    showNotification(error.message || 'Invalid file format', 'error');\r\n                }\r\n            };\r\n            reader.readAsText(file);\r\n        } catch (error) {\r\n            console.error('File reading error:', error);\r\n            showNotification('Failed to read import file', 'error');\r\n        }\r\n        // Reset file input\r\n        event.target.value = '';\r\n    };\r\n\r\n    // Add function to mark media as loaded\r\n    const handleMediaLoad = (index) => {\r\n        setLoadedMedia(prev => ({\r\n            ...prev,\r\n            [index]: true\r\n        }));\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"notifications-container\">\r\n                {notifications.map((notification, index) => (\r\n                    <div \r\n                        key={notification.id} \r\n                        className={`notification ${notification.type}`}\r\n                        style={{ top: `${20 + (index * 70)}px` }}\r\n                    >\r\n                        <p className=\"notification-message\">{notification.message}</p>\r\n                        {notification.type === 'progress' && notification.isComplete && (\r\n                            <>\r\n                                <p className=\"notification-count\">\r\n                                    {notification.count} items found\r\n                                </p>\r\n                                <div \r\n                                    className=\"notification-progress-bar\" \r\n                                    style={{ width: '100%' }}\r\n                                />\r\n                            </>\r\n                        )}\r\n                        {notification.type === 'progress' && !notification.isComplete && (\r\n                            <div className=\"notification-loading\">\r\n                                <div className=\"notification-spinner\"></div>\r\n                            </div>\r\n                        )}\r\n                        {notification.type !== 'progress' && (\r\n                            <div className=\"notification-progress\" />\r\n                        )}\r\n                    </div>\r\n                ))}\r\n            </div>\r\n            <div className=\"main-content\">\r\n                <Masonry\r\n                    breakpointCols={breakpointColumnsObj}\r\n                    className=\"masonry-grid\"\r\n                    columnClassName=\"masonry-grid_column\"\r\n                >\r\n                    {selectedMedia.map((media, index) => {\r\n                        if (!media || !media[1]) return null;\r\n                        const [postLink, videoLinks] = media;\r\n                        const firstVideoLink = videoLinks[0];\r\n                        const isVideo = firstVideoLink && (firstVideoLink.endsWith('.mp4') || firstVideoLink.endsWith('.mov') || firstVideoLink.endsWith('.webm'));\r\n                        const isRule34Video = postLink.includes('rule34video');\r\n                        const embedUrl = firstVideoLink ? firstVideoLink.replace('/view/', '/embed/') : '';\r\n                        const isLoaded = loadedMedia[index];\r\n\r\n                        return (\r\n                            <div\r\n                                key={index}\r\n                                ref={index >= selectedMedia.length - breakpointColumnsObj.default ? lastMediaElementRef : null}\r\n                                className={`media-wrapper masonry-item ${fullscreenMedia === index ? 'fullscreen' : ''}`}\r\n                                onClick={() => handleMediaClick(index)}\r\n                            >\r\n                                <div className={`media-container ${isLoaded ? 'media-loaded' : 'media-loading'}`}>\r\n                                    {isRule34Video ? (\r\n                                        <iframe\r\n                                            className=\"media-container\"\r\n                                            src={embedUrl}\r\n                                            frameBorder=\"0\"\r\n                                            allowFullScreen\r\n                                            loop\r\n                                            title=\"Embedded Video\"\r\n                                            onLoad={() => handleMediaLoad(index)}\r\n                                        ></iframe>\r\n                                    ) : isVideo ? (\r\n                                        <video\r\n                                            ref={el => mediaRefs.current[index] = el}\r\n                                            src={firstVideoLink}\r\n                                            controls\r\n                                            muted={fullscreenMedia !== index}\r\n                                            loop\r\n                                            onLoadedData={() => handleMediaLoad(index)}\r\n                                            onError={(e) => handleVideoError(e, firstVideoLink)}\r\n                                            onLoadStart={() => {\r\n                                                setCookies();\r\n                                            }}\r\n                                        />\r\n                                    ) : (\r\n                                        <img\r\n                                            ref={el => mediaRefs.current[index] = el}\r\n                                            src={firstVideoLink}\r\n                                            alt=\"Media\"\r\n                                            onLoad={() => handleMediaLoad(index)}\r\n                                            onError={(e) => handleImageError(e, firstVideoLink, index)}\r\n                                        />\r\n                                    )}\r\n                                    {fullscreenMedia === index && videoLinks.slice(1).map((link, i) => (\r\n                                        <div key={i} className=\"fullscreen-media-container\">\r\n                                            <img className='fullscreen-media'\r\n                                                ref={el => mediaRefs.current[`${index}_${i}`] = el}\r\n                                                src={link}\r\n                                                alt=\"Media\"\r\n                                                onError={(e) => handleImageError(e, link, index)}\r\n                                                onLoad={() => {\r\n                                                    setCookies();\r\n                                                }}\r\n                                            />\r\n                                        </div>\r\n                                    ))}\r\n                                </div>\r\n                                <div className=\"icon-container\">\r\n                                    <button\r\n                                        className=\"close-icon\"\r\n                                        onClick={(e) => {\r\n                                            e.stopPropagation();\r\n                                            handleMediaClose();\r\n                                        }}\r\n                                        aria-label=\"Close media\"\r\n                                    >\r\n                                        <i className=\"fas fa-times\"></i>\r\n                                    </button>\r\n                                    <button\r\n                                        className=\"postlink-icon\"\r\n                                        onClick={(e) => {\r\n                                            e.stopPropagation();\r\n                                            handleIconClick(postLink);\r\n                                        }}\r\n                                        aria-label=\"Open post link\"\r\n                                    >\r\n                                        <i className=\"fas fa-link\"></i>\r\n                                    </button>\r\n                                    {!postLink.includes('kusowanka') && (\r\n                                        <button\r\n                                            className=\"similar-icon\"\r\n                                            onClick={(e) => {\r\n                                                e.stopPropagation();\r\n                                                handleSimilar(postLink);\r\n                                            }}\r\n                                            aria-label=\"Find similar media\"\r\n                                        >\r\n                                            <i className=\"fas fa-clone\"></i>\r\n                                        </button>\r\n                                    )}\r\n                                </div>\r\n                                {isLoggedIn && (\r\n                                    <button\r\n                                        className=\"remove-icon\"\r\n                                        onClick={(e) => {\r\n                                            e.stopPropagation();\r\n                                            handleRemove(postLink); // Now we just pass postLink, not the specific videoLink\r\n                                        }}\r\n                                        aria-label=\"Remove media\"\r\n                                    >\r\n                                        <i className=\"fas fa-trash\"></i>\r\n                                    </button>\r\n                                )}\r\n                            </div>\r\n                        );\r\n                    })}\r\n                    {loading && (\r\n                        <div className=\"loading-placeholder\"></div>\r\n                    )}\r\n                </Masonry>\r\n                <div id=\"bottom-of-page\"></div>\r\n                {!showLogin && (\r\n                    <div className=\"overlay-buttons\">\r\n                        {isLoggedIn && (\r\n                            <button\r\n                                onClick={() => setShowSettings(!showSettings)}\r\n                                className=\"settings-button\"\r\n                                aria-label=\"Settings\"\r\n                            >\r\n                                <i className=\"fas fa-cog\"></i>\r\n                            </button>\r\n                        )}\r\n                        <button\r\n                            onClick={() => setAutoScroll(!autoScroll)}\r\n                            className={`auto-scroll-button ${autoScroll ? 'active' : ''}`}\r\n                            aria-label=\"Toggle auto scroll\"\r\n                        >\r\n                            <i className=\"fas fa-arrow-down\"></i>\r\n                        </button>\r\n                        <button\r\n                            onClick={() => isLoggedIn ? setShowProfileMenu(!showProfileMenu) : setShowLogin(true)}\r\n                            className={`profile-button ${isLoggedIn ? 'logged-in' : ''}`}\r\n                            aria-label=\"Profile\"\r\n                        >\r\n                            <i className={`fas ${isLoggedIn ? 'fa-user-check' : 'fa-user'}`}></i>\r\n                        </button>\r\n                        {showProfileMenu && isLoggedIn && (\r\n                            <div className=\"profile-menu\">\r\n                                <div className=\"profile-menu-header\">\r\n                                    <h3>Profile Menu</h3>\r\n                                    <button onClick={() => setShowProfileMenu(false)}>\r\n                                        <i className=\"fas fa-times\"></i>\r\n                                    </button>\r\n                                </div>\r\n                                <div className=\"profile-menu-content\">\r\n                                    <button className=\"profile-menu-button\" onClick={handleExport}>\r\n                                        <i className=\"fas fa-download\"></i>\r\n                                        Export Collection\r\n                                    </button>\r\n                                    <label className=\"profile-menu-button\">\r\n                                        <i className=\"fas fa-upload\"></i>\r\n                                        Import Collection\r\n                                        <input\r\n                                            type=\"file\"\r\n                                            accept=\".json\"\r\n                                            onChange={handleImport}\r\n                                            style={{ display: 'none' }}\r\n                                        />\r\n                                    </label>\r\n                                    <label className=\"profile-menu-button\">\r\n                                        <i className=\"fas fa-list\"></i>\r\n                                        Import Scrape List\r\n                                        <input\r\n                                            type=\"file\"\r\n                                            accept=\".json\"\r\n                                            onChange={handleImportScrapeList}\r\n                                            style={{ display: 'none' }}\r\n                                        />\r\n                                    </label>\r\n                                    <div className=\"profile-menu-divider\"></div>\r\n                                    <button className=\"profile-menu-button danger\" onClick={handleLogout}>\r\n                                        <i className=\"fas fa-sign-out-alt\"></i>\r\n                                        Logout\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                )}\r\n                {showSettings && (\r\n                    <div className=\"settings-dialog\">\r\n                        <div className=\"settings-content\">\r\n                            <div className=\"settings-header\">\r\n                                <h2>Gallery Settings</h2>\r\n                                <button onClick={() => setShowSettings(false)}>\r\n                                    <i className=\"fas fa-times\"></i>\r\n                                </button>\r\n                            </div>\r\n                            <div className=\"settings-body\">\r\n                                <div className=\"settings-item\">\r\n                                    <label htmlFor=\"scrape-url\">Scrape URL</label>\r\n                                    <div className=\"scrape-input-container\">\r\n                                        <input\r\n                                            id=\"scrape-url\"\r\n                                            value={scrapeUrl}\r\n                                            onChange={(e) => setScrapeUrl(e.target.value)}\r\n                                            onKeyPress={handleScrapeInputKeyPress}\r\n                                            placeholder=\"Enter URL to scrape\"\r\n                                        />\r\n                                        <button\r\n                                            onClick={() => {\r\n                                                if (scrapeUrl.includes('@')) {\r\n                                                    const listId = scrapeUrl.replace('@', '');\r\n                                                    fetchTweetsFromList(listId);\r\n                                                } else if (scrapeUrl.includes('❤️')) {\r\n                                                    scrapeSavedLinks();\r\n                                                } else {\r\n                                                    addScrapeUrlToFile(scrapeUrl);\r\n                                                    handleScrape();\r\n                                                }\r\n                                                setScrapeUrl('');\r\n                                            }}\r\n                                            aria-label=\"Scrape URL\"\r\n                                        >\r\n                                            Scrape\r\n                                        </button>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"settings-item\">\r\n                                    <label htmlFor=\"filter\">Sort by:</label>\r\n                                    <select \r\n                                        id=\"filter\" \r\n                                        value={filter} \r\n                                        onChange={(e) => {\r\n                                            const newFilter = e.target.value;\r\n                                            setFilter(newFilter);\r\n                                            saveFilterPreference(newFilter);\r\n                                        }}\r\n                                    >\r\n                                        <option value=\"Default\">Default</option>\r\n                                        <option value=\"Newest\">Newest</option>\r\n                                        <option value=\"Random\">Random</option>\r\n                                    </select>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n                {showLogin && (\r\n                    <div className=\"login-dialog\">\r\n                        <div className=\"login-content\">\r\n                            <div className=\"login-header\">\r\n                                <h2>{isRegistering ? 'Create Account' : 'Login'}</h2>\r\n                                <button onClick={() => {\r\n                                    setShowLogin(false);\r\n                                    setIsRegistering(false);\r\n                                    setLoginError('');\r\n                                }}>\r\n                                    <i className=\"fas fa-times\"></i>\r\n                                </button>\r\n                            </div>\r\n                            {loginError && (\r\n                                <div className=\"login-error\">\r\n                                    {loginError}\r\n                                </div>\r\n                            )}\r\n                            <form className=\"login-form\" onSubmit={isRegistering ? handleRegister : handleLogin}>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    placeholder=\"Username\"\r\n                                    value={username}\r\n                                    onChange={(e) => setUsername(e.target.value)}\r\n                                    required\r\n                                />\r\n                                <input\r\n                                    type=\"password\"\r\n                                    placeholder=\"Password\"\r\n                                    value={password}\r\n                                    onChange={(e) => {\r\n                                        setPassword(e.target.value);\r\n                                        if (isRegistering) {\r\n                                            checkPasswordRequirements(e.target.value);\r\n                                        }\r\n                                    }}\r\n                                    required\r\n                                />\r\n                                {isRegistering && (\r\n                                    <div className=\"password-requirements\">\r\n                                        <p className={passwordRequirements.length ? 'met' : ''}>\r\n                                            ✓ At least 12 characters\r\n                                        </p>\r\n                                        <p className={passwordRequirements.uppercase ? 'met' : ''}>\r\n                                            ✓ One uppercase letter\r\n                                        </p>\r\n                                        <p className={passwordRequirements.lowercase ? 'met' : ''}>\r\n                                            ✓ One lowercase letter\r\n                                        </p>\r\n                                        <p className={passwordRequirements.number ? 'met' : ''}>\r\n                                            ✓ One number\r\n                                        </p>\r\n                                        <p className={passwordRequirements.special ? 'met' : ''}>\r\n                                            ✓ One special character (@$!%*?&)\r\n                                        </p>\r\n                                    </div>\r\n                                )}\r\n                                <button type=\"submit\">\r\n                                    {isRegistering ? 'Create Account' : 'Login'}\r\n                                </button>\r\n                            </form>\r\n                            <div className=\"login-options\">\r\n                                <button onClick={() => {\r\n                                    setIsRegistering(!isRegistering);\r\n                                    setLoginError('');\r\n                                }}>\r\n                                    {isRegistering \r\n                                        ? 'Already have an account? Login' \r\n                                        : 'Need an account? Register'}\r\n                                </button>\r\n                            </div>\r\n                            {isLoggedIn && (\r\n                                <div className=\"profile-actions\">\r\n                                    <button onClick={handleExport} className=\"export-button\">\r\n                                        <i className=\"fas fa-download\"></i> Export Links\r\n                                    </button>\r\n                                    <label className=\"import-button\">\r\n                                        <i className=\"fas fa-upload\"></i> Import Links\r\n                                        <input\r\n                                            type=\"file\"\r\n                                            accept=\".json\"\r\n                                            onChange={handleImport}\r\n                                            style={{ display: 'none' }}\r\n                                        />\r\n                                    </label>\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default React.memo(VideoList);\r\n"],"names":["config","API_URL","console","log","fetchConfig","credentials","headers","getAuthenticatedFetchConfig","token","getAuthToken","tokenCookie","document","cookie","split","find","c","trim","startsWith","VideoList","mediaUrls","setMediaUrls","useState","currentPage","setCurrentPage","scrapeUrl","setScrapeUrl","fullscreenMedia","setFullscreenMedia","loading","setLoading","isLoggedIn","setIsLoggedIn","autoScroll","setAutoScroll","filter","setFilter","showSettings","setShowSettings","notifications","setNotifications","showLogin","setShowLogin","isRegistering","setIsRegistering","username","setUsername","password","setPassword","loginError","setLoginError","passwordRequirements","setPasswordRequirements","length","uppercase","lowercase","number","special","showProfileMenu","setShowProfileMenu","isClickable","setIsClickable","loadedMedia","setLoadedMedia","mediaRefs","useRef","mediaSet","Set","observer","shuffleArray","array","reverse","i","j","Math","floor","random","fetchMedia","useCallback","async","page","limit","mediaLinks","sortedMediaLinks","response","fetch","cache","ok","status","Error","json","map","item","postLink","videoLinks","defaultLinks","shuffledLinks","reversedLinks","toLowerCase","startIndex","endIndex","newMediaUrls","slice","current","clear","uniqueMediaUrls","media","has","forEach","add","prevMediaUrls","error","showNotification","message","setCookies","cookies","JSON","parse","localStorage","getItem","name","value","domain","path","fetchTweetsFromList","method","body","stringify","alert","type","arguments","undefined","id","Date","now","newNotification","prev","setTimeout","notification","showProgressNotification","count","isComplete","n","removeNotification","fetchLatestMedia","handleScrape","notificationId","url","result","linksAdded","latestMedia","existingUrls","uniqueNewMedia","addScrapeUrlToFile","scrapeSavedLinks","scrollToMedia","index","mediaElement","scrollIntoView","behavior","block","handleMediaClose","tagName","pause","mediaContainer","getElementById","classList","remove","querySelectorAll","button","style","zIndex","querySelector","display","handleClickOutside","event","_mediaRefs$current$fu","contains","target","closest","handleKeyPress","e","key","nextIndex","nextMedia","play","catch","prevIndex","prevMedia","lastMediaElementRef","node","disconnect","IntersectionObserver","entries","some","entry","isIntersecting","prevPage","threshold","rootMargin","observe","useEffect","addEventListener","overflow","removeEventListener","currentMedia","videoDuration","duration","timeoutId","clearTimeout","intervalId","setInterval","window","scrollBy","top","clearInterval","selectedMedia","useMemo","breakpointColumnsObj","default","handleImageError","link","every","mediaLink","Array","from","el","savedFilter","getFilterFromCookie","match","checkLoginStatus","handleExport","mediaResponse","statusText","scrapeResponse","mediaData","scrapeData","isArray","links","urls","Object","values","zip","JSZip","file","content","generateAsync","URL","createObjectURL","a","createElement","href","download","appendChild","click","revokeObjectURL","removeChild","handleImport","files","reader","FileReader","onload","parseError","_ref","validContent","Authorization","errorData","onerror","readAsText","handleMediaLoad","_jsxs","children","_jsx","className","_Fragment","width","Masonry","breakpointCols","columnClassName","firstVideoLink","isVideo","endsWith","isRule34Video","includes","embedUrl","replace","isLoaded","ref","onClick","handleMediaClick","src","frameBorder","allowFullScreen","loop","title","onLoad","controls","muted","onLoadedData","onError","code","keys","Number","handleVideoError","onLoadStart","alt","stopPropagation","open","handleSimilar","handleRemove","accept","onChange","total","location","reload","htmlFor","onKeyPress","listId","placeholder","newFilter","filterValue","onSubmit","preventDefault","data","required","test","checkPasswordRequirements","React"],"sourceRoot":""}