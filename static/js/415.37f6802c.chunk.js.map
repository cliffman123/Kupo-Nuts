{"version":3,"file":"static/js/415.37f6802c.chunk.js","mappings":"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","sources":["config.js","components/VideoList.js"],"sourcesContent":["const config = {\r\n  API_URL: ' https://183b-2600-4040-441b-5e00-619b-3ee1-6c0d-cae2.ngrok-free.app'\r\n};\r\n\r\nexport default config;\r\n","import React, { useState, useEffect, useRef, useCallback, useMemo } from 'react';\r\nimport Masonry from 'react-masonry-css';\r\nimport './VideoList.css';\r\nimport JSZip from 'jszip';\r\nimport defaultLinks from './default-links.json';\r\nimport config from '../config'; // Import the config file\r\n\r\nconst API_URL = config.API_URL;\r\n\r\nconst VideoList = () => {\r\n    const [mediaUrls, setMediaUrls] = useState([]);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [scrapeUrl, setScrapeUrl] = useState('');\r\n    const [fullscreenMedia, setFullscreenMedia] = useState(null);\r\n    const [loading, setLoading] = useState(false);\r\n    const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n    const [autoScroll, setAutoScroll] = useState(!isLoggedIn);\r\n    const [filter, setFilter] = useState('default');\r\n    const [showSettings, setShowSettings] = useState(false);\r\n    const [notifications, setNotifications] = useState([]);\r\n    const [showLogin, setShowLogin] = useState(false);\r\n    const [isRegistering, setIsRegistering] = useState(false);\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [loginError, setLoginError] = useState('');\r\n    const [passwordRequirements, setPasswordRequirements] = useState({\r\n        length: false,\r\n        uppercase: false,\r\n        lowercase: false,\r\n        number: false,\r\n        special: false\r\n    });\r\n    const [showProfileMenu, setShowProfileMenu] = useState(false);\r\n    const [isClickable, setIsClickable] = useState(true);\r\n    const [loadedMedia, setLoadedMedia] = useState({});\r\n    const mediaRefs = useRef([]);\r\n    const mediaSet = useRef(new Set());\r\n    const observer = useRef();\r\n\r\n    const initialMediaPerPage = 8;\r\n    const mediaPerPage = 16;\r\n\r\n    const shuffleArray = (array) => {\r\n        array.reverse();\r\n        for (let i = array.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            [array[i], array[j]] = [array[j], array[i]];\r\n        }\r\n        array.reverse();\r\n        return array;\r\n    };\r\n\r\n    const fetchConfig = {\r\n        credentials: 'include',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n        }\r\n    };\r\n\r\n    const fetchMedia = useCallback(async (page, limit) => {\r\n        setLoading(true);\r\n        try {\r\n            let mediaLinks;\r\n            if (isLoggedIn) {\r\n                const response = await fetch(`${API_URL}/api/media`, {\r\n                    ...fetchConfig,\r\n                    cache: 'no-cache'\r\n                });\r\n                \r\n                if (!response.ok) {\r\n                    if (response.status === 401) {\r\n                        setIsLoggedIn(false);\r\n                        setShowLogin(true);\r\n                        throw new Error('Please login to view media');\r\n                    }\r\n                    throw new Error('Network response was not ok');\r\n                }\r\n                \r\n                const data = await response.json();\r\n                mediaLinks = data.map(item => [item.postLink || '', item.videoLinks]);\r\n            } else {\r\n                // Only load default links if not logged in and they exist\r\n                if (!defaultLinks || defaultLinks.length === 0) {\r\n                    mediaLinks = [];\r\n                    return; // Exit early if no default links\r\n                }\r\n                mediaLinks = defaultLinks.map(item => [item.postLink || '', item.videoLinks]);\r\n            }\r\n\r\n            // Prepare arrays before switch\r\n            let sortedMediaLinks;\r\n            const shuffledLinks = shuffleArray([...mediaLinks]);\r\n            const reversedLinks = [...mediaLinks].reverse();\r\n\r\n            switch (filter.toLowerCase()) {\r\n                case 'newest':\r\n                    sortedMediaLinks = reversedLinks;\r\n                    break;\r\n                case 'random':\r\n                    sortedMediaLinks = shuffleArray([...mediaLinks]); // Create completely random array\r\n                    break;\r\n                default:\r\n                    sortedMediaLinks = page % 2 === 0 ? reversedLinks : shuffledLinks;\r\n                    break;\r\n            }\r\n\r\n            const startIndex = (page - 1) * limit;\r\n            const endIndex = startIndex + limit;\r\n            const newMediaUrls = sortedMediaLinks.slice(startIndex, endIndex);\r\n\r\n            if (page === 1) {\r\n                mediaSet.current.clear(); // Clear mediaSet before setting new media URLs\r\n            }\r\n\r\n            const uniqueMediaUrls = newMediaUrls.filter(media => !mediaSet.current.has(media[1][0]));\r\n            uniqueMediaUrls.forEach(media => mediaSet.current.add(media[1][0]));\r\n\r\n            if (page === 1) {\r\n                setMediaUrls(uniqueMediaUrls);\r\n            } else {\r\n                setMediaUrls(prevMediaUrls => [...prevMediaUrls, ...uniqueMediaUrls]);\r\n            }\r\n        } catch (error) {\r\n            console.error('Failed to load media:', error);\r\n            showNotification(error.message, 'error');\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, [filter, isLoggedIn]);\r\n\r\n    const setCookies = () => {\r\n        const cookies = JSON.parse(localStorage.getItem('cookies'));\r\n        if (cookies) {\r\n            cookies.forEach(cookie => {\r\n                document.cookie = `${cookie.name}=${cookie.value}; domain=${cookie.domain}; path=${cookie.path}`;\r\n            });\r\n        }\r\n    };\r\n\r\n    const fetchTweetsFromList = async (username) => {\r\n        try {\r\n            const response = await fetch(`${API_URL}/api/tweets`, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ username }),\r\n                ...fetchConfig\r\n            });\r\n            if (!response.ok) throw new Error('Network response was not ok');\r\n        } catch (error) {\r\n            alert('Failed to fetch tweets. Please try again later.');\r\n        }\r\n    };\r\n\r\n    const showNotification = (message, type = 'info') => {\r\n        const id = Date.now(); // Create unique ID for each notification\r\n        const newNotification = { id, message, type };\r\n        \r\n        setNotifications(prev => [...prev, newNotification]);\r\n        \r\n        // Remove this specific notification after 3 seconds\r\n        setTimeout(() => {\r\n            setNotifications(prev => prev.filter(notification => notification.id !== id));\r\n        }, 3000);\r\n    };\r\n\r\n    const showProgressNotification = (id, message, count = 0, isComplete = false) => {\r\n        console.log('Showing progress notification:', { id, message, count, isComplete });\r\n        \r\n        setNotifications(prev => {\r\n            const existing = prev.find(n => n.id === id);\r\n            const updatedNotifications = existing \r\n                ? prev.map(n => n.id === id ? { ...n, message, count, isComplete } : n)\r\n                : [...prev, { id, message, type: 'progress', count, isComplete }];\r\n            \r\n            return updatedNotifications;\r\n        });\r\n    };\r\n\r\n    const removeNotification = (id) => {\r\n        setNotifications(prev => prev.filter(n => n.id !== id));\r\n    };\r\n\r\n    // New helper function to fetch only the latest added media\r\n    const fetchLatestMedia = async (count = 10) => {\r\n        try {\r\n            const response = await fetch(`${API_URL}/api/media/latest?count=${count}`, {\r\n                ...fetchConfig,\r\n                cache: 'no-cache'\r\n            });\r\n            \r\n            if (!response.ok) {\r\n                throw new Error('Failed to fetch latest media');\r\n            }\r\n            \r\n            const data = await response.json();\r\n            return data.map(item => [item.postLink || '', item.videoLinks]);\r\n        } catch (error) {\r\n            console.error('Error fetching latest media:', error);\r\n            return [];\r\n        }\r\n    };\r\n\r\n    // Updated handleScrape function\r\n    const handleScrape = async () => {\r\n        const notificationId = Date.now();\r\n        try {\r\n            // Show initial \"in progress\" notification without count\r\n            showProgressNotification(notificationId, 'Scraping in progress...', 0, false);\r\n            console.log('Scraping URL:', scrapeUrl);\r\n            \r\n            const response = await fetch(`${API_URL}/api/scrape`, {\r\n                method: 'POST',\r\n                headers: { \r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Bearer ${document.cookie.split('token=')[1]}`\r\n                },\r\n                ...fetchConfig,\r\n                body: JSON.stringify({ url: scrapeUrl }),\r\n            });\r\n            \r\n            if (!response.ok) {\r\n                if (response.status === 401) {\r\n                    setIsLoggedIn(false);\r\n                    setShowLogin(true);\r\n                    throw new Error('Please login to scrape media');\r\n                }\r\n                throw new Error('Network response was not ok');\r\n            }\r\n\r\n            const result = await response.json();\r\n            \r\n            // Update notification with final count when complete and mark as complete\r\n            showProgressNotification(notificationId, 'Scraping completed successfully!', result.linksAdded || 0, true);\r\n            \r\n            // Handle media updates based on current sort\r\n            if (filter.toLowerCase() === 'newest') {\r\n                // Refresh the entire media list for \"newest\" sort\r\n                setCurrentPage(1);\r\n                setMediaUrls([]);\r\n                await fetchMedia(1, initialMediaPerPage);\r\n            } else if (result.linksAdded > 0) {\r\n                // For other sorts, append new media to the end of the current list\r\n                const latestMedia = await fetchLatestMedia(result.linksAdded);\r\n                \r\n                // Add only unique media that isn't already in our list\r\n                const existingUrls = new Set(mediaUrls.map(media => media[0]));\r\n                const uniqueNewMedia = latestMedia.filter(media => !existingUrls.has(media[0]));\r\n                \r\n                if (uniqueNewMedia.length > 0) {\r\n                    setMediaUrls(prevMediaUrls => [...prevMediaUrls, ...uniqueNewMedia]);\r\n                }\r\n            }\r\n            \r\n            // Auto-remove notification after a few seconds\r\n            setTimeout(() => removeNotification(notificationId), 5000);\r\n        } catch (error) {\r\n            console.error('Failed to scrape:', error);\r\n            showNotification(error.message || 'Failed to scrape. Please try again.', 'error');\r\n            removeNotification(notificationId);\r\n        }\r\n    };\r\n\r\n    const handleRemove = async (postLink) => {\r\n        try {\r\n            const response = await fetch(`${API_URL}/api/remove`, {\r\n                method: 'POST',\r\n                headers: { \r\n                    'Content-Type': 'application/json',\r\n                },\r\n                ...fetchConfig,\r\n                body: JSON.stringify({ postLink }),\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error('Failed to remove media');\r\n            }\r\n\r\n            // Update the local state to remove the entire post\r\n            setMediaUrls(prevMediaUrls => \r\n                prevMediaUrls.filter(media => media[0] !== postLink)\r\n            );\r\n\r\n            showNotification('Media removed successfully', 'success');\r\n        } catch (error) {\r\n            console.error('Failed to remove media:', error);\r\n            showNotification('Failed to remove media', 'error');\r\n        }\r\n    };\r\n\r\n    const addScrapeUrlToFile = async (url) => {\r\n        try {\r\n            console.log('Adding scrape URL to file:', url); // Add logging\r\n            const response = await fetch(`${API_URL}/api/save-scrape-url`, {\r\n                method: 'POST',\r\n                headers: { \r\n                    'Content-Type': 'application/json',\r\n                    // Add credentials header if needed\r\n                    'Authorization': `Bearer ${document.cookie.split('token=')[1]}`\r\n                },\r\n                ...fetchConfig,\r\n                body: JSON.stringify({ url }),\r\n            });\r\n            if (!response.ok) {\r\n                if (response.status === 401) {\r\n                    setIsLoggedIn(false);\r\n                    setShowLogin(true);\r\n                    throw new Error('Please login to save scrape URL');\r\n                }\r\n                throw new Error('Network response was not ok');\r\n            }\r\n        } catch (error) {\r\n            console.error('Failed to add scrape URL to file:', error);\r\n            showNotification(error.message || 'Failed to save scrape URL', 'error');\r\n        }\r\n    };\r\n\r\n    const scrapeSavedLinks = async () => {\r\n        try {\r\n            const response = await fetch(`${API_URL}/api/scrape-saved-links`, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                ...fetchConfig\r\n            });\r\n            if (!response.ok) throw new Error('Network response was not ok');\r\n        } catch (error) {\r\n            alert('Failed to scrape media. Please try again later.');\r\n            showNotification('Failed to scrape media. Please try again later.', 'error');\r\n        }\r\n    };\r\n\r\n    // Updated handleSimilar function\r\n    const handleSimilar = async (postLink) => {\r\n        const notificationId = Date.now();\r\n        try {\r\n            // Show initial notification without count\r\n            showProgressNotification(notificationId, 'Searching for similar posts...', 0, false);\r\n            console.log('Finding similar posts for:', postLink);\r\n            \r\n            const response = await fetch(`${API_URL}/api/similar`, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                ...fetchConfig,\r\n                body: JSON.stringify({ url: postLink }),\r\n            });\r\n\r\n            if (!response.ok) {\r\n                const errorData = await response.json().catch(() => ({}));\r\n                throw new Error(errorData.message || 'Failed to find similar posts');\r\n            }\r\n\r\n            const result = await response.json();\r\n            \r\n            if (result.count === 0) {\r\n                showProgressNotification(notificationId, 'No similar posts found', 0, true);\r\n            } else {\r\n                showProgressNotification(notificationId, 'Similar posts found!', result.count, true);\r\n                \r\n                // Handle media updates based on current sort\r\n                if (filter.toLowerCase() === 'newest') {\r\n                    // Refresh the entire media list for \"newest\" sort\r\n                    setCurrentPage(1);\r\n                    setMediaUrls([]);\r\n                    await fetchMedia(1, initialMediaPerPage);\r\n                } else if (result.count > 0) {\r\n                    // For other sorts, append new media to the end of the current list\r\n                    const latestMedia = await fetchLatestMedia(result.count);\r\n                    \r\n                    // Add only unique media that isn't already in our list\r\n                    const existingUrls = new Set(mediaUrls.map(media => media[0]));\r\n                    const uniqueNewMedia = latestMedia.filter(media => !existingUrls.has(media[0]));\r\n                    \r\n                    if (uniqueNewMedia.length > 0) {\r\n                        setMediaUrls(prevMediaUrls => [...prevMediaUrls, ...uniqueNewMedia]);\r\n                    }\r\n                }\r\n            }\r\n            \r\n            setTimeout(() => removeNotification(notificationId), 3000);\r\n        } catch (error) {\r\n            console.error('Failed to find similar:', error);\r\n            showNotification(error.message || 'Failed to find similar posts', 'error');\r\n            removeNotification(notificationId);\r\n        }\r\n    };\r\n\r\n    const scrollToMedia = useCallback((index) => {\r\n        const mediaElement = mediaRefs.current[index];\r\n        if (mediaElement) {\r\n            mediaElement.scrollIntoView({ behavior: 'smooth', block: 'center' });\r\n        }\r\n    }, []);\r\n\r\n    const handleMediaClick = (index) => {\r\n        if (!isClickable) return; // Prevent clicking if in cooldown\r\n        setFullscreenMedia(index);\r\n        mediaRefs.current.forEach((media, i) => {\r\n            if (media && i !== index && media.tagName === 'VIDEO') media.pause();\r\n        });\r\n        const mediaContainer = document.getElementById('media-container');\r\n        if (mediaContainer) {\r\n            mediaContainer.classList.add('fullscreen-active');\r\n        }\r\n        document.querySelectorAll('.postlink-icon, .close-icon, .remove-icon, .similar-icon').forEach(button => {\r\n            button.style.zIndex = '1002';\r\n        });\r\n        document.querySelector('.profile-button').style.display = 'none';\r\n        scrollToMedia(index);\r\n    };\r\n\r\n    const handleMediaClose = () => {\r\n        setFullscreenMedia(null);\r\n        setIsClickable(false); // Disable clicking\r\n        mediaRefs.current.forEach(media => {\r\n            if (media && media.tagName === 'VIDEO') media.pause();\r\n        });\r\n        const mediaContainer = document.getElementById('media-container');\r\n        if (mediaContainer) {\r\n            mediaContainer.classList.remove('fullscreen-active');\r\n        }\r\n        document.querySelectorAll('.postlink-icon, .close-icon, .remove-icon').forEach(button => {\r\n            button.style.zIndex = '';\r\n        });\r\n        document.querySelector('.profile-button').style.display = '';\r\n        \r\n        // Enable clicking after 500ms (0.5 seconds)\r\n        setTimeout(() => {\r\n            setIsClickable(true);\r\n        }, 100);\r\n    };\r\n\r\n    const handleClickOutside = (event) => {\r\n        if (fullscreenMedia !== null && !mediaRefs.current[fullscreenMedia]?.contains(event.target) && !event.target.closest('.postlink-icon, .close-icon, .remove-icon, .scrape-button, .auto-scroll-button, .similar-icon')) {\r\n            handleMediaClose();\r\n        }\r\n    };\r\n\r\n    const handleKeyPress = useCallback((e) => {\r\n        if (fullscreenMedia === null) return;\r\n\r\n        if (e.key === 'ArrowDown') {\r\n            const nextIndex = (fullscreenMedia + 1) % mediaUrls.length;\r\n            setFullscreenMedia(nextIndex);\r\n            const nextMedia = mediaRefs.current[nextIndex];\r\n            if (nextMedia && nextMedia.tagName === 'VIDEO') {\r\n                nextMedia.play().catch(() => {});\r\n            }\r\n            scrollToMedia(nextIndex);\r\n        } else if (e.key === 'ArrowUp') {\r\n            const prevIndex = (fullscreenMedia - 1 + mediaUrls.length) % mediaUrls.length;\r\n            setFullscreenMedia(prevIndex);\r\n            const prevMedia = mediaRefs.current[prevIndex];\r\n            if (prevMedia && prevMedia.tagName === 'VIDEO') {\r\n                prevMedia.play().catch(() => {});\r\n            }\r\n            scrollToMedia(prevIndex);\r\n        }\r\n    }, [fullscreenMedia, mediaUrls.length, scrollToMedia]);\r\n\r\n    const lastMediaElementRef = useCallback(node => {\r\n        if (!node) return;\r\n        \r\n        if (observer.current) observer.current.disconnect();\r\n        observer.current = new IntersectionObserver(entries => {\r\n            if (entries.some(entry => entry.isIntersecting)) {\r\n                setCurrentPage(prevPage => prevPage + 1);\r\n            }\r\n        }, { \r\n            threshold: 0.1,\r\n            rootMargin: '100px'\r\n        });\r\n                           \r\n        const lastColumnItems = document.querySelectorAll('.masonry-grid_column > div:last-child');\r\n        lastColumnItems.forEach(item => {\r\n            observer.current.observe(item);\r\n        });\r\n        \r\n        // Also observe the provided node\r\n        observer.current.observe(node);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        setCurrentPage(1);\r\n        setMediaUrls([]);\r\n        fetchMedia(1, initialMediaPerPage);\r\n    }, [filter, fetchMedia]);\r\n\r\n    useEffect(() => {\r\n        fetchMedia(currentPage, mediaPerPage);\r\n    }, [currentPage, fetchMedia]);\r\n\r\n    useEffect(() => {\r\n        document.addEventListener('mousedown', handleClickOutside);\r\n        document.addEventListener('keydown', handleKeyPress);\r\n        document.body.style.overflow = fullscreenMedia !== null ? 'hidden' : 'auto';\r\n        return () => {\r\n            document.removeEventListener('mousedown', handleClickOutside);\r\n            document.removeEventListener('keydown', handleKeyPress);\r\n            document.body.style.overflow = 'auto';\r\n        };\r\n    }, [fullscreenMedia, handleKeyPress]);\r\n\r\n    useEffect(() => {\r\n        if (autoScroll && fullscreenMedia !== null) {\r\n            const currentMedia = mediaRefs.current[fullscreenMedia];\r\n            const videoDuration = currentMedia.tagName === 'VIDEO' ? currentMedia.duration * 1000 : 10000;\r\n            const timeoutId = setTimeout(() => {\r\n                const nextIndex = (fullscreenMedia + 1) % mediaUrls.length;\r\n                setFullscreenMedia(nextIndex);\r\n                const nextMedia = mediaRefs.current[nextIndex];\r\n                if (nextMedia && nextMedia.tagName === 'VIDEO') {\r\n                    nextMedia.play().catch(() => {});\r\n                }\r\n            }, videoDuration <= 1 ? videoDuration * 5 : videoDuration);\r\n            return () => clearTimeout(timeoutId);\r\n        }\r\n    }, [fullscreenMedia, mediaUrls, autoScroll]);\r\n\r\n    useEffect(() => {\r\n        if (autoScroll && fullscreenMedia === null) {\r\n            const intervalId = setInterval(() => {\r\n                window.scrollBy({ top: 3, behavior: 'smooth' });\r\n            }, 1);\r\n            return () => clearInterval(intervalId);\r\n        }\r\n    }, [autoScroll, fullscreenMedia]);\r\n\r\n    const selectedMedia = useMemo(() => {\r\n        const startIndex = (currentPage - 1) * mediaPerPage;\r\n        return mediaUrls.slice(0, startIndex + (2 * mediaPerPage));\r\n    }, [currentPage, mediaUrls, mediaPerPage]);\r\n\r\n    const handleIconClick = (url) => window.open(url, '_blank');\r\n\r\n    const handleScrapeInputKeyPress = (event) => {\r\n        if (event.key === 'Enter') {\r\n            if (scrapeUrl.includes('@')) {\r\n                const listId = scrapeUrl.replace('@', '');\r\n                fetchTweetsFromList(listId);\r\n            } else if (scrapeUrl.includes('❤️')) {\r\n                scrapeSavedLinks();\r\n            } else {\r\n                addScrapeUrlToFile(scrapeUrl);\r\n                handleScrape();\r\n            }\r\n            setScrapeUrl('');\r\n        }\r\n    };\r\n\r\n    const breakpointColumnsObj = useMemo(() => ({\r\n        default: 4,\r\n        1100: 3,\r\n        700: 2,\r\n        500: 1\r\n    }), []);\r\n\r\n    const handleImageError = (e, link, index) => {\r\n        console.error('Image failed to load:', e);\r\n        e.target.style.display = 'none'; // Hide the broken image\r\n        \r\n        // If in fullscreen and all media in this item failed to display, move to next\r\n        if (fullscreenMedia === index) {\r\n            const mediaItem = mediaUrls[index];\r\n            const allMediaFailed = mediaItem[1].every(mediaLink => {\r\n                const mediaElement = Array.from(document.querySelectorAll(`img[src=\"${mediaLink}\"], video[src=\"${mediaLink}\"]`));\r\n                return mediaElement.every(el => el.style.display === 'none');\r\n            });\r\n            \r\n            if (allMediaFailed) {\r\n                const nextIndex = (index + 1) % mediaUrls.length;\r\n                setFullscreenMedia(nextIndex);\r\n                const nextMedia = mediaRefs.current[nextIndex];\r\n                if (nextMedia && nextMedia.tagName === 'VIDEO') {\r\n                    nextMedia.play().catch(() => {});\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleVideoError = async (e) => {\r\n        console.error('Video failed to load:', e);\r\n        if (e.target.error.code === 4) { // 404 error\r\n            e.target.style.display = 'none'; // Hide the broken video\r\n            \r\n            // Get the index from the video element's reference in mediaRefs\r\n            const index = Object.keys(mediaRefs.current).find(key => \r\n                mediaRefs.current[key] === e.target\r\n            );\r\n            \r\n            if (fullscreenMedia === Number(index)) {\r\n                const nextIndex = (Number(index) + 1) % mediaUrls.length;\r\n                setFullscreenMedia(nextIndex);\r\n                const nextMedia = mediaRefs.current[nextIndex];\r\n                if (nextMedia && nextMedia.tagName === 'VIDEO') {\r\n                    nextMedia.play().catch(() => {});\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    const checkPasswordRequirements = (password) => {\r\n        setPasswordRequirements({\r\n            length: password.length >= 12,\r\n            uppercase: /[A-Z]/.test(password),\r\n            lowercase: /[a-z]/.test(password),\r\n            number: /\\d/.test(password),\r\n            special: /[@$!%*?&]/.test(password)\r\n        });\r\n    };\r\n\r\n    const handleLogin = async (e) => {\r\n        e.preventDefault();\r\n        setLoginError('');\r\n        \r\n        try {\r\n            const response = await fetch(`${API_URL}/api/login`, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                ...fetchConfig,\r\n                body: JSON.stringify({ username, password }),\r\n            });\r\n\r\n            const data = await response.json();\r\n\r\n            if (!response.ok) {\r\n                throw new Error(data.message || 'Login failed');\r\n            }\r\n\r\n            setIsLoggedIn(true);\r\n            setShowLogin(false);\r\n            showNotification('Login successful', 'success');\r\n            setUsername('');\r\n            setPassword('');\r\n            \r\n            // Add this: Reset page and fetch media after successful login\r\n            setCurrentPage(1);\r\n            setMediaUrls([]);\r\n            await fetchMedia(1, initialMediaPerPage);\r\n            \r\n        } catch (error) {\r\n            setLoginError(error.message);\r\n            showNotification(error.message, 'error');\r\n        }\r\n    };\r\n\r\n    const handleRegister = async (e) => {\r\n        e.preventDefault();\r\n        setLoginError('');\r\n\r\n        try {\r\n            const response = await fetch(`${API_URL}/api/register`, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ username, password }),\r\n            });\r\n\r\n            const data = await response.json();\r\n\r\n            if (!response.ok) {\r\n                throw new Error(data.message || 'Registration failed');\r\n            }\r\n\r\n            showNotification('Registration successful! Please log in.', 'success');\r\n            setIsRegistering(false);\r\n            setUsername('');\r\n            setPassword('');\r\n        } catch (error) {\r\n            setLoginError(error.message);\r\n            showNotification(error.message, 'error');\r\n        }\r\n    };\r\n\r\n    const handleLogout = async () => {\r\n        try {\r\n            await fetch(`${API_URL}/api/logout`, {\r\n                method: 'POST',\r\n                ...fetchConfig,\r\n            });\r\n            setIsLoggedIn(false);\r\n            showNotification('Logged out successfully', 'success');\r\n            \r\n            // Close profile menu\r\n            setShowProfileMenu(false);\r\n            \r\n            // Short timeout to allow notification to appear before refresh\r\n            setTimeout(() => {\r\n                window.location.reload(); // Refresh the page\r\n            }, 1000);\r\n        } catch (error) {\r\n            showNotification('Logout failed', 'error');\r\n        }\r\n    };\r\n\r\n    // Add this function to handle saving filter preference\r\n    const saveFilterPreference = (filterValue) => {\r\n        document.cookie = `preferred_filter=${filterValue}; max-age=31536000; path=/`; // Expires in 1 year\r\n    };\r\n\r\n    // Add this function to get filter from cookie\r\n    const getFilterFromCookie = () => {\r\n        const match = document.cookie.match(/preferred_filter=([^;]+)/);\r\n        return match ? match[1] : 'default';\r\n    };\r\n\r\n    // Add this new effect to check login status on component mount\r\n    useEffect(() => {\r\n        const checkLoginStatus = async () => {\r\n            try {\r\n                const response = await fetch(`${API_URL}/api/profile`, {\r\n                    ...fetchConfig\r\n                });\r\n                \r\n                if (response.ok) {\r\n                    setIsLoggedIn(true);\r\n                    setAutoScroll(false); // Disable autoScroll when user logs in\r\n                    // Load saved filter preference\r\n                    const savedFilter = getFilterFromCookie();\r\n                    setFilter(savedFilter);\r\n                    setCurrentPage(1);\r\n                    setMediaUrls([]);\r\n                    await fetchMedia(1, initialMediaPerPage);\r\n                } else {\r\n                    setIsLoggedIn(false);\r\n                    setShowLogin(true);\r\n                }\r\n            } catch (error) {\r\n                console.error('Error checking login status:', error);\r\n                setIsLoggedIn(false);\r\n                setShowLogin(true);\r\n            }\r\n        };\r\n\r\n        checkLoginStatus();\r\n    }, []);\r\n\r\n    const handleExport = async () => {\r\n        try {\r\n            const mediaResponse = await fetch(`${API_URL}/api/export-links`, {\r\n                ...fetchConfig,\r\n                headers: {\r\n                    ...fetchConfig.headers,\r\n                    'Accept': 'application/json'\r\n                }\r\n            });\r\n            \r\n            if (!mediaResponse.ok) {\r\n                throw new Error(`Failed to export media links: ${mediaResponse.statusText}`);\r\n            }\r\n            \r\n            const scrapeResponse = await fetch(`${API_URL}/api/export-scrape-list`, {\r\n                ...fetchConfig,\r\n                headers: {\r\n                    ...fetchConfig.headers,\r\n                    'Accept': 'application/json'\r\n                }\r\n            });\r\n            \r\n            if (!scrapeResponse.ok) {\r\n                throw new Error(`Failed to export scrape links: ${scrapeResponse.statusText}`);\r\n            }\r\n\r\n            // Parse responses with error handling\r\n            let mediaData;\r\n            let scrapeData;\r\n            \r\n            try {\r\n                mediaData = await mediaResponse.json();\r\n                // Accept either array or object with links property\r\n                if (!Array.isArray(mediaData) && !mediaData.links) {\r\n                    mediaData = []; // Default to empty array if no valid data\r\n                }\r\n                // Convert to array if it's in object format\r\n                mediaData = Array.isArray(mediaData) ? mediaData : mediaData.links || [];\r\n            } catch (error) {\r\n                console.error('Media parse error:', error);\r\n                mediaData = []; // Default to empty array on parse error\r\n            }\r\n\r\n            try {\r\n                scrapeData = await scrapeResponse.json();\r\n                // Accept either array or object format\r\n                if (typeof scrapeData === 'string') {\r\n                    scrapeData = [scrapeData]; // Convert single string to array\r\n                } else if (!Array.isArray(scrapeData) && typeof scrapeData === 'object') {\r\n                    scrapeData = scrapeData.urls || Object.values(scrapeData) || []; // Try to extract URLs\r\n                } else if (!Array.isArray(scrapeData)) {\r\n                    scrapeData = []; // Default to empty array if no valid data\r\n                }\r\n            } catch (error) {\r\n                console.error('Scrape parse error:', error);\r\n                scrapeData = []; // Default to empty array on parse error\r\n            }\r\n            \r\n            // Create zip file with error handling\r\n            try {\r\n                const zip = new JSZip();\r\n                zip.file(\"media-links.json\", JSON.stringify(mediaData, null, 2));\r\n                zip.file(\"scrape-links.json\", JSON.stringify(scrapeData, null, 2));\r\n                \r\n                const content = await zip.generateAsync({ type: \"blob\" });\r\n                \r\n                // Create download link\r\n                const url = window.URL.createObjectURL(content);\r\n                const a = document.createElement('a');\r\n                a.href = url;\r\n                a.download = 'KupoNutEX.zip';\r\n                document.body.appendChild(a);\r\n                a.click();\r\n                window.URL.revokeObjectURL(url);\r\n                document.body.removeChild(a);\r\n                \r\n                showNotification('Collection exported successfully', 'success');\r\n            } catch (error) {\r\n                throw new Error('Failed to create zip file: ' + error.message);\r\n            }\r\n        } catch (error) {\r\n            console.error('Export error:', error);\r\n            showNotification(error.message || 'Failed to export collection', 'error');\r\n        }\r\n    };\r\n\r\n    const handleImport = async (event) => {\r\n        try {\r\n            const file = event.target.files[0];\r\n            if (!file) return;\r\n\r\n            const reader = new FileReader();\r\n            reader.onload = async (e) => {\r\n                try {\r\n                    let content = JSON.parse(e.target.result);\r\n                    \r\n                    // Convert old format if necessary\r\n                    if (!Array.isArray(content)) {\r\n                        content = Object.entries(content).map(([postLink, videoLinks]) => ({\r\n                            postLink,\r\n                            videoLinks: Array.isArray(videoLinks) ? videoLinks : [videoLinks]\r\n                        }));\r\n                    }\r\n\r\n                    // Validate content structure\r\n                    const validContent = content.filter(item => {\r\n                        return item && \r\n                               typeof item === 'object' && \r\n                               typeof item.postLink === 'string' && \r\n                               (Array.isArray(item.videoLinks) || typeof item.videoLinks === 'string');\r\n                    });\r\n\r\n                    if (validContent.length === 0) {\r\n                        throw new Error('No valid media links found in file');\r\n                    }\r\n\r\n                    const response = await fetch(`${API_URL}/api/import-links`, {\r\n                        method: 'POST',\r\n                        headers: { 'Content-Type': 'application/json' },\r\n                        ...fetchConfig,\r\n                        body: JSON.stringify(validContent)\r\n                    });\r\n\r\n                    if (!response.ok) throw new Error('Failed to import links');\r\n                    \r\n                    showNotification(`Successfully imported ${validContent.length} links`, 'success');\r\n                    // Refresh media after import\r\n                    setCurrentPage(1);\r\n                    setMediaUrls([]);\r\n                    await fetchMedia(1, initialMediaPerPage);\r\n                } catch (error) {\r\n                    console.error('Import error:', error);\r\n                    showNotification(error.message || 'Invalid file format', 'error');\r\n                }\r\n            };\r\n            reader.readAsText(file);\r\n        } catch (error) {\r\n            console.error('File reading error:', error);\r\n            showNotification('Failed to read import file', 'error');\r\n        }\r\n        // Reset file input\r\n        event.target.value = '';\r\n    };\r\n\r\n    const handleImportScrapeList = async (event) => {\r\n        try {\r\n            const file = event.target.files[0];\r\n            if (!file) return;\r\n\r\n            const reader = new FileReader();\r\n            reader.onload = async (e) => {\r\n                try {\r\n                    const content = JSON.parse(e.target.result);\r\n                    \r\n                    const response = await fetch(`${API_URL}/api/import-scrape-list`, {\r\n                        method: 'POST',\r\n                        headers: { 'Content-Type': 'application/json' },\r\n                        ...fetchConfig,\r\n                        body: JSON.stringify(content)\r\n                    });\r\n\r\n                    if (!response.ok) {\r\n                        const error = await response.json();\r\n                        throw new Error(error.message || 'Failed to import scrape list');\r\n                    }\r\n\r\n                    const result = await response.json();\r\n                    showNotification(`Successfully imported ${result.total} URLs and started scraping`, 'success');\r\n                    \r\n                    // Refresh media after import and scrape\r\n                    setCurrentPage(1);\r\n                    setMediaUrls([]);\r\n                    await fetchMedia(1, initialMediaPerPage);\r\n                } catch (error) {\r\n                    console.error('Import error:', error);\r\n                    showNotification(error.message || 'Invalid file format', 'error');\r\n                }\r\n            };\r\n            reader.readAsText(file);\r\n        } catch (error) {\r\n            console.error('File reading error:', error);\r\n            showNotification('Failed to read import file', 'error');\r\n        }\r\n        // Reset file input\r\n        event.target.value = '';\r\n    };\r\n\r\n    // Add function to mark media as loaded\r\n    const handleMediaLoad = (index) => {\r\n        setLoadedMedia(prev => ({\r\n            ...prev,\r\n            [index]: true\r\n        }));\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"notifications-container\">\r\n                {notifications.map((notification, index) => (\r\n                    <div \r\n                        key={notification.id} \r\n                        className={`notification ${notification.type}`}\r\n                        style={{ top: `${20 + (index * 70)}px` }}\r\n                    >\r\n                        <p className=\"notification-message\">{notification.message}</p>\r\n                        {notification.type === 'progress' && notification.isComplete && (\r\n                            <>\r\n                                <p className=\"notification-count\">\r\n                                    {notification.count} items found\r\n                                </p>\r\n                                <div \r\n                                    className=\"notification-progress-bar\" \r\n                                    style={{ width: '100%' }}\r\n                                />\r\n                            </>\r\n                        )}\r\n                        {notification.type === 'progress' && !notification.isComplete && (\r\n                            <div className=\"notification-loading\">\r\n                                <div className=\"notification-spinner\"></div>\r\n                            </div>\r\n                        )}\r\n                        {notification.type !== 'progress' && (\r\n                            <div className=\"notification-progress\" />\r\n                        )}\r\n                    </div>\r\n                ))}\r\n            </div>\r\n            <div className=\"main-content\">\r\n                <Masonry\r\n                    breakpointCols={breakpointColumnsObj}\r\n                    className=\"masonry-grid\"\r\n                    columnClassName=\"masonry-grid_column\"\r\n                >\r\n                    {selectedMedia.map((media, index) => {\r\n                        if (!media || !media[1]) return null;\r\n                        const [postLink, videoLinks] = media;\r\n                        const firstVideoLink = videoLinks[0];\r\n                        const isVideo = firstVideoLink && (firstVideoLink.endsWith('.mp4') || firstVideoLink.endsWith('.mov') || firstVideoLink.endsWith('.webm'));\r\n                        const isRule34Video = postLink.includes('rule34video');\r\n                        const embedUrl = firstVideoLink ? firstVideoLink.replace('/view/', '/embed/') : '';\r\n                        const isLoaded = loadedMedia[index];\r\n\r\n                        return (\r\n                            <div\r\n                                key={index}\r\n                                ref={index >= selectedMedia.length - breakpointColumnsObj.default ? lastMediaElementRef : null}\r\n                                className={`media-wrapper masonry-item ${fullscreenMedia === index ? 'fullscreen' : ''}`}\r\n                                onClick={() => handleMediaClick(index)}\r\n                            >\r\n                                <div className={`media-container ${isLoaded ? 'media-loaded' : 'media-loading'}`}>\r\n                                    {isRule34Video ? (\r\n                                        <iframe\r\n                                            className=\"media-container\"\r\n                                            src={embedUrl}\r\n                                            frameBorder=\"0\"\r\n                                            allowFullScreen\r\n                                            loop\r\n                                            title=\"Embedded Video\"\r\n                                            onLoad={() => handleMediaLoad(index)}\r\n                                        ></iframe>\r\n                                    ) : isVideo ? (\r\n                                        <video\r\n                                            ref={el => mediaRefs.current[index] = el}\r\n                                            src={firstVideoLink}\r\n                                            controls\r\n                                            muted={fullscreenMedia !== index}\r\n                                            loop\r\n                                            onLoadedData={() => handleMediaLoad(index)}\r\n                                            onError={(e) => handleVideoError(e, firstVideoLink)}\r\n                                            onLoadStart={() => {\r\n                                                setCookies();\r\n                                            }}\r\n                                        />\r\n                                    ) : (\r\n                                        <img\r\n                                            ref={el => mediaRefs.current[index] = el}\r\n                                            src={firstVideoLink}\r\n                                            alt=\"Media\"\r\n                                            onLoad={() => handleMediaLoad(index)}\r\n                                            onError={(e) => handleImageError(e, firstVideoLink, index)}\r\n                                        />\r\n                                    )}\r\n                                    {fullscreenMedia === index && videoLinks.slice(1).map((link, i) => (\r\n                                        <div key={i} className=\"fullscreen-media-container\">\r\n                                            <img className='fullscreen-media'\r\n                                                ref={el => mediaRefs.current[`${index}_${i}`] = el}\r\n                                                src={link}\r\n                                                alt=\"Media\"\r\n                                                onError={(e) => handleImageError(e, link, index)}\r\n                                                onLoad={() => {\r\n                                                    setCookies();\r\n                                                }}\r\n                                            />\r\n                                        </div>\r\n                                    ))}\r\n                                </div>\r\n                                <div className=\"icon-container\">\r\n                                    <button\r\n                                        className=\"close-icon\"\r\n                                        onClick={(e) => {\r\n                                            e.stopPropagation();\r\n                                            handleMediaClose();\r\n                                        }}\r\n                                        aria-label=\"Close media\"\r\n                                    >\r\n                                        <i className=\"fas fa-times\"></i>\r\n                                    </button>\r\n                                    <button\r\n                                        className=\"postlink-icon\"\r\n                                        onClick={(e) => {\r\n                                            e.stopPropagation();\r\n                                            handleIconClick(postLink);\r\n                                        }}\r\n                                        aria-label=\"Open post link\"\r\n                                    >\r\n                                        <i className=\"fas fa-link\"></i>\r\n                                    </button>\r\n                                    {!postLink.includes('kusowanka') && (\r\n                                        <button\r\n                                            className=\"similar-icon\"\r\n                                            onClick={(e) => {\r\n                                                e.stopPropagation();\r\n                                                handleSimilar(postLink);\r\n                                            }}\r\n                                            aria-label=\"Find similar media\"\r\n                                        >\r\n                                            <i className=\"fas fa-clone\"></i>\r\n                                        </button>\r\n                                    )}\r\n                                </div>\r\n                                {isLoggedIn && (\r\n                                    <button\r\n                                        className=\"remove-icon\"\r\n                                        onClick={(e) => {\r\n                                            e.stopPropagation();\r\n                                            handleRemove(postLink); // Now we just pass postLink, not the specific videoLink\r\n                                        }}\r\n                                        aria-label=\"Remove media\"\r\n                                    >\r\n                                        <i className=\"fas fa-trash\"></i>\r\n                                    </button>\r\n                                )}\r\n                            </div>\r\n                        );\r\n                    })}\r\n                    {loading && (\r\n                        <div className=\"loading-placeholder\"></div>\r\n                    )}\r\n                </Masonry>\r\n                <div id=\"bottom-of-page\"></div>\r\n                {!showLogin && (\r\n                    <div className=\"overlay-buttons\">\r\n                        {isLoggedIn && (\r\n                            <button\r\n                                onClick={() => setShowSettings(!showSettings)}\r\n                                className=\"settings-button\"\r\n                                aria-label=\"Settings\"\r\n                            >\r\n                                <i className=\"fas fa-cog\"></i>\r\n                            </button>\r\n                        )}\r\n                        <button\r\n                            onClick={() => setAutoScroll(!autoScroll)}\r\n                            className={`auto-scroll-button ${autoScroll ? 'active' : ''}`}\r\n                            aria-label=\"Toggle auto scroll\"\r\n                        >\r\n                            <i className=\"fas fa-arrow-down\"></i>\r\n                        </button>\r\n                        <button\r\n                            onClick={() => isLoggedIn ? setShowProfileMenu(!showProfileMenu) : setShowLogin(true)}\r\n                            className={`profile-button ${isLoggedIn ? 'logged-in' : ''}`}\r\n                            aria-label=\"Profile\"\r\n                        >\r\n                            <i className={`fas ${isLoggedIn ? 'fa-user-check' : 'fa-user'}`}></i>\r\n                        </button>\r\n                        {showProfileMenu && isLoggedIn && (\r\n                            <div className=\"profile-menu\">\r\n                                <div className=\"profile-menu-header\">\r\n                                    <h3>Profile Menu</h3>\r\n                                    <button onClick={() => setShowProfileMenu(false)}>\r\n                                        <i className=\"fas fa-times\"></i>\r\n                                    </button>\r\n                                </div>\r\n                                <div className=\"profile-menu-content\">\r\n                                    <button className=\"profile-menu-button\" onClick={handleExport}>\r\n                                        <i className=\"fas fa-download\"></i>\r\n                                        Export Collection\r\n                                    </button>\r\n                                    <label className=\"profile-menu-button\">\r\n                                        <i className=\"fas fa-upload\"></i>\r\n                                        Import Collection\r\n                                        <input\r\n                                            type=\"file\"\r\n                                            accept=\".json\"\r\n                                            onChange={handleImport}\r\n                                            style={{ display: 'none' }}\r\n                                        />\r\n                                    </label>\r\n                                    <label className=\"profile-menu-button\">\r\n                                        <i className=\"fas fa-list\"></i>\r\n                                        Import Scrape List\r\n                                        <input\r\n                                            type=\"file\"\r\n                                            accept=\".json\"\r\n                                            onChange={handleImportScrapeList}\r\n                                            style={{ display: 'none' }}\r\n                                        />\r\n                                    </label>\r\n                                    <div className=\"profile-menu-divider\"></div>\r\n                                    <button className=\"profile-menu-button danger\" onClick={handleLogout}>\r\n                                        <i className=\"fas fa-sign-out-alt\"></i>\r\n                                        Logout\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                )}\r\n                {showSettings && (\r\n                    <div className=\"settings-dialog\">\r\n                        <div className=\"settings-content\">\r\n                            <div className=\"settings-header\">\r\n                                <h2>Gallery Settings</h2>\r\n                                <button onClick={() => setShowSettings(false)}>\r\n                                    <i className=\"fas fa-times\"></i>\r\n                                </button>\r\n                            </div>\r\n                            <div className=\"settings-body\">\r\n                                <div className=\"settings-item\">\r\n                                    <label htmlFor=\"scrape-url\">Scrape URL</label>\r\n                                    <div className=\"scrape-input-container\">\r\n                                        <input\r\n                                            id=\"scrape-url\"\r\n                                            value={scrapeUrl}\r\n                                            onChange={(e) => setScrapeUrl(e.target.value)}\r\n                                            onKeyPress={handleScrapeInputKeyPress}\r\n                                            placeholder=\"Enter URL to scrape\"\r\n                                        />\r\n                                        <button\r\n                                            onClick={() => {\r\n                                                if (scrapeUrl.includes('@')) {\r\n                                                    const listId = scrapeUrl.replace('@', '');\r\n                                                    fetchTweetsFromList(listId);\r\n                                                } else if (scrapeUrl.includes('❤️')) {\r\n                                                    scrapeSavedLinks();\r\n                                                } else {\r\n                                                    addScrapeUrlToFile(scrapeUrl);\r\n                                                    handleScrape();\r\n                                                }\r\n                                                setScrapeUrl('');\r\n                                            }}\r\n                                            aria-label=\"Scrape URL\"\r\n                                        >\r\n                                            Scrape\r\n                                        </button>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"settings-item\">\r\n                                    <label htmlFor=\"filter\">Sort by:</label>\r\n                                    <select \r\n                                        id=\"filter\" \r\n                                        value={filter} \r\n                                        onChange={(e) => {\r\n                                            const newFilter = e.target.value;\r\n                                            setFilter(newFilter);\r\n                                            saveFilterPreference(newFilter);\r\n                                        }}\r\n                                    >\r\n                                        <option value=\"Default\">Default</option>\r\n                                        <option value=\"Newest\">Newest</option>\r\n                                        <option value=\"Random\">Random</option>\r\n                                    </select>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n                {showLogin && (\r\n                    <div className=\"login-dialog\">\r\n                        <div className=\"login-content\">\r\n                            <div className=\"login-header\">\r\n                                <h2>{isRegistering ? 'Create Account' : 'Login'}</h2>\r\n                                <button onClick={() => {\r\n                                    setShowLogin(false);\r\n                                    setIsRegistering(false);\r\n                                    setLoginError('');\r\n                                }}>\r\n                                    <i className=\"fas fa-times\"></i>\r\n                                </button>\r\n                            </div>\r\n                            {loginError && (\r\n                                <div className=\"login-error\">\r\n                                    {loginError}\r\n                                </div>\r\n                            )}\r\n                            <form className=\"login-form\" onSubmit={isRegistering ? handleRegister : handleLogin}>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    placeholder=\"Username\"\r\n                                    value={username}\r\n                                    onChange={(e) => setUsername(e.target.value)}\r\n                                    required\r\n                                />\r\n                                <input\r\n                                    type=\"password\"\r\n                                    placeholder=\"Password\"\r\n                                    value={password}\r\n                                    onChange={(e) => {\r\n                                        setPassword(e.target.value);\r\n                                        if (isRegistering) {\r\n                                            checkPasswordRequirements(e.target.value);\r\n                                        }\r\n                                    }}\r\n                                    required\r\n                                />\r\n                                {isRegistering && (\r\n                                    <div className=\"password-requirements\">\r\n                                        <p className={passwordRequirements.length ? 'met' : ''}>\r\n                                            ✓ At least 12 characters\r\n                                        </p>\r\n                                        <p className={passwordRequirements.uppercase ? 'met' : ''}>\r\n                                            ✓ One uppercase letter\r\n                                        </p>\r\n                                        <p className={passwordRequirements.lowercase ? 'met' : ''}>\r\n                                            ✓ One lowercase letter\r\n                                        </p>\r\n                                        <p className={passwordRequirements.number ? 'met' : ''}>\r\n                                            ✓ One number\r\n                                        </p>\r\n                                        <p className={passwordRequirements.special ? 'met' : ''}>\r\n                                            ✓ One special character (@$!%*?&)\r\n                                        </p>\r\n                                    </div>\r\n                                )}\r\n                                <button type=\"submit\">\r\n                                    {isRegistering ? 'Create Account' : 'Login'}\r\n                                </button>\r\n                            </form>\r\n                            <div className=\"login-options\">\r\n                                <button onClick={() => {\r\n                                    setIsRegistering(!isRegistering);\r\n                                    setLoginError('');\r\n                                }}>\r\n                                    {isRegistering \r\n                                        ? 'Already have an account? Login' \r\n                                        : 'Need an account? Register'}\r\n                                </button>\r\n                            </div>\r\n                            {isLoggedIn && (\r\n                                <div className=\"profile-actions\">\r\n                                    <button onClick={handleExport} className=\"export-button\">\r\n                                        <i className=\"fas fa-download\"></i> Export Links\r\n                                    </button>\r\n                                    <label className=\"import-button\">\r\n                                        <i className=\"fas fa-upload\"></i> Import Links\r\n                                        <input\r\n                                            type=\"file\"\r\n                                            accept=\".json\"\r\n                                            onChange={handleImport}\r\n                                            style={{ display: 'none' }}\r\n                                        />\r\n                                    </label>\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default React.memo(VideoList);\r\n"],"names":["API_URL","config","VideoList","mediaUrls","setMediaUrls","useState","currentPage","setCurrentPage","scrapeUrl","setScrapeUrl","fullscreenMedia","setFullscreenMedia","loading","setLoading","isLoggedIn","setIsLoggedIn","autoScroll","setAutoScroll","filter","setFilter","showSettings","setShowSettings","notifications","setNotifications","showLogin","setShowLogin","isRegistering","setIsRegistering","username","setUsername","password","setPassword","loginError","setLoginError","passwordRequirements","setPasswordRequirements","length","uppercase","lowercase","number","special","showProfileMenu","setShowProfileMenu","isClickable","setIsClickable","loadedMedia","setLoadedMedia","mediaRefs","useRef","mediaSet","Set","observer","shuffleArray","array","reverse","i","j","Math","floor","random","fetchConfig","credentials","headers","fetchMedia","useCallback","async","page","limit","mediaLinks","sortedMediaLinks","response","fetch","cache","ok","status","Error","json","map","item","postLink","videoLinks","defaultLinks","shuffledLinks","reversedLinks","toLowerCase","startIndex","endIndex","newMediaUrls","slice","current","clear","uniqueMediaUrls","media","has","forEach","add","prevMediaUrls","error","console","showNotification","message","setCookies","cookies","JSON","parse","localStorage","getItem","cookie","document","name","value","domain","path","fetchTweetsFromList","method","body","stringify","alert","type","arguments","undefined","id","Date","now","newNotification","prev","setTimeout","notification","showProgressNotification","count","isComplete","log","find","n","removeNotification","fetchLatestMedia","handleScrape","notificationId","split","url","result","linksAdded","latestMedia","existingUrls","uniqueNewMedia","addScrapeUrlToFile","scrapeSavedLinks","scrollToMedia","index","mediaElement","scrollIntoView","behavior","block","handleMediaClose","tagName","pause","mediaContainer","getElementById","classList","remove","querySelectorAll","button","style","zIndex","querySelector","display","handleClickOutside","event","_mediaRefs$current$fu","contains","target","closest","handleKeyPress","e","key","nextIndex","nextMedia","play","catch","prevIndex","prevMedia","lastMediaElementRef","node","disconnect","IntersectionObserver","entries","some","entry","isIntersecting","prevPage","threshold","rootMargin","observe","useEffect","addEventListener","overflow","removeEventListener","currentMedia","videoDuration","duration","timeoutId","clearTimeout","intervalId","setInterval","window","scrollBy","top","clearInterval","selectedMedia","useMemo","breakpointColumnsObj","default","handleImageError","link","every","mediaLink","Array","from","el","savedFilter","getFilterFromCookie","match","checkLoginStatus","handleExport","mediaResponse","statusText","scrapeResponse","mediaData","scrapeData","isArray","links","urls","Object","values","zip","JSZip","file","content","generateAsync","URL","createObjectURL","a","createElement","href","download","appendChild","click","revokeObjectURL","removeChild","handleImport","files","reader","FileReader","onload","_ref","validContent","readAsText","handleMediaLoad","_jsxs","children","_jsx","className","_Fragment","width","Masonry","breakpointCols","columnClassName","firstVideoLink","isVideo","endsWith","isRule34Video","includes","embedUrl","replace","isLoaded","ref","onClick","handleMediaClick","src","frameBorder","allowFullScreen","loop","title","onLoad","controls","muted","onLoadedData","onError","code","keys","Number","handleVideoError","onLoadStart","alt","stopPropagation","open","errorData","handleSimilar","handleRemove","accept","onChange","total","location","reload","htmlFor","onKeyPress","listId","placeholder","newFilter","filterValue","onSubmit","preventDefault","data","required","test","checkPasswordRequirements","React"],"sourceRoot":""}