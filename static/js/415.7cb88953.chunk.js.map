{"version":3,"file":"static/js/415.7cb88953.chunk.js","mappings":"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","sources":["config.js","components/VideoList.js"],"sourcesContent":["// Dynamic configuration based on environment\r\n\r\n// Detect if we're running in development mode\r\nconst isDevelopment = process.env.NODE_ENV === 'development' || \r\n                      window.location.hostname === 'localhost' || \r\n                      window.location.hostname === '127.0.0.1';\r\n\r\n// Set API URL based on environment\r\nconst config = {\r\n  API_URL: process.env.NODE_ENV === 'production' \r\n    ? 'https://kupo-nuts.onrender.com'\r\n    : 'http://localhost:5000'\r\n};\r\n\r\nconsole.log('Running in', isDevelopment ? 'DEVELOPMENT' : 'PRODUCTION', 'mode');\r\nconsole.log('Using API URL:', config.API_URL);\r\n\r\nexport default config;\r\n","import React, { useState, useEffect, useRef, useCallback, useMemo } from 'react';\r\nimport Masonry from 'react-masonry-css';\r\nimport './VideoList.css';\r\nimport JSZip from 'jszip';\r\nimport defaultLinks from './default-links.json';\r\nimport config from '../config'; // Import the config file\r\nimport io from 'socket.io-client';\r\n\r\nconst API_URL = config.API_URL;\r\nconst LOCAL_STORAGE_KEY = 'kupoNuts_mediaLinks'; // Add this constant for localStorage key\r\n\r\n// Add helper functions for localStorage\r\nconst saveToLocalStorage = (mediaLinks) => {\r\n    try {\r\n        localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(mediaLinks));\r\n    } catch (error) {\r\n        console.error('Error saving to localStorage:', error);\r\n    }\r\n};\r\n\r\nconst getFromLocalStorage = () => {\r\n    try {\r\n        const data = localStorage.getItem(LOCAL_STORAGE_KEY);\r\n        return data ? JSON.parse(data) : [];\r\n    } catch (error) {\r\n        console.error('Error reading from localStorage:', error);\r\n        return [];\r\n    }\r\n};\r\n\r\nconst addToLocalStorage = (mediaItem) => {\r\n    try {\r\n        const currentLinks = getFromLocalStorage();\r\n        // Check if item already exists to prevent duplicates\r\n        const exists = currentLinks.some(item => item.postLink === mediaItem.postLink);\r\n        if (!exists) {\r\n            currentLinks.push(mediaItem);\r\n            saveToLocalStorage(currentLinks);\r\n        }\r\n        return currentLinks;\r\n    } catch (error) {\r\n        console.error('Error adding to localStorage:', error);\r\n        return [];\r\n    }\r\n};\r\n\r\nconst VideoList = () => {\r\n    const [mediaUrls, setMediaUrls] = useState([]);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [scrapeUrl, setScrapeUrl] = useState('');\r\n    const [fullscreenMedia, setFullscreenMedia] = useState(null);\r\n    const [loading, setLoading] = useState(false);\r\n    const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n    const [autoScroll, setAutoScroll] = useState(!isLoggedIn);\r\n    const [filter, setFilter] = useState('random'); // Default to random for non-logged in users\r\n    const [showSettings, setShowSettings] = useState(false);\r\n    const [notifications, setNotifications] = useState([]);\r\n    const [showLogin, setShowLogin] = useState(false);\r\n    const [isRegistering, setIsRegistering] = useState(false);\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [loginError, setLoginError] = useState('');\r\n    const [passwordRequirements, setPasswordRequirements] = useState({\r\n        length: false,\r\n        uppercase: false,\r\n        lowercase: false,\r\n        number: false,\r\n        special: false\r\n    });\r\n    const [showProfileMenu, setShowProfileMenu] = useState(false);\r\n    const [isClickable, setIsClickable] = useState(true);\r\n    const [loadedMedia, setLoadedMedia] = useState({});\r\n    const [randomSeed, setRandomSeed] = useState(Date.now());\r\n    const [tagFilter, setTagFilter] = useState(null);\r\n    const [contentFilter, setContentFilter] = useState('sfw'); // Default to 'sfw'\r\n    const [globalVolume, setGlobalVolume] = useState(0.1); // Add global volume state with default 10%\r\n    const [socket, setSocket] = useState(null); // Add socket state here\r\n    const [searchQuery, setSearchQuery] = useState(''); // New unified search query\r\n    const guestId = useRef(localStorage.getItem('kupoguestid') || `guest-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`);\r\n    const [showDefaultLinks, setShowDefaultLinks] = useState(false); // Add state for showing default links\r\n    const prevScrollY = useRef(0); // Add ref to track previous scroll position\r\n    const mediaRefs = useRef([]);\r\n    const mediaSet = useRef(new Set());\r\n    const observer = useRef();\r\n    const scrapeNotificationId = useRef(null);\r\n    const similarNotificationId = useRef(null); // Keep separate IDs for different operations\r\n    const tagSearchNotificationId = useRef(null);\r\n    const [showConfirmClear, setShowConfirmClear] = useState(false);\r\n    const [tagBlacklist, setTagBlacklist] = useState('');\r\n    const [scrollSpeed, setScrollSpeed] = useState(3); // Default scroll speed\r\n    const [tagSearchQuery, setTagSearchQuery] = useState('');\r\n    let defaultMediaLinks = [];\r\n\r\n    const initialMediaPerPage = 8;\r\n    const mediaPerPage = 16;\r\n\r\n    const shuffleArray = useCallback((array) => {\r\n        const newArray = [...array];\r\n        newArray.reverse();\r\n        const rand = seedrandom(randomSeed.toString());\r\n        for (let i = newArray.length - 1; i > 0; i--) {\r\n            const j = Math.floor(rand() * (i + 1));\r\n            [newArray[i], newArray[j]] = [newArray[j], newArray[i]];\r\n        }\r\n        newArray.reverse();\r\n        return newArray;\r\n    }, [randomSeed]);\r\n\r\n    const fetchConfig = {\r\n        credentials: 'include',\r\n    };\r\n\r\n    // Add a new helper function to filter media by tag\r\n    const filterMediaByTag = useCallback((mediaLinks, searchTerm) => {\r\n        if (!searchTerm) return mediaLinks;\r\n        \r\n        const lowercaseSearchTerm = searchTerm.toLowerCase();\r\n        return mediaLinks.filter(item => {\r\n            const tags = item[2];\r\n            \r\n            // Handle array format tags (legacy format)\r\n            if (Array.isArray(tags)) {\r\n                return tags.some(tag => tag.toLowerCase().includes(lowercaseSearchTerm));\r\n            }\r\n            \r\n            // Handle object format tags (current format)\r\n            return Object.values(tags).some(categoryTags => \r\n                Array.isArray(categoryTags) && categoryTags.some(tag => \r\n                    tag.toLowerCase().includes(lowercaseSearchTerm)\r\n                )\r\n            );\r\n        });\r\n    }, []);\r\n\r\n    const applyTagBlacklist = useCallback((media) => {\r\n        if (!tagBlacklist) return media;\r\n\r\n        const blacklist = tagBlacklist.split(',').map(tag => tag.trim().toLowerCase());\r\n\r\n        return media.filter(item => {\r\n            const tags = item[2];\r\n\r\n            if (!tags) return true;\r\n\r\n            const allTags = [];\r\n\r\n            if (Array.isArray(tags)) {\r\n                tags.forEach(tag => allTags.push(tag.toLowerCase()));\r\n            } else {\r\n                Object.values(tags).forEach(categoryTags => {\r\n                    if (Array.isArray(categoryTags)) {\r\n                        categoryTags.forEach(tag => allTags.push(tag.toLowerCase()));\r\n                    }\r\n                });\r\n            }\r\n\r\n            return !blacklist.some(blacklistedTag =>\r\n                allTags.some(tag => tag.includes(blacklistedTag))\r\n            );\r\n        });\r\n    }, [tagBlacklist]);\r\n\r\n    const fetchMedia = useCallback(async (page, limit) => {\r\n        setLoading(true);\r\n        try {\r\n            let mediaLinks;\r\n            if (isLoggedIn) {\r\n                const response = await fetch(`${API_URL}/api/media`, {\r\n                    ...fetchConfig,\r\n                    cache: 'no-cache'\r\n                });\r\n                \r\n                if (!response.ok) {\r\n                    if (response.status === 401) {\r\n                        //setIsLoggedIn(false);\r\n                        //throw new Error('Jlullaby');\r\n                    }\r\n                    //throw new Error('Network response was not ok');\r\n                }\r\n                \r\n                const data = await response.json();\r\n                if (data && data.length > 0) {\r\n                    mediaLinks = data.map(item => [item.postLink || '', item.videoLinks, item.tags || {}]);\r\n                }\r\n                \r\n                // Load default links if option is enabled\r\n                if (showDefaultLinks && defaultLinks?.length > 0) {\r\n                    defaultMediaLinks = defaultLinks.map(item => [item.postLink || '', item.videoLinks, item.tags || {}]);\r\n                }\r\n            } else {\r\n                // Non-logged in users - prioritize links from localStorage\r\n                const localStorageLinks = getFromLocalStorage();\r\n                \r\n                if (localStorageLinks && localStorageLinks.length > 0) {\r\n                    // Format localStorage data to match expected array format\r\n                    mediaLinks = localStorageLinks.map(item => [\r\n                        item.postLink || '',\r\n                        item.videoLinks || [],\r\n                        item.tags || {}\r\n                    ]);\r\n                }\r\n                \r\n                // Add default links when localStorage is empty or showDefaultLinks is enabled\r\n                if ((mediaLinks.length === 0 || showDefaultLinks) && defaultLinks?.length > 0) {\r\n                    defaultMediaLinks = defaultLinks.map(item => [item.postLink || '', item.videoLinks, item.tags || {}]);\r\n                }\r\n            }\r\n            \r\n            // Combine user links with default links if needed\r\n            if (defaultMediaLinks.length > 0) {\r\n                if (isLoggedIn && showDefaultLinks) {\r\n                    mediaLinks = [...mediaLinks, ...defaultMediaLinks];\r\n                } else if (!isLoggedIn) {\r\n                    // For non-logged in users, ensure we add default links if empty or requested\r\n                    mediaLinks = mediaLinks.length > 0 ? \r\n                        (showDefaultLinks ? [...mediaLinks, ...defaultMediaLinks] : mediaLinks) : \r\n                        defaultMediaLinks;\r\n                }\r\n            }\r\n\r\n            // Step 2: Apply tag filtering if needed\r\n            if (tagFilter) {\r\n                mediaLinks = filterMediaByTag(mediaLinks, tagFilter);\r\n            }\r\n\r\n            // Apply tag blacklist\r\n            mediaLinks = applyTagBlacklist(mediaLinks);\r\n\r\n            // Step 3: Apply sorting based on filter\r\n            const totalAvailableItems = mediaLinks.length;\r\n            const startIndex = (page - 1) * limit;\r\n\r\n            let sortedMediaLinks = [];\r\n\r\n            switch (filter.toLowerCase()) {\r\n                case 'newest': \r\n                    // For non-logged in users, keep local storage items first (in reverse order)\r\n                    // followed by default items (also in reverse order)\r\n                    sortedMediaLinks = [...mediaLinks].reverse();\r\n                    break;\r\n                case 'random':\r\n                    sortedMediaLinks = shuffleArray([...mediaLinks]);\r\n                    break;\r\n                case 'oldest':\r\n                    sortedMediaLinks = [...mediaLinks];\r\n                    break;\r\n                default:\r\n                    sortedMediaLinks = page % 2 === 0 \r\n                        ? [...mediaLinks].reverse() \r\n                        : shuffleArray([...mediaLinks]);\r\n                    break;\r\n            }\r\n\r\n            // Step 4: Paginate and update state\r\n            const endIndex = Math.min(startIndex + limit, totalAvailableItems);\r\n           \r\n            const pageMediaUrls = sortedMediaLinks.slice(startIndex, endIndex);\r\n\r\n            if (startIndex >= totalAvailableItems) {\r\n                console.log('Reached the end of media items, refreshing...');\r\n                return;\r\n            }\r\n\r\n            // Step 5: Update state with unique media items\r\n            if (page === 1) {\r\n                mediaSet.current.clear();\r\n                setMediaUrls(pageMediaUrls);\r\n            } else {\r\n                const uniqueMediaUrls = pageMediaUrls.filter(media => !mediaSet.current.has(media[1][0]));\r\n                uniqueMediaUrls.forEach(media => mediaSet.current.add(media[1][0]));\r\n                setMediaUrls(prevMediaUrls => [...prevMediaUrls, ...uniqueMediaUrls]);\r\n            }\r\n            \r\n        } catch (error) {\r\n            \r\n            // As a fallback for non-logged in users when fetch fails, use localStorage and defaults\r\n            if (!isLoggedIn) {\r\n                const localStorageLinks = getFromLocalStorage();\r\n                let mediaLinks = [];\r\n                \r\n                if (localStorageLinks && localStorageLinks.length > 0) {\r\n                    mediaLinks = localStorageLinks.map(item => [\r\n                        item.postLink || '',\r\n                        item.videoLinks || [],\r\n                        item.tags || {},\r\n                        { isUserContent: true } // Mark as user content\r\n                    ]);\r\n                }\r\n                \r\n                // Always show defaults in error cases if localStorage is empty\r\n                if (mediaLinks.length === 0 && defaultLinks?.length > 0) {\r\n                    const defaultMediaLinks = defaultLinks.map(item => [\r\n                        item.postLink || '', \r\n                        item.videoLinks, \r\n                        item.tags || {},\r\n                        { isDefault: true } // Mark as default content\r\n                    ]);\r\n                    mediaLinks = defaultMediaLinks;\r\n                } else if (showDefaultLinks && defaultLinks?.length > 0) {\r\n                    // Add default links when showDefaultLinks is enabled\r\n                    const defaultMediaLinks = defaultLinks.map(item => [\r\n                        item.postLink || '', \r\n                        item.videoLinks, \r\n                        item.tags || {},\r\n                        { isDefault: true } // Mark as default content\r\n                    ]);\r\n                    mediaLinks = [...mediaLinks, ...defaultMediaLinks];\r\n                }\r\n                \r\n                if (mediaLinks.length > 0) {\r\n                    // Apply filtering, sorting, and pagination similar to the main function\r\n                    if (tagFilter) {\r\n                        mediaLinks = filterMediaByTag(mediaLinks, tagFilter);\r\n                    }\r\n\r\n                    mediaLinks = applyTagBlacklist(mediaLinks);\r\n                    \r\n                    let sortedMediaLinks = [];\r\n\r\n                    const userItems = mediaLinks.filter(item => item[3]?.isUserContent).reverse();\r\n                    const defaultItems = mediaLinks.filter(item => item[3]?.isDefault).reverse();\r\n\r\n                    switch (filter.toLowerCase()) {\r\n                        case 'newest':\r\n                            // For non-logged in users, keep local storage items first (in reverse order)\r\n                            // followed by default items (also in reverse order)\r\n                            sortedMediaLinks = [...userItems, ...defaultItems];\r\n                            break;\r\n                        case 'random':\r\n                            sortedMediaLinks = shuffleArray([...mediaLinks]);\r\n                            break;\r\n                        case 'oldest':\r\n                            sortedMediaLinks = [...mediaLinks];\r\n                            break;\r\n                        default:\r\n                            sortedMediaLinks = shuffleArray([...mediaLinks]);\r\n                            break;\r\n                    }\r\n                    \r\n                    const totalAvailableItems = sortedMediaLinks.length;\r\n                    const startIndex = (page - 1) * limit;\r\n                    const endIndex = Math.min(startIndex + limit, totalAvailableItems);\r\n                    const pageMediaUrls = sortedMediaLinks.slice(startIndex, endIndex);\r\n                    \r\n                    if (startIndex >= totalAvailableItems) {\r\n                        console.log('Reached the end of media items, refreshing...');\r\n                        return;\r\n                    }\r\n                    \r\n                    if (page === 1) {\r\n                        mediaSet.current.clear();\r\n                        setMediaUrls(pageMediaUrls);\r\n                    } else {\r\n                        const uniqueMediaUrls = pageMediaUrls.filter(media => !mediaSet.current.has(media[1][0]));\r\n                        uniqueMediaUrls.forEach(media => mediaSet.current.add(media[1][0]));\r\n                        setMediaUrls(prevMediaUrls => [...prevMediaUrls, ...uniqueMediaUrls]);\r\n                    }\r\n                    \r\n                }\r\n            }\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, [filter, isLoggedIn, shuffleArray, tagFilter, showDefaultLinks, filterMediaByTag, applyTagBlacklist]);\r\n\r\n    const setCookies = () => {\r\n        const cookies = JSON.parse(localStorage.getItem('cookies'));\r\n        if (cookies) {\r\n            cookies.forEach(cookie => {\r\n                document.cookie = `${cookie.name}=${cookie.value}; domain=${cookie.domain}; path=${cookie.path}`;\r\n            });\r\n        }\r\n    };\r\n\r\n    const fetchTweetsFromList = async (username) => {\r\n        try {\r\n            const response = await fetch(`${API_URL}/api/tweets`, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ username }),\r\n                ...fetchConfig\r\n            });\r\n            if (!response.ok) throw new Error('Network response was not ok');\r\n        } catch (error) {\r\n            alert('Failed to fetch tweets. Please try again later.');\r\n        }\r\n    };\r\n\r\n    const showNotification = (message, type = 'info') => {\r\n        // Create a more unique ID using both timestamp and a random string\r\n        const id = `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`; \r\n        const newNotification = { id, message, type };\r\n        \r\n        setNotifications(prev => [...prev, newNotification]);\r\n        \r\n        // Remove this specific notification after 3 seconds\r\n        setTimeout(() => {\r\n            setNotifications(prev => prev.filter(notification => notification.id !== id));\r\n        }, 3000);\r\n    };\r\n\r\n    const removeNotification = (id) => {\r\n        setNotifications(prev => prev.filter(notification => notification.id !== id));\r\n    };\r\n\r\n    const showProgressNotification = (id, message, progress, isComplete) => {\r\n        setNotifications(prev => {\r\n            const existingNotificationIndex = prev.findIndex(n => n.id === id);\r\n\r\n            if (existingNotificationIndex !== -1) {\r\n                const updatedNotifications = [...prev];\r\n                updatedNotifications[existingNotificationIndex] = {\r\n                    ...updatedNotifications[existingNotificationIndex],\r\n                    message,\r\n                    progress,\r\n                    isComplete\r\n                };\r\n                return updatedNotifications;\r\n            } else {\r\n                return [...prev, { id, message, type: 'progress', progress, isComplete }];\r\n            }\r\n        });\r\n    };\r\n\r\n    const handleScrape = async (url = null) => {\r\n        const urlToScrape = url || scrapeUrl;\r\n\r\n        try {\r\n            const headers = {\r\n                'Content-Type': 'application/json',\r\n                ...(isLoggedIn ? {\r\n                    'Authorization': `Bearer ${document.cookie.split('token=')[1]}`\r\n                } : {\r\n                    'x-guest-id': guestId.current\r\n                })\r\n            };\r\n\r\n            console.log('Scraping URL:', urlToScrape);\r\n            console.log(isLoggedIn ? 'Logged in' : 'Guest user');\r\n            \r\n            // Use the same API endpoint for both logged-in and guest users\r\n            const response = await fetch(`${API_URL}/api/scrape`, {\r\n                method: 'POST',\r\n                headers: headers,\r\n                ...fetchConfig,\r\n                body: JSON.stringify({ url: urlToScrape }),\r\n            });\r\n            \r\n            if (!response.ok) {\r\n                if (response.status === 401) {\r\n                    throw new Error('Please login to scrape media');\r\n                }\r\n                throw new Error('Network response was not ok');\r\n            }\r\n            \r\n            // For both logged-in users and guests, results will come through WebSocket\r\n            if (!isLoggedIn) {\r\n                showNotification('Scraping started - results will be saved to your browser', 'info');\r\n            }\r\n            \r\n            setScrapeUrl('');\r\n            \r\n        } catch (error) {\r\n            console.error('Failed to scrape:', error);\r\n            showNotification(error.message || 'Failed to scrape. Please try again.', 'error');\r\n            removeNotification(scrapeNotificationId.current);\r\n        }\r\n    };\r\n\r\n    const handleRemove = async (postLink) => {\r\n        try {\r\n            if (isLoggedIn) {\r\n                // Original server-side remove logic\r\n                const response = await fetch(`${API_URL}/api/remove`, {\r\n                    method: 'POST',\r\n                    headers: { \r\n                        'Content-Type': 'application/json',\r\n                    },\r\n                    ...fetchConfig,\r\n                    body: JSON.stringify({ postLink }),\r\n                });\r\n\r\n                if (!response.ok) {\r\n                    throw new Error('Failed to remove media');\r\n                }\r\n            } else {\r\n                // For non-logged in users, remove from localStorage\r\n                const localStorageLinks = getFromLocalStorage();\r\n                saveToLocalStorage(localStorageLinks.filter(item => item.postLink !== postLink));\r\n            }\r\n\r\n            // Update the local state to remove the entire post\r\n            setMediaUrls(prevMediaUrls => \r\n                prevMediaUrls.filter(media => media[0] !== postLink)\r\n            );\r\n\r\n            showNotification('Media removed successfully', 'success');\r\n        } catch (error) {\r\n            console.error('Failed to remove media:', error);\r\n            showNotification('Failed to remove media', 'error');\r\n        }\r\n    };\r\n\r\n    const addScrapeUrlToFile = async (url) => {\r\n        try {\r\n            const response = await fetch(`${API_URL}/api/save-scrape-url`, {\r\n                method: 'POST',\r\n                headers: { \r\n                    'Content-Type': 'application/json',\r\n                    // Add credentials header if needed\r\n                    'Authorization': `Bearer ${document.cookie.split('token=')[1]}`\r\n                },\r\n                ...fetchConfig,\r\n                body: JSON.stringify({ url }),\r\n            });\r\n            if (!response.ok) {\r\n                if (response.status === 401) {\r\n                    //setIsLoggedIn(false);\r\n                    //setShowLogin(true);\r\n                    //throw new Error('Please login to save scrape URL');\r\n                }\r\n                throw new Error('Network response was not ok');\r\n            }\r\n        } catch (error) {\r\n            console.error('Failed to add scrape URL to file:', error);\r\n            showNotification(error.message || 'Failed to save scrape URL', 'error');\r\n        }\r\n    };\r\n\r\n    const scrapeSavedLinks = async () => {\r\n        try {\r\n            const response = await fetch(`${API_URL}/api/scrape-saved-links`, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                ...fetchConfig\r\n            });\r\n            if (!response.ok) throw new Error('Network response was not ok');\r\n        } catch (error) {\r\n            alert('Failed to scrape media. Please try again later.');\r\n            showNotification('Failed to scrape media. Please try again later.', 'error');\r\n        }\r\n    };\r\n\r\n    // Updated handleSimilar function\r\n    const handleSimilar = async (postLink) => {\r\n\r\n        const headers = {\r\n            'Content-Type': 'application/json',\r\n            ...(isLoggedIn ? {\r\n                'Authorization': `Bearer ${document.cookie.split('token=')[1]}`\r\n            } : {\r\n                'x-guest-id': guestId.current\r\n            })\r\n        };\r\n\r\n        try {\r\n            const response = await fetch(`${API_URL}/api/similar`, {\r\n                method: 'POST',\r\n                headers: headers,\r\n                ...fetchConfig,\r\n                body: JSON.stringify({ url: postLink }),\r\n            });\r\n\r\n            if (!response.ok) {\r\n                const errorData = await response.json().catch(() => ({}));\r\n                throw new Error(errorData.message || 'Failed to find similar posts');\r\n            }\r\n            \r\n            // For both user types, show appropriate notification\r\n            if (!isLoggedIn) {\r\n                showNotification('Similar search started - results will be saved to your browser', 'info');\r\n            }\r\n            \r\n        } catch (error) {\r\n            console.error('Failed to find similar:', error);\r\n            showNotification(error.message || 'Failed to find similar posts', 'error');\r\n            removeNotification(similarNotificationId.current);\r\n        }\r\n    };\r\n\r\n    const handleTagSearch = async () => {\r\n        if (!tagSearchQuery.trim()) {\r\n            showNotification('Please enter a tag to search', 'info');\r\n            return;\r\n        }\r\n        \r\n        let notificationId = tagSearchNotificationId.current;\r\n        if (!notificationId) {\r\n            notificationId = `tag_search-${Date.now()}-${Math.random().toString(36).substr(2, 5)}`;\r\n            tagSearchNotificationId.current = notificationId;\r\n        }\r\n        \r\n        try {\r\n            showProgressNotification(notificationId, 'Searching for tags...', 0, false);\r\n            \r\n            // Convert contentFilter string to numeric value\r\n            const contentFilterValue = contentFilter === 'sfw' ? 0 : 1;\r\n\r\n            const headers = {\r\n                'Content-Type': 'application/json',\r\n                ...(isLoggedIn ? {\r\n                    'Authorization': `Bearer ${document.cookie.split('token=')[1]}`\r\n                } : {\r\n                    'x-guest-id': guestId.current\r\n                })\r\n            };\r\n\r\n            console.log(isLoggedIn ? 'Logged in' : 'Guest user');\r\n            \r\n            const response = await fetch(`${API_URL}/api/search-tags`, {\r\n                method: 'POST',\r\n                headers: headers,\r\n                ...fetchConfig,\r\n                body: JSON.stringify({ \r\n                    query: tagSearchQuery,\r\n                    contentType: contentFilterValue\r\n                }),\r\n            });\r\n\r\n            if (!response.ok) {\r\n                if (response.status === 401 && isLoggedIn) {\r\n                    setIsLoggedIn(false);\r\n                    setShowLogin(true);\r\n                    throw new Error('Please login to search tags');\r\n                }\r\n                throw new Error('Failed to search tags');\r\n            }\r\n            \r\n            // Appropriate notification for guest users\r\n            if (!isLoggedIn) {\r\n                showNotification('Tag search started - results will be saved to your browser', 'info');\r\n            }\r\n            \r\n        } catch (error) {\r\n            console.error('Failed to search tags:', error);\r\n            showNotification(error.message || 'Failed to search tags', 'error');\r\n        }\r\n    };\r\n\r\n    const scrollToMedia = useCallback((index) => {\r\n        const mediaElement = mediaRefs.current[index];\r\n        if (mediaElement) {\r\n            mediaElement.scrollIntoView({ behavior: 'smooth', block: 'center' });\r\n        }\r\n    }, []);\r\n\r\n    const handleMediaClick = (index) => {\r\n        if (!isClickable) return; // Prevent clicking if in cooldown\r\n        setFullscreenMedia(index);\r\n        mediaRefs.current.forEach((media, i) => {\r\n            if (media && i !== index && media.tagName === 'VIDEO') media.pause();\r\n        });\r\n        const mediaContainer = document.getElementById('media-container');\r\n        if (mediaContainer) {\r\n            mediaContainer.classList.add('fullscreen-active');\r\n        }\r\n        document.querySelectorAll('.postlink-icon, .close-icon, .remove-icon, .similar-icon, .tag, .tags-panel').forEach(button => {\r\n            button.style.zIndex = '1002';\r\n        });\r\n        document.querySelector('.profile-button').style.display = 'none';\r\n        scrollToMedia(index);\r\n    };\r\n\r\n    const handleMediaClose = () => {\r\n        setFullscreenMedia(null);\r\n        setIsClickable(false); // Disable clicking\r\n        mediaRefs.current.forEach(media => {\r\n            if (media && media.tagName === 'VIDEO') media.pause();\r\n        });\r\n        const mediaContainer = document.getElementById('media-container');\r\n        if (mediaContainer) {\r\n            mediaContainer.classList.remove('fullscreen-active');\r\n        }\r\n        document.querySelectorAll('.postlink-icon, .close-icon, .remove-icon').forEach(button => {\r\n            button.style.zIndex = '';\r\n        });\r\n        document.querySelector('.profile-button').style.display = '';\r\n        \r\n        // Enable clicking after 500ms (0.5 seconds)\r\n        setTimeout(() => {\r\n            setIsClickable(true);\r\n        }, 100);\r\n    };\r\n\r\n    const handleClickOutside = (event) => {\r\n        if (fullscreenMedia !== null && !mediaRefs.current[fullscreenMedia]?.contains(event.target) && !event.target.closest('.postlink-icon, .close-icon, .remove-icon, .scrape-button, .auto-scroll-button, .similar-icon, .tag, .tags-panel')) {\r\n            handleMediaClose();\r\n        }\r\n    };\r\n\r\n    const handleKeyPress = useCallback((e) => {\r\n        if (fullscreenMedia === null) return;\r\n\r\n        if (e.key === 'ArrowDown') {\r\n            const nextIndex = (fullscreenMedia + 1) % mediaUrls.length;\r\n            setFullscreenMedia(nextIndex);\r\n            const nextMedia = mediaRefs.current[nextIndex];\r\n            if (nextMedia && nextMedia.tagName === 'VIDEO') {\r\n                nextMedia.play().catch(() => {});\r\n            }\r\n            scrollToMedia(nextIndex);\r\n        } else if (e.key === 'ArrowUp') {\r\n            const prevIndex = (fullscreenMedia - 1 + mediaUrls.length) % mediaUrls.length;\r\n            setFullscreenMedia(prevIndex);\r\n            const prevMedia = mediaRefs.current[prevIndex];\r\n            if (prevMedia && prevMedia.tagName === 'VIDEO') {\r\n                prevMedia.play().catch(() => {});\r\n            }\r\n            scrollToMedia(prevIndex);\r\n        }\r\n    }, [fullscreenMedia, mediaUrls.length, scrollToMedia]);\r\n\r\n    const lastMediaElementRef = useCallback(node => {\r\n        if (!node) return;\r\n        \r\n        if (observer.current) observer.current.disconnect();\r\n        observer.current = new IntersectionObserver(entries => {\r\n            if (entries.some(entry => entry.isIntersecting)) {\r\n                setCurrentPage(prevPage => prevPage + 1);\r\n            }\r\n        }, { \r\n            threshold: 0.1,\r\n            rootMargin: '100px'\r\n        });\r\n                           \r\n        const lastColumnItems = document.querySelectorAll('.masonry-grid_column > div:last-child');\r\n        lastColumnItems.forEach(item => {\r\n            observer.current.observe(item);\r\n        });\r\n        \r\n        // Also observe the provided node\r\n        observer.current.observe(node);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        setCurrentPage(1);\r\n        setMediaUrls([]);\r\n        fetchMedia(1, initialMediaPerPage);\r\n    }, [filter, tagFilter, fetchMedia]);\r\n\r\n    useEffect(() => {\r\n        setCurrentPage(1);\r\n        setMediaUrls([]);\r\n        fetchMedia(1, initialMediaPerPage);\r\n    }, [tagBlacklist, fetchMedia]);\r\n\r\n    useEffect(() => {\r\n        fetchMedia(currentPage, mediaPerPage);\r\n    }, [currentPage, fetchMedia]);\r\n\r\n    useEffect(() => {\r\n        document.addEventListener('mousedown', handleClickOutside);\r\n        document.addEventListener('keydown', handleKeyPress);\r\n        document.body.style.overflow = fullscreenMedia !== null ? 'hidden' : 'auto';\r\n        return () => {\r\n            document.removeEventListener('mousedown', handleClickOutside);\r\n            document.removeEventListener('keydown', handleKeyPress);\r\n            document.body.style.overflow = 'auto';\r\n        };\r\n    }, [fullscreenMedia, handleKeyPress]);\r\n\r\n    useEffect(() => {\r\n        if (autoScroll && fullscreenMedia !== null) {\r\n            const currentMedia = mediaRefs.current[fullscreenMedia];\r\n            const videoDuration = currentMedia.tagName === 'VIDEO' ? currentMedia.duration * 1000 : 10000;\r\n            const timeoutId = setTimeout(() => {\r\n                const nextIndex = (fullscreenMedia + 1) % mediaUrls.length;\r\n                setFullscreenMedia(nextIndex);\r\n                const nextMedia = mediaRefs.current[nextIndex];\r\n                if (nextMedia && nextMedia.tagName === 'VIDEO') {\r\n                    nextMedia.play().catch(() => {});\r\n                }\r\n            }, videoDuration <= 1 ? videoDuration * 5 : videoDuration);\r\n            return () => clearTimeout(timeoutId);\r\n        }\r\n    }, [fullscreenMedia, mediaUrls, autoScroll]);\r\n\r\n    useEffect(() => {\r\n        if (autoScroll && fullscreenMedia === null) {\r\n            const intervalId = setInterval(() => {\r\n                window.scrollBy({ top: 3, behavior: 'smooth' });\r\n            }, 1);\r\n            return () => clearInterval(intervalId);\r\n        }\r\n    }, [autoScroll, fullscreenMedia]);\r\n\r\n    useEffect(() => {\r\n        setRandomSeed(Date.now());\r\n    }, [filter]);\r\n\r\n    useEffect(() => {\r\n        const script = document.createElement('script');\r\n        script.src = 'https://cdnjs.cloudflare.com/ajax/libs/seedrandom/3.0.5/seedrandom.min.js';\r\n        script.async = true;\r\n        document.body.appendChild(script);\r\n\r\n        return () => {\r\n            document.body.removeChild(script);\r\n        };\r\n    }, []);\r\n\r\n    const seedrandom = (seed) => {\r\n        if (window.Math.seedrandom) {\r\n            return new window.Math.seedrandom(seed);\r\n        }\r\n        return () => Math.random();\r\n    };\r\n\r\n    const selectedMedia = useMemo(() => {\r\n        const startIndex = (currentPage - 1) * mediaPerPage;\r\n        return mediaUrls.slice(0, startIndex + (2 * mediaPerPage));\r\n    }, [currentPage, mediaUrls, mediaPerPage]);\r\n\r\n    const handleIconClick = (url) => window.open(url, '_blank');\r\n\r\n    const handleScroll = useCallback(() => {\r\n        const currentScrollY = window.scrollY;\r\n        \r\n        if (currentScrollY < 50) {\r\n            prevScrollY.current = currentScrollY;\r\n            return;\r\n        }\r\n        \r\n       \r\n        \r\n        prevScrollY.current = currentScrollY;\r\n    });\r\n\r\n    useEffect(() => {\r\n        let scrollTimeout;\r\n        \r\n        const onScroll = () => {\r\n            if (scrollTimeout) return;\r\n            scrollTimeout = setTimeout(() => {\r\n                handleScroll();\r\n                scrollTimeout = null;\r\n            }, 200);\r\n        };\r\n        \r\n        window.addEventListener('scroll', onScroll);\r\n        return () => window.removeEventListener('scroll', onScroll);\r\n    }, [handleScroll]);\r\n\r\n    const breakpointColumnsObj = useMemo(() => ({\r\n        default: 4,\r\n        1100: 3,\r\n        700: 2,\r\n        500: 1\r\n    }), []);\r\n\r\n    const handleImageError = (e, link, index) => {\r\n        console.error('Image failed to load:', e);\r\n        e.target.style.display = 'none'; // Hide the broken image\r\n        \r\n        // If in fullscreen and all media in this item failed to display, move to next\r\n        if (fullscreenMedia === index) {\r\n            const mediaItem = mediaUrls[index];\r\n            const allMediaFailed = mediaItem[1].every(mediaLink => {\r\n                const mediaElement = Array.from(document.querySelectorAll(`img[src=\"${mediaLink}\"], video[src=\"${mediaLink}\"]`));\r\n                return mediaElement.every(el => el.style.display === 'none');\r\n            });\r\n            \r\n            if (allMediaFailed) {\r\n                const nextIndex = (index + 1) % mediaUrls.length;\r\n                setFullscreenMedia(nextIndex);\r\n                const nextMedia = mediaRefs.current[nextIndex];\r\n                if (nextMedia && nextMedia.tagName === 'VIDEO') {\r\n                    nextMedia.play().catch(() => {});\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleVideoError = async (e) => {\r\n        console.error('Video failed to load:', e);\r\n        if (e.target.error.code === 4) { // 404 error\r\n            e.target.style.display = 'none'; // Hide the broken video\r\n            \r\n            // Get the index from the video element's reference in mediaRefs\r\n            const index = Object.keys(mediaRefs.current).find(key => \r\n                mediaRefs.current[key] === e.target\r\n            );\r\n            \r\n            if (fullscreenMedia === Number(index)) {\r\n                const nextIndex = (Number(index) + 1) % mediaUrls.length;\r\n                setFullscreenMedia(nextIndex);\r\n                const nextMedia = mediaRefs.current[nextIndex];\r\n                if (nextMedia && nextMedia.tagName === 'VIDEO') {\r\n                    nextMedia.play().catch(() => {});\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    const checkPasswordRequirements = (password) => {\r\n        setPasswordRequirements({\r\n            length: password.length >= 12,\r\n            uppercase: /[A-Z]/.test(password),\r\n            lowercase: /[a-z]/.test(password),\r\n            number: /\\d/.test(password),\r\n            special: /[@$!%*?&]/.test(password)\r\n        });\r\n    };\r\n\r\n    const handleLogin = async (e) => {\r\n        e.preventDefault();\r\n        setLoginError('');\r\n        \r\n        try {\r\n            const response = await fetch(`${API_URL}/api/login`, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                ...fetchConfig,\r\n                body: JSON.stringify({ username, password }),\r\n            });\r\n\r\n            const data = await response.json();\r\n\r\n            if (!response.ok) {\r\n                throw new Error(data.message || 'Login failed');\r\n            }\r\n\r\n            setIsLoggedIn(true);\r\n            setShowLogin(false);\r\n            showNotification('Login successful', 'success');\r\n            setUsername('');\r\n            setPassword('');\r\n            \r\n            // Load saved filter preference after login\r\n            const savedFilter = getFilterFromCookie();\r\n            setFilter(savedFilter || 'default'); \r\n            \r\n            // Reset page and fetch media after successful login\r\n            setCurrentPage(1);\r\n            setMediaUrls([]);\r\n            \r\n            // Update socket authentication status after successful login\r\n            if (socket) {\r\n                socket.emit('authenticate', { username });\r\n            }\r\n            \r\n            await fetchMedia(1, initialMediaPerPage);\r\n            \r\n        } catch (error) {\r\n            setLoginError(error.message);\r\n            showNotification(error.message, 'error');\r\n        }\r\n    };\r\n\r\n    const handleRegister = async (e) => {\r\n        e.preventDefault();\r\n        setLoginError('');\r\n\r\n        try {\r\n            const response = await fetch(`${API_URL}/api/register`, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ username, password }),\r\n            });\r\n\r\n            const data = await response.json();\r\n\r\n            if (!response.ok) {\r\n                throw new Error(data.message || 'Registration failed');\r\n            }\r\n\r\n            showNotification('Registration successful! Please log in.', 'success');\r\n            setIsRegistering(false);\r\n            setUsername('');\r\n            setPassword('');\r\n        } catch (error) {\r\n            setLoginError(error.message);\r\n            showNotification(error.message, 'error');\r\n        }\r\n    };\r\n\r\n    const handleLogout = async () => {\r\n        try {\r\n            if (!isLoggedIn) {\r\n                setShowLogin(true);\r\n                return;\r\n            }\r\n            \r\n            await fetch(`${API_URL}/api/logout`, {\r\n                method: 'POST',\r\n                ...fetchConfig,\r\n            });\r\n            \r\n            // Update state first\r\n            setIsLoggedIn(false);\r\n            setFilter('random'); // Don't trigger extra render cycle with handleFilterChange\r\n            showNotification('Logged out successfully', 'success');\r\n            \r\n            // Close profile menu\r\n            setShowProfileMenu(false);\r\n            \r\n            // Instead of fetching from API, just set to default links for non-logged in users\r\n            if (defaultLinks && defaultLinks.length > 0) {\r\n                const links = defaultLinks.map(item => [item.postLink || '', item.videoLinks]);\r\n                const shuffledLinks = shuffleArray([...links]);\r\n                setMediaUrls(shuffledLinks.slice(0, initialMediaPerPage));\r\n            } else {\r\n                setMediaUrls([]);\r\n            }\r\n            \r\n            // Reset page\r\n            setCurrentPage(1);\r\n            \r\n        } catch (error) {\r\n            showNotification('Logout failed', 'error');\r\n        }\r\n    };\r\n\r\n    // Add this function to handle saving filter preference\r\n    const saveFilterPreference = (filterValue) => {\r\n        document.cookie = `preferred_filter=${filterValue}; max-age=31536000; path=/`; // Expires in 1 year\r\n    };\r\n\r\n    // Add this function to get filter from cookie\r\n    const getFilterFromCookie = () => {\r\n        const match = document.cookie.match(/preferred_filter=([^;]+)/);\r\n        return match ? match[1] : 'default';\r\n    };\r\n\r\n    const saveScrollSpeedPreference = (speed) => {\r\n        document.cookie = `preferred_scroll_speed=${speed}; max-age=31536000; path=/`;\r\n    };\r\n\r\n    const getScrollSpeedFromCookie = () => {\r\n        const match = document.cookie.match(/preferred_scroll_speed=([^;]+)/);\r\n        return match ? parseInt(match[1], 10) : 3;\r\n    };\r\n\r\n    const saveVolumePreference = (volume) => {\r\n        document.cookie = `preferred_volume=${volume}; max-age=31536000; path=/`;\r\n    };\r\n\r\n    const getVolumeFromCookie = () => {\r\n        const match = document.cookie.match(/preferred_volume=([^;]+)/);\r\n        return match ? parseFloat(match[1]) : 0.1;\r\n    };\r\n\r\n    const saveShowDefaultLinksPreference = (show) => {\r\n        document.cookie = `show_default_links=${show ? '1' : '0'}; max-age=31536000; path=/`;\r\n    };\r\n\r\n    const getShowDefaultLinksFromCookie = () => {\r\n        const match = document.cookie.match(/show_default_links=([^;]+)/);\r\n        return match ? match[1] === '1' : false;\r\n    };\r\n\r\n    // Add new functions for content filter preference\r\n    const saveContentFilterPreference = (filter) => {\r\n        document.cookie = `content_filter=${filter}; max-age=31536000; path=/`;\r\n    };\r\n\r\n    const getContentFilterFromCookie = () => {\r\n        const match = document.cookie.match(/content_filter=([^;]+)/);\r\n        return match ? match[1] : 'sfw';\r\n    };\r\n\r\n    // Add new functions for auto scroll preference\r\n    const saveAutoScrollPreference = (autoScroll) => {\r\n        document.cookie = `auto_scroll=${autoScroll ? '1' : '0'}; max-age=31536000; path=/`;\r\n    };\r\n\r\n    const getAutoScrollFromCookie = () => {\r\n        const match = document.cookie.match(/auto_scroll=([^;]+)/);\r\n        return match ? match[1] === '1' : false;\r\n    };\r\n\r\n    const handleFilterChange = (newFilter) => {\r\n        setFilter(newFilter);\r\n        saveFilterPreference(newFilter);\r\n        setRandomSeed(Date.now()); // Ensure random seed is updated when filter changes\r\n        \r\n        // Reset pagination and reload content\r\n        setCurrentPage(1);\r\n        setMediaUrls([]);\r\n        // Don't call fetchMedia here to prevent recursion in useEffect dependencies\r\n    };\r\n\r\n    const checkLoginStatus = async () => {\r\n        try {\r\n            const response = await fetch(`${API_URL}/api/verify-auth`, {\r\n                ...fetchConfig,\r\n                cache: 'no-cache'\r\n            });\r\n\r\n            if (response.ok) {\r\n                const userData = await response.json();\r\n                setIsLoggedIn(true);\r\n                setUsername(userData.username || '');\r\n                \r\n                // Get user preferences after confirming login\r\n                const savedFilter = getFilterFromCookie();\r\n                setFilter(savedFilter || 'default');\r\n                \r\n                // If socket exists, authenticate with the confirmed username\r\n                if (socket) {\r\n                    socket.emit('authenticate', { username: userData.username });\r\n                }\r\n            } else {\r\n                setIsLoggedIn(false);\r\n                setFilter('random'); // Default for non-logged users\r\n            }\r\n\r\n            // Load preferences from cookies regardless of login status\r\n            setScrollSpeed(getScrollSpeedFromCookie());\r\n            setShowDefaultLinks(getShowDefaultLinksFromCookie());\r\n            setContentFilter(getContentFilterFromCookie());\r\n            setAutoScroll(getAutoScrollFromCookie());\r\n\r\n        } catch (error) {\r\n            console.error('Error checking login status:', error);\r\n            setIsLoggedIn(false);\r\n            setFilter('random');\r\n\r\n            // Load preferences even on error\r\n            setScrollSpeed(getScrollSpeedFromCookie());\r\n            setContentFilter(getContentFilterFromCookie());\r\n            setAutoScroll(getAutoScrollFromCookie());\r\n\r\n            console.log('Error during login check, loading local storage content');\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        setCurrentPage(1);\r\n        setMediaUrls([]);\r\n        fetchMedia(1, initialMediaPerPage);\r\n    }, [isLoggedIn, filter, fetchMedia]);\r\n\r\n    useEffect(() => {\r\n        const savedScrollSpeed = getScrollSpeedFromCookie();\r\n        setScrollSpeed(savedScrollSpeed);\r\n        // Initialize the slider fill on component mount\r\n        setTimeout(() => updateSliderFill(savedScrollSpeed), 100);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const savedVolume = getVolumeFromCookie();\r\n        setGlobalVolume(savedVolume);\r\n        // Initialize the slider fill on component mount\r\n        setTimeout(() => updateVolumeSliderFill(savedVolume), 100);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        Object.values(mediaRefs.current).forEach(ref => {\r\n            if (ref && ref.tagName === 'VIDEO') {\r\n                ref.volume = globalVolume;\r\n            }\r\n        });\r\n    }, [globalVolume]);\r\n\r\n    useEffect(() => {\r\n        const savedShowDefaultLinks = getShowDefaultLinksFromCookie();\r\n        setShowDefaultLinks(savedShowDefaultLinks);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const savedContentFilter = getContentFilterFromCookie();\r\n        setContentFilter(savedContentFilter);\r\n    }, []);\r\n\r\n    const handleExport = async () => {\r\n        try {\r\n            const mediaResponse = await fetch(`${API_URL}/api/export-links`, {\r\n                ...fetchConfig,\r\n                headers: {\r\n                    ...fetchConfig.headers,\r\n                    'Accept': 'application/json'\r\n                }\r\n            });\r\n            \r\n            if (!mediaResponse.ok) {\r\n                throw new Error(`Failed to export media links: ${mediaResponse.statusText}`);\r\n            }\r\n            \r\n            const scrapeResponse = await fetch(`${API_URL}/api/export-scrape-list`, {\r\n                ...fetchConfig,\r\n                headers: {\r\n                    ...fetchConfig.headers,\r\n                    'Accept': 'application/json'\r\n                }\r\n            });\r\n            \r\n            if (!scrapeResponse.ok) {\r\n                throw new Error(`Failed to export scrape links: ${scrapeResponse.statusText}`);\r\n            }\r\n\r\n            // Parse responses with error handling\r\n            let mediaData;\r\n            let scrapeData;\r\n            \r\n            try {\r\n                mediaData = await mediaResponse.json();\r\n                // Accept either array or object with links property\r\n                if (!Array.isArray(mediaData) && !mediaData.links) {\r\n                    mediaData = []; // Default to empty array if no valid data\r\n                }\r\n                // Convert to array if it's in object format\r\n                mediaData = Array.isArray(mediaData) ? mediaData : mediaData.links || [];\r\n            } catch (error) {\r\n                console.error('Media parse error:', error);\r\n                mediaData = []; // Default to empty array on parse error\r\n            }\r\n\r\n            try {\r\n                scrapeData = await scrapeResponse.json();\r\n                // Accept either array or object format\r\n                if (typeof scrapeData === 'string') {\r\n                    scrapeData = [scrapeData]; // Convert single string to array\r\n                } else if (!Array.isArray(scrapeData) && typeof scrapeData === 'object') {\r\n                    scrapeData = scrapeData.urls || Object.values(scrapeData) || []; // Try to extract URLs\r\n                } else if (!Array.isArray(scrapeData)) {\r\n                    scrapeData = []; // Default to empty array if no valid data\r\n                }\r\n            } catch (error) {\r\n                console.error('Scrape parse error:', error);\r\n                scrapeData = []; // Default to empty array on parse error\r\n            }\r\n            \r\n            // Create zip file with error handling\r\n            try {\r\n                const zip = new JSZip();\r\n                zip.file(\"media-links.json\", JSON.stringify(mediaData, null, 2));\r\n                zip.file(\"scrape-links.json\", JSON.stringify(scrapeData, null, 2));\r\n                \r\n                const content = await zip.generateAsync({ type: \"blob\" });\r\n                \r\n                // Create download link\r\n                const url = window.URL.createObjectURL(content);\r\n                const a = document.createElement('a');\r\n                a.href = url;\r\n                a.download = 'KupoNutEX.zip';\r\n                document.body.appendChild(a);\r\n                a.click();\r\n                window.URL.revokeObjectURL(url);\r\n                document.body.removeChild(a);\r\n                \r\n                showNotification('Collection exported successfully', 'success');\r\n            } catch (error) {\r\n                throw new Error('Failed to create zip file: ' + error.message);\r\n            }\r\n        } catch (error) {\r\n            console.error('Export error:', error);\r\n            showNotification(error.message || 'Failed to export collection', 'error');\r\n        }\r\n    };\r\n\r\n    const handleImport = async (event) => {\r\n        try {\r\n            const file = event.target.files[0];\r\n            if (!file) return;\r\n\r\n            const reader = new FileReader();\r\n            reader.onload = async (e) => {\r\n                try {\r\n                    let content = JSON.parse(e.target.result);\r\n                    \r\n                    // Convert old format if necessary\r\n                    if (!Array.isArray(content)) {\r\n                        content = Object.entries(content).map(([postLink, videoLinks]) => ({\r\n                            postLink,\r\n                            videoLinks: Array.isArray(videoLinks) ? videoLinks : [videoLinks]\r\n                        }));\r\n                    }\r\n\r\n                    // Validate content structure\r\n                    const validContent = content.filter(item => {\r\n                        return item && \r\n                               typeof item === 'object' && \r\n                               typeof item.postLink === 'string' && \r\n                               (Array.isArray(item.videoLinks) || typeof item.videoLinks === 'string');\r\n                    });\r\n\r\n                    if (validContent.length === 0) {\r\n                        throw new Error('No valid media links found in file');\r\n                    }\r\n\r\n                    if (isLoggedIn) {\r\n                        // Server-side import for logged-in users\r\n                        const response = await fetch(`${API_URL}/api/import-links`, {\r\n                            method: 'POST',\r\n                            headers: { 'Content-Type': 'application/json' },\r\n                            ...fetchConfig,\r\n                            body: JSON.stringify(validContent)\r\n                        });\r\n\r\n                        if (!response.ok) throw new Error('Failed to import links');\r\n                        \r\n                        showNotification(`Successfully imported ${validContent.length} links`, 'success');\r\n                    } else {\r\n                        // Local storage import for non-logged-in users\r\n                        saveToLocalStorage(validContent);\r\n                        showNotification(`Successfully imported ${validContent.length} links to local storage`, 'success');\r\n                    }\r\n                    \r\n                    // Refresh the display in both cases\r\n                    setCurrentPage(1);\r\n                    setMediaUrls([]);\r\n                    await fetchMedia(1, initialMediaPerPage);\r\n                    \r\n                } catch (error) {\r\n                    console.error('Import error:', error);\r\n                    showNotification(error.message || 'Invalid file format', 'error');\r\n                }\r\n            };\r\n            reader.readAsText(file);\r\n        } catch (error) {\r\n            console.error('File reading error:', error);\r\n            showNotification('Failed to read import file', 'error');\r\n        }\r\n        // Reset file input\r\n        event.target.value = '';\r\n    };\r\n\r\n    const handleImportScrapeList = async (event) => {\r\n        try {\r\n            const file = event.target.files[0];\r\n            if (!file) return;\r\n\r\n            const reader = new FileReader();\r\n            reader.onload = async (e) => {\r\n                try {\r\n                    const content = JSON.parse(e.target.result);\r\n                    \r\n                    const response = await fetch(`${API_URL}/api/import-scrape-list`, {\r\n                        method: 'POST',\r\n                        headers: { 'Content-Type': 'application/json' },\r\n                        ...fetchConfig,\r\n                        body: JSON.stringify(content)\r\n                    });\r\n\r\n                    if (!response.ok) {\r\n                        const error = await response.json();\r\n                        throw new Error(error.message || 'Failed to import scrape list');\r\n                    }\r\n\r\n                    const result = await response.json();\r\n                    showNotification(`Successfully imported ${result.total} URLs and started scraping`, 'success');\r\n                    \r\n                    // Refresh media after import and scrape\r\n                    setCurrentPage(1);\r\n                    setMediaUrls([]);\r\n                    await fetchMedia(1, initialMediaPerPage);\r\n                } catch (error) {\r\n                    console.error('Import error:', error);\r\n                    showNotification(error.message || 'Invalid file format', 'error');\r\n                }\r\n            };\r\n            reader.readAsText(file);\r\n        } catch (error) {\r\n            console.error('File reading error:', error);\r\n            showNotification('Failed to read import file', 'error');\r\n        }\r\n        // Reset file input\r\n        event.target.value = '';\r\n    };\r\n\r\n    // Add function to mark media as loaded\r\n    const handleMediaLoad = (index) => {\r\n        setLoadedMedia(prev => ({\r\n            ...prev,\r\n            [index]: true\r\n        }));\r\n    };\r\n\r\n    // Handle tag click for filtering\r\n    const handleTagClick = (tag, e) => {\r\n        e.stopPropagation(); // Prevent triggering the media click\r\n        \r\n        if (tagFilter === tag) {\r\n            // If clicking the same tag again, clear the filter\r\n            setTagFilter(null);\r\n        } else {\r\n            // Set the new tag filter\r\n            setTagSearchQuery(tag.trim());\r\n            handleTagSearch();\r\n            setTagFilter(tag.trim());\r\n        }\r\n        \r\n        // Close fullscreen view when setting a tag filter\r\n        if (fullscreenMedia !== null) {\r\n            handleMediaClose();\r\n        }\r\n        \r\n        // Reset to page 1 when changing filters\r\n        setCurrentPage(1);\r\n        setMediaUrls([]);\r\n    };\r\n\r\n    // Add a component for the tags panel that supports categorized tags\r\n    const TagsPanel = ({ tags }) => {\r\n        // Handle the case where tags is null or empty\r\n        if (!tags) return <div className=\"tags-panel\"><div className=\"tags-header\">No tags available</div></div>;\r\n        \r\n        // Convert old format (array) to new format (object with categories) if needed\r\n        const categorizedTags = Array.isArray(tags) ? { general: tags } : tags;\r\n        \r\n        // Check if we have any tags in any category\r\n        const hasTags = Object.values(categorizedTags).some(categoryTags => \r\n            Array.isArray(categoryTags) && categoryTags.length > 0\r\n        );\r\n        \r\n        if (!hasTags) return <div className=\"tags-panel\"><div className=\"tags-header\">No tags available</div></div>;\r\n        \r\n        // Define category display order and labels\r\n        const categories = [\r\n            { key: 'author', label: 'Artists' },\r\n            { key: 'copyright', label: 'Copyright' },\r\n            { key: 'character', label: 'Characters' },\r\n            { key: 'general', label: 'General' }\r\n        ];\r\n        \r\n        return (\r\n            <div className=\"tags-panel\">\r\n                <div className=\"tags-header\">\r\n                    Tags\r\n                </div>\r\n                \r\n                {categories.map(category => {\r\n                    const categoryTags = categorizedTags[category.key];\r\n                    if (!categoryTags || categoryTags.length === 0) return null;\r\n                    \r\n                    return (\r\n                        <div key={category.key} className=\"tag-category\">\r\n                            <h3 className=\"tag-category-header\">{category.label}</h3>\r\n                            <div className=\"tags-list\">\r\n                                {categoryTags.map((tag, idx) => (\r\n                                    <span \r\n                                        key={`${category.key}-${idx}`}\r\n                                        className={`tag tag-${category.key} ${tagFilter === tag ? 'active' : ''}`}\r\n                                        onClick={(e) => handleTagClick(tag, e)}\r\n                                    >\r\n                                        {tag}\r\n                                    </span>\r\n                                ))}\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                })}\r\n            </div>\r\n        );\r\n    };\r\n\r\n    useEffect(() => {\r\n        // Store the guest ID in localStorage for persistence\r\n        localStorage.setItem('kupoguestid', guestId.current);\r\n        \r\n        const setupSocket = () => {\r\n            const newSocket = io(API_URL, {\r\n                withCredentials: true,\r\n                transports: ['websocket', 'polling'],\r\n                reconnection: true,\r\n                reconnectionAttempts: 10,\r\n                reconnectionDelay: 1000,\r\n                reconnectionDelayMax: 5000,\r\n                timeout: 20000\r\n            });\r\n            \r\n            newSocket.on('connect', () => {\r\n                console.log('Connected');\r\n                checkLoginStatus(); // Ensure login status is checked on connection\r\n                if (isLoggedIn && username) {\r\n                    newSocket.emit('authenticate', { username });\r\n                } else {\r\n                    // Authenticate as a guest\r\n                    newSocket.emit('authenticate', { isGuest: true, guestId: guestId.current });\r\n                }\r\n            });\r\n            \r\n            const handleProgressEvent = (data, type) => {\r\n                \r\n                let notificationIdRef;\r\n                switch (type) {\r\n                    case 'scrape':\r\n                        notificationIdRef = scrapeNotificationId;\r\n                        break;\r\n                    case 'similar':\r\n                        notificationIdRef = similarNotificationId;\r\n                        break;\r\n                    case 'tag_search':\r\n                        notificationIdRef = tagSearchNotificationId;\r\n                        break;\r\n                    default:\r\n                        notificationIdRef = scrapeNotificationId;\r\n                }\r\n                \r\n                if (!notificationIdRef.current) {\r\n                    // Create a more unique ID for progress notifications\r\n                    notificationIdRef.current = `${type}-${Date.now()}-${Math.random().toString(36).substr(2, 5)}`;\r\n                }\r\n                \r\n                setNotifications(prevNotifications => {\r\n                    const currentNotification = prevNotifications.find(n => n.id === notificationIdRef.current);\r\n                    \r\n                    const totalLinksAdded = currentNotification?.linksAdded || 0;\r\n                    const newLinksCount = data.newItems?.length || 0;\r\n                    \r\n                    const updatedLinksAdded = data.count !== undefined ? \r\n                        data.count :\r\n                        (totalLinksAdded + newLinksCount);\r\n                    \r\n                    const typeLabel = type.split('_')\r\n                        .map(word => word.charAt(0).toUpperCase() + word.slice(1))\r\n                        .join(' ');\r\n                    \r\n                    let linkCountMessage;\r\n                    if (data.isComplete) {\r\n                        linkCountMessage = `${typeLabel}: ${updatedLinksAdded} links found`;\r\n                    } else if (updatedLinksAdded > 0) {\r\n                        linkCountMessage = `${typeLabel}: ${updatedLinksAdded} links found so far`;\r\n                    } else {\r\n                        linkCountMessage = `${typeLabel}: ${data.message || 'Processing...'}`;\r\n                    }\r\n                    \r\n                    const updated = currentNotification \r\n                        ? prevNotifications.map(n => n.id === notificationIdRef.current ? {\r\n                            ...n,\r\n                            message: linkCountMessage,\r\n                            count: data.count !== undefined ? data.count : n.count || 0,\r\n                            isComplete: data.isComplete,\r\n                            linksAdded: updatedLinksAdded\r\n                        } : n)\r\n                        : [...prevNotifications, {\r\n                            id: notificationIdRef.current,\r\n                            message: linkCountMessage,\r\n                            type: 'progress',\r\n                            count: data.count || 0,\r\n                            isComplete: data.isComplete,\r\n                            linksAdded: updatedLinksAdded\r\n                        }];\r\n                    \r\n                    return updated;\r\n                });\r\n                \r\n                if (data.isComplete) {\r\n                    setTimeout(() => {\r\n                        const currentId = notificationIdRef.current;\r\n                        notificationIdRef.current = null;\r\n                        \r\n                        \r\n                        setNotifications(prev => prev.filter(n => n.id !== currentId));\r\n                    }, 3000);\r\n                }\r\n                \r\n                if (data.newItems && data.newItems.length > 0) {\r\n                    try {\r\n                        setMediaUrls(prevMediaUrls => {\r\n                            let formattedItems = data.newItems.map(item => [\r\n                                item.postLink || '',\r\n                                item.videoLinks || [],\r\n                                item.tags || {}\r\n                            ]);\r\n                            \r\n                            // For non-logged in users, also add to localStorage\r\n                            if (!isLoggedIn) {\r\n                                data.newItems.forEach(item => {\r\n                                    addToLocalStorage(item);\r\n                                });\r\n                            }\r\n\r\n                            return [...prevMediaUrls, ...formattedItems];\r\n                        });\r\n                        \r\n                    } catch (error) {\r\n                        console.error(`Error processing new ${type} items:`, error);\r\n                    }\r\n                }\r\n            };\r\n            \r\n            newSocket.on('scrape_progress', (data) => handleProgressEvent(data, 'scrape'));\r\n            newSocket.on('similar_progress', (data) => handleProgressEvent(data, 'similar'));\r\n            newSocket.on('tag_search_progress', (data) => handleProgressEvent(data, 'tag_search'));\r\n            \r\n            newSocket.on('error', (error) => {\r\n                console.error('WebSocket error:', error);\r\n                showNotification('WebSocket error. Some features may be affected.', 'error');\r\n            });\r\n\r\n            newSocket.on('reconnect', () => {\r\n                \r\n                if (isLoggedIn && username) {\r\n                    newSocket.emit('authenticate', { username });\r\n                } else {\r\n                    newSocket.emit('authenticate', { isGuest: true, guestId: guestId.current });\r\n                }\r\n                \r\n                showNotification('WebSocket reconnected', 'success');\r\n            });\r\n            \r\n            newSocket.on('reconnect_error', (error) => {\r\n                console.error('WebSocket reconnect error:', error);\r\n                showNotification('Failed to reconnect WebSocket', 'error');\r\n            });\r\n            \r\n            return newSocket;\r\n        };\r\n        \r\n        // Create socket connection regardless of login state\r\n        const newSocket = setupSocket();\r\n        setSocket(newSocket);\r\n        \r\n        return () => {\r\n            if (newSocket) {\r\n                newSocket.disconnect();\r\n            }\r\n        };\r\n        \r\n    }, [isLoggedIn, username, API_URL]); // Removed guestId from dependencies\r\n\r\n    const updateSliderFill = (value) => {\r\n        const slider = document.getElementById('scroll-speed');\r\n        if (slider) {\r\n            const percentage = ((value - 1) / 9) * 100;\r\n            slider.style.backgroundSize = `${percentage}% 100%`;\r\n        }\r\n    };\r\n\r\n    const updateVolumeSliderFill = (value) => {\r\n        const slider = document.getElementById('volume-control');\r\n        if (slider) {\r\n            const percentage = value * 100;\r\n            slider.style.backgroundSize = `${percentage}% 100%`;\r\n        }\r\n    };\r\n\r\n    const handleSettingsOpen = () => {\r\n        setShowSettings(true);\r\n        // Initialize sliders on settings open\r\n        setTimeout(() => {\r\n            updateSliderFill(scrollSpeed);\r\n            updateVolumeSliderFill(globalVolume);\r\n        }, 50); // Small timeout to ensure DOM elements are rendered\r\n    };\r\n\r\n    const handleClearCollection = () => {\r\n        setShowConfirmClear(true);\r\n    };\r\n\r\n    const confirmClearCollection = () => {\r\n        try {\r\n            if (isLoggedIn) {\r\n                // Clear from server\r\n                fetch(`${API_URL}/api/clear-collection`, {\r\n                    method: 'POST',\r\n                    ...fetchConfig,\r\n                }).then(response => {\r\n                    if (!response.ok) {\r\n                        throw new Error('Failed to clear collection on server');\r\n                    }\r\n                    setMediaUrls([]);\r\n                    showNotification('Collection cleared successfully', 'success');\r\n                }).catch(error => {\r\n                    console.error('Error clearing collection:', error);\r\n                    showNotification('Failed to clear collection', 'error');\r\n                });\r\n            } else {\r\n                // Clear from localStorage\r\n                localStorage.removeItem(LOCAL_STORAGE_KEY);\r\n                setMediaUrls([]);\r\n                showNotification('Local collection cleared', 'success');\r\n            }\r\n            setShowConfirmClear(false);\r\n        } catch (error) {\r\n            console.error('Error clearing collection:', error);\r\n            showNotification('Failed to clear collection', 'error');\r\n        } finally {\r\n            // Reset media URLs to default if not logged in\r\n            const defaultMediaLinks = defaultLinks.map(item => [item.postLink || '', item.videoLinks, item.tags || {}]);\r\n            setMediaUrls(defaultMediaLinks);\r\n        }\r\n    };\r\n\r\n    const cancelClearCollection = () => {\r\n        setShowConfirmClear(false);\r\n    };\r\n\r\n    const handleTagBlacklistChange = (event) => {\r\n        setTagBlacklist(event.target.value);\r\n    };\r\n\r\n    const handleUnifiedSearch = () => {\r\n        if (searchQuery.trim().toLowerCase().startsWith('http')) {\r\n            // It's a URL, set scrapeUrl and trigger scraping\r\n            setScrapeUrl(searchQuery.trim());\r\n            \r\n            // Handle special cases\r\n            if (searchQuery.includes('@')) {\r\n                const listId = searchQuery.trim().replace('@', '');\r\n                fetchTweetsFromList(listId);\r\n            } else if (searchQuery.includes('❤️')) {\r\n                scrapeSavedLinks();\r\n            } else {\r\n                // Regular URL\r\n                addScrapeUrlToFile(searchQuery.trim());\r\n                handleScrape(searchQuery.trim()); // Pass URL directly\r\n            }\r\n        } else {\r\n            // It's a tag, trigger tag search\r\n            setTagSearchQuery(searchQuery.trim());\r\n            handleTagSearch();\r\n            setTagFilter(searchQuery.trim());\r\n        }\r\n        \r\n        // Clear the search input\r\n        setSearchQuery('');\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"top-search-bar\">\r\n                <div className=\"left-section\">\r\n                    <div \r\n                        className=\"app-title\"\r\n                        onClick={() => window.location.reload()}\r\n                        style={{ cursor: 'pointer' }}\r\n                    >\r\n                        <i className=\"fas fa-cat logo-icon\"></i>\r\n                        <span>Kupo Nuts</span>\r\n                    </div>\r\n                </div>\r\n                \r\n                <button\r\n                    onClick={() => {\r\n                        const newFilter = contentFilter === 'sfw' ? 'nsfw' : 'sfw';\r\n                        setContentFilter(newFilter);\r\n                        saveContentFilterPreference(newFilter);\r\n                    }}\r\n                    className={`content-filter-button ${contentFilter}`}\r\n                    aria-label=\"Toggle content filter\"\r\n                    title={`Content filter: ${contentFilter.toUpperCase()}`}\r\n                >\r\n                    {contentFilter === 'sfw' ? 'SFW' : 'NSFW'}\r\n                </button>\r\n                \r\n                <div className=\"search-container\">\r\n                    <input\r\n                        type=\"text\"\r\n                        value={searchQuery}\r\n                        onChange={(e) => setSearchQuery(e.target.value)}\r\n                        onKeyPress={(e) => e.key === 'Enter' && handleUnifiedSearch()}\r\n                        placeholder=\"Enter tag to search or URL to scrape...\"\r\n                        className=\"search-input\"\r\n                    />\r\n                    <button\r\n                        onClick={handleUnifiedSearch}\r\n                        className=\"search-button\"\r\n                    >\r\n                        <i className={`fas ${searchQuery.trim().toLowerCase().startsWith('http') ? 'fa-download' : 'fa-search'}`}></i>\r\n                    </button>\r\n                </div>\r\n\r\n                <div className=\"right-section\">\r\n                    <button\r\n                        onClick={() => setShowProfileMenu(!showProfileMenu)}\r\n                        className={`profile-button ${isLoggedIn ? 'logged-in' : ''}`}\r\n                        aria-label=\"Profile\"\r\n                    >\r\n                        <i className={`fas ${isLoggedIn ? 'fa-user-check' : 'fa-user'}`}></i>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            \r\n            {tagFilter && fullscreenMedia === null && (\r\n                <div className=\"active-filter-indicator\">\r\n                    <span>Filtering by: {tagFilter}</span>\r\n                    <button \r\n                        className=\"clear-button\" \r\n                        onClick={() => setTagFilter(null)}\r\n                        aria-label=\"Clear filter\"\r\n                    >\r\n                        <i className=\"fas fa-times\"></i>\r\n                    </button>\r\n                </div>\r\n            )}\r\n            <div className=\"notifications-container\">\r\n                {notifications.map((notification) => (\r\n                    <div \r\n                        key={notification.id} \r\n                        className={`notification ${notification.type}`}\r\n                        style={{ top: `${20 + (Array.from(notifications).findIndex(n => n.id === notification.id) * 70)}px` }}\r\n                    >\r\n                        <p className=\"notification-message\">{notification.message}</p>\r\n                        {notification.type === 'progress' && notification.isComplete && (\r\n                            <>\r\n                                <p className=\"notification-count\">\r\n                                    {notification.count} items found\r\n                                </p>\r\n                                <div \r\n                                    className=\"notification-progress-bar\" \r\n                                    style={{ width: '100%' }}\r\n                                />\r\n                            </>\r\n                        )}\r\n                        {notification.type === 'progress' && !notification.isComplete && (\r\n                            <div className=\"notification-loading\">\r\n                                <div className=\"notification-spinner\"></div>\r\n                            </div>\r\n                        )}\r\n                        {notification.type !== 'progress' && (\r\n                            <div className=\"notification-progress\" />\r\n                        )}\r\n                    </div>\r\n                ))}\r\n            </div>\r\n            <div className=\"main-content\">\r\n                <Masonry\r\n                    breakpointCols={breakpointColumnsObj}\r\n                    className=\"masonry-grid\"\r\n                    columnClassName=\"masonry-grid_column\"\r\n                >\r\n                    {selectedMedia && selectedMedia.map((media, index) => {\r\n                        const [postLink, videoLinks = [], tags] = media || [];\r\n                        if (!media || videoLinks.length === 0 || !videoLinks[0]) return null;\r\n                        const firstVideoLink = videoLinks && videoLinks[0];\r\n                        const isVideo = firstVideoLink && (firstVideoLink.endsWith('.mp4') || firstVideoLink.endsWith('.mov') || firstVideoLink.endsWith('.webm'));\r\n                        const isRule34Video = postLink && postLink.includes('rule34video');\r\n                        const embedUrl = firstVideoLink ? firstVideoLink.replace('/view/', '/embed/') : '';\r\n                        const isLoaded = loadedMedia[index];\r\n\r\n                        return (\r\n                            <div\r\n                                key={index}\r\n                                ref={index >= selectedMedia.length - breakpointColumnsObj.default ? lastMediaElementRef : null}\r\n                                className={`media-wrapper masonry-item ${fullscreenMedia === index ? 'fullscreen' : ''}`}\r\n                                onClick={() => handleMediaClick(index)}\r\n                            >\r\n                                {fullscreenMedia === index && <TagsPanel tags={tags} />}\r\n                                \r\n                                <div className={`media-container ${isLoaded ? 'media-loaded' : 'media-loading'}`}>\r\n                                    {isRule34Video ? (\r\n                                        <iframe\r\n                                            className=\"media-container\"\r\n                                            src={embedUrl}\r\n                                            frameBorder=\"0\"\r\n                                            allowFullScreen\r\n                                            loop\r\n                                            title=\"Embedded Video\"\r\n                                            onLoad={() => handleMediaLoad(index)}\r\n                                        ></iframe>\r\n                                    ) : isVideo ? (\r\n                                        <video\r\n                                            ref={el => mediaRefs.current[index] = el}\r\n                                            src={firstVideoLink}\r\n                                            controls\r\n                                            muted={fullscreenMedia !== index}\r\n                                            volume={globalVolume}\r\n                                            loop\r\n                                            onLoadedData={() => {\r\n                                                handleMediaLoad(index);\r\n                                                // Apply global volume on load\r\n                                                if (mediaRefs.current[index]) {\r\n                                                    mediaRefs.current[index].volume = globalVolume;\r\n                                                }\r\n                                            }}\r\n                                            onError={(e) => handleVideoError(e, firstVideoLink)}\r\n                                            onLoadStart={() => {\r\n                                                setCookies();\r\n                                            }}\r\n                                        />\r\n                                    ) : (\r\n                                        <img\r\n                                            ref={el => mediaRefs.current[index] = el}\r\n                                            src={firstVideoLink}\r\n                                            alt=\"Media\"\r\n                                            onLoad={() => handleMediaLoad(index)}\r\n                                            onError={(e) => handleImageError(e, firstVideoLink, index)}\r\n                                        />\r\n                                    )}\r\n                                    {fullscreenMedia === index && videoLinks && Array.isArray(videoLinks) && videoLinks.slice(1).map((link, i) => (\r\n                                        <div key={i} className=\"fullscreen-media-container\">\r\n                                            <img className='fullscreen-media'\r\n                                                ref={el => mediaRefs.current[`${index}_${i}`] = el}\r\n                                                src={link}\r\n                                                alt=\"Media\"\r\n                                                onError={(e) => handleImageError(e, link, index)}\r\n                                                onLoad={() => {\r\n                                                    setCookies();\r\n                                                }}\r\n                                            />\r\n                                        </div>\r\n                                    ))}\r\n                                </div>\r\n                                <div className=\"icon-container\">\r\n                                    <button\r\n                                        className=\"close-icon\"\r\n                                        onClick={(e) => {\r\n                                            e.stopPropagation();\r\n                                            handleMediaClose();\r\n                                        }}\r\n                                        aria-label=\"Close media\"\r\n                                    >\r\n                                        <i className=\"fas fa-times\"></i>\r\n                                    </button>\r\n                                    <button\r\n                                        className=\"postlink-icon\"\r\n                                        onClick={(e) => {\r\n                                            e.stopPropagation();\r\n                                            handleIconClick(postLink);\r\n                                        }}\r\n                                        aria-label=\"Open post link\"\r\n                                    >\r\n                                        <i className=\"fas fa-link\"></i>\r\n                                    </button>\r\n                                    {(!postLink.includes('kusowanka') && !postLink.includes('donmai')  && !postLink.includes('e621')) && (\r\n                                        <button\r\n                                            className=\"similar-icon\"\r\n                                            onClick={(e) => {\r\n                                                e.stopPropagation();\r\n                                                handleSimilar(postLink);\r\n                                            }}\r\n                                            aria-label=\"Find similar media\"\r\n                                        >\r\n                                            <i className=\"fas fa-clone\"></i>\r\n                                        </button>\r\n                                    )}\r\n                                </div>\r\n                                <button\r\n                                    className=\"remove-icon\"\r\n                                    onClick={(e) => {\r\n                                        e.stopPropagation();\r\n                                        handleRemove(postLink);\r\n                                    }}\r\n                                    aria-label=\"Remove media\"\r\n                                >\r\n                                        <i className=\"fas fa-trash\"></i>\r\n                                </button>\r\n                            </div>\r\n                        );\r\n                    })}\r\n                    {loading && (\r\n                        <div className=\"loading-placeholder\"></div>\r\n                    )}\r\n                </Masonry>\r\n                <div id=\"bottom-of-page\"></div>\r\n                <div className=\"overlay-buttons\">\r\n                    <button\r\n                        onClick={handleSettingsOpen}\r\n                        className=\"settings-button\"\r\n                        aria-label=\"Settings\"\r\n                    >\r\n                        <i className=\"fas fa-cog\"></i>\r\n                        </button>\r\n                    <button\r\n                        onClick={() => {\r\n                            const newAutoScroll = !autoScroll;\r\n                            setAutoScroll(newAutoScroll);\r\n                            saveAutoScrollPreference(newAutoScroll);\r\n                        }}\r\n                        className={`auto-scroll-button ${autoScroll ? 'active' : ''}`}\r\n                        aria-label=\"Toggle auto scroll\"\r\n                    >\r\n                        <i className=\"fas fa-arrow-down\"></i>\r\n                    </button>\r\n                    {showProfileMenu && (\r\n                        <div className=\"profile-menu\">\r\n                            <div className=\"profile-menu-header\">\r\n                                <h3>Profile Menu</h3>\r\n                                <button onClick={() => setShowProfileMenu(false)}>\r\n                                    <i className=\"fas fa-times\"></i>\r\n                                </button>\r\n                            </div>\r\n                            <div className=\"profile-menu-content\">\r\n                                {isLoggedIn ? (\r\n                                    <>\r\n                                        <button className=\"profile-menu-button\" onClick={handleExport}>\r\n                                            <i className=\"fas fa-download\"></i>\r\n                                            Export Collection\r\n                                        </button>\r\n                                        <label className=\"profile-menu-button\">\r\n                                            <i className=\"fas fa-upload\"></i>\r\n                                            Import Collection\r\n                                            <input\r\n                                                type=\"file\"\r\n                                                accept=\".json\"\r\n                                                onChange={handleImport}\r\n                                                style={{ display: 'none' }}\r\n                                            />\r\n                                        </label>\r\n                                        <label className=\"profile-menu-button\">\r\n                                            <i className=\"fas fa-list\"></i>\r\n                                            Import Scrape List\r\n                                            <input\r\n                                                type=\"file\"\r\n                                                accept=\".json\"\r\n                                                onChange={handleImportScrapeList}\r\n                                                style={{ display: 'none' }}\r\n                                            />\r\n                                        </label>\r\n                                        <div className=\"profile-menu-divider\"></div>\r\n                                        <button className=\"profile-menu-button danger\" onClick={handleClearCollection}>\r\n                                            <i className=\"fas fa-ban\"></i>\r\n                                            Clear Collection\r\n                                        </button>\r\n                                        <button className=\"profile-menu-button danger\" onClick={handleLogout}>\r\n                                            <i className=\"fas fa-sign-out-alt\"></i>\r\n                                            Logout\r\n                                        </button>\r\n                                    </>\r\n                                ) : (\r\n                                    <>\r\n                                        <button className=\"profile-menu-button\" onClick={() => {\r\n                                            setShowLogin(true);\r\n                                            setShowProfileMenu(false);\r\n                                        }}>\r\n                                            <i className=\"fas fa-sign-in-alt\"></i>\r\n                                            Login\r\n                                        </button>\r\n                                        <button className=\"profile-menu-button\" onClick={() => {\r\n                                            setShowLogin(true);\r\n                                            setIsRegistering(true);\r\n                                            setShowProfileMenu(false);\r\n                                        }}>\r\n                                            <i className=\"fas fa-user-plus\"></i>\r\n                                            Register\r\n                                        </button>\r\n                                        <div className=\"profile-menu-divider\"></div>\r\n                                        <button className=\"profile-menu-button\" onClick={() => {\r\n                                            // For non-logged in users, directly export from localStorage\r\n                                            try {\r\n                                                const localData = getFromLocalStorage();\r\n                                                if (localData && localData.length > 0) {\r\n                                                    const dataStr = JSON.stringify(localData, null, 2);\r\n                                                    const dataBlob = new Blob([dataStr], { type: 'application/json' });\r\n                                                    const url = URL.createObjectURL(dataBlob);\r\n                                                    const a = document.createElement('a');\r\n                                                    a.href = url;\r\n                                                    a.download = 'kupo-nuts-local-collection.json';\r\n                                                    document.body.appendChild(a);\r\n                                                    a.click();\r\n                                                    document.body.removeChild(a);\r\n                                                    URL.revokeObjectURL(url);\r\n                                                    showNotification('Local collection exported successfully', 'success');\r\n                                                } else {\r\n                                                    showNotification('No local collection to export', 'info');\r\n                                                }\r\n                                            } catch (error) {\r\n                                                showNotification('Failed to export local collection', 'error');\r\n                                            }\r\n                                        }}>\r\n                                            <i className=\"fas fa-download\"></i>\r\n                                            Export Local Collection\r\n                                        </button>\r\n                                        <label className=\"profile-menu-button\">\r\n                                            <i className=\"fas fa-upload\"></i>\r\n                                            Import Collection\r\n                                            <input\r\n                                                type=\"file\"\r\n                                                accept=\".json\"\r\n                                                onChange={(event) => {\r\n                                                    try {\r\n                                                        const file = event.target.files[0];\r\n                                                        if (!file) return;\r\n                                                        \r\n                                                        const reader = new FileReader();\r\n                                                        reader.onload = (e) => {\r\n                                                            try {\r\n                                                                const json = JSON.parse(e.target.result);\r\n                                                                if (Array.isArray(json)) {\r\n                                                                    saveToLocalStorage(json);\r\n                                                                    setMediaUrls(json.map(item => [item.postLink || '', item.videoLinks]));\r\n                                                                    showNotification('Local collection imported successfully', 'success');\r\n                                                                } else {\r\n                                                                    showNotification('Invalid file format', 'error');\r\n                                                                }\r\n                                                            } catch (error) {\r\n                                                                showNotification('Failed to parse import file', 'error');\r\n                                                            }\r\n                                                        };\r\n                                                        reader.readAsText(file);\r\n                                                    } catch (error) {\r\n                                                        showNotification('Failed to read import file', 'error');\r\n                                                    }\r\n                                                    event.target.value = '';\r\n                                                }}\r\n                                                style={{ display: 'none' }}\r\n                                            />\r\n                                        </label>\r\n                                        <button className=\"profile-menu-button danger\" onClick={handleClearCollection}>\r\n                                            <i className=\"fas fa-ban\"></i>\r\n                                            Clear Local Collection\r\n                                        </button>\r\n                                    </>\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n                {showSettings && (\r\n                    <div className=\"settings-dialog\">\r\n                        <div className=\"settings-content\">\r\n                            <div className=\"settings-header\">\r\n                                <h2>Gallery Settings</h2>\r\n                                <button onClick={() => setShowSettings(false)}>\r\n                                    <i className=\"fas fa-times\"></i>\r\n                                </button>\r\n                            </div>\r\n                            <div className=\"settings-body\">\r\n                                {/* Content filter moved to top bar, removed from here */}\r\n                                \r\n                                {isLoggedIn && (\r\n                                    <div className=\"settings-item\">\r\n                                        <label>Include Demo Content:</label>\r\n                                        <div className=\"default-links-toggle settings-toggle\">\r\n                                            <button \r\n                                                className={`content-filter-option ${showDefaultLinks ? 'active' : ''}`}\r\n                                                onClick={() => {\r\n                                                    const newValue = true;\r\n                                                    setShowDefaultLinks(newValue);\r\n                                                    saveShowDefaultLinksPreference(newValue);\r\n                                                    setCurrentPage(1);\r\n                                                    setMediaUrls([]);\r\n                                                    fetchMedia(1, initialMediaPerPage);\r\n                                                }}\r\n                                            >\r\n                                                Show\r\n                                            </button>\r\n                                            <button \r\n                                                className={`content-filter-option ${!showDefaultLinks ? 'active' : ''}`}\r\n                                                onClick={() => {\r\n                                                    const newValue = false;\r\n                                                    setShowDefaultLinks(newValue);\r\n                                                    saveShowDefaultLinksPreference(newValue);\r\n                                                    setCurrentPage(1);\r\n                                                    setMediaUrls([]);\r\n                                                    fetchMedia(1, initialMediaPerPage);\r\n                                                }}\r\n                                            >\r\n                                                Hide\r\n                                            </button>\r\n                                        </div>\r\n                                    </div>\r\n                                )}\r\n                                \r\n                                <div className=\"settings-item\">\r\n                                    <label htmlFor=\"filter\">Sort by:</label>\r\n                                    <select \r\n                                        id=\"filter\" \r\n                                        value={filter} \r\n                                        onChange={(e) => {\r\n                                            handleFilterChange(e.target.value);\r\n                                        }}\r\n                                    >\r\n                                        <option value=\"Default\">Default</option>\r\n                                        <option value=\"Newest\">Newest</option>\r\n                                        <option value=\"Random\">Random</option>\r\n                                        <option value=\"Oldest\">Oldest</option>\r\n                                    </select>\r\n                                </div>\r\n                                \r\n                                <div className=\"settings-item\">\r\n                                    <label htmlFor=\"scroll-speed\">Auto-Scroll Speed: {scrollSpeed}px/tick</label>\r\n                                    <input\r\n                                        id=\"scroll-speed\"\r\n                                        type=\"range\"\r\n                                        min=\"1\"\r\n                                        max=\"10\"\r\n                                        value={scrollSpeed}\r\n                                        onChange={(e) => {\r\n                                            const newSpeed = parseInt(e.target.value, 10);\r\n                                            setScrollSpeed(newSpeed);\r\n                                            saveScrollSpeedPreference(newSpeed);\r\n                                            updateSliderFill(newSpeed);\r\n                                        }}\r\n                                        className=\"scroll-speed-slider\"\r\n                                    />\r\n                                    <div className=\"speed-range-labels\">\r\n                                        <span>Slow</span>\r\n                                        <span>Fast</span>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div className=\"settings-item\">\r\n                                    <label htmlFor=\"volume-control\">Volume: {Math.round(globalVolume * 100)}%</label>\r\n                                    <input\r\n                                        id=\"volume-control\"\r\n                                        type=\"range\"\r\n                                        min=\"0\"\r\n                                        max=\"1\"\r\n                                        step=\"0.01\"\r\n                                        value={globalVolume}\r\n                                        onChange={(e) => {\r\n                                            const newVolume = parseFloat(e.target.value);\r\n                                            setGlobalVolume(newVolume);\r\n                                            saveVolumePreference(newVolume);\r\n                                            updateVolumeSliderFill(newVolume);\r\n                                        }}\r\n                                        className=\"volume-slider\"\r\n                                    />\r\n                                </div>\r\n\r\n                                <div className=\"settings-item\">\r\n                                    <label htmlFor=\"tag-blacklist\">Tag Blacklist (comma-separated):</label>\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        id=\"tag-blacklist\"\r\n                                        value={tagBlacklist}\r\n                                        onChange={handleTagBlacklistChange}\r\n                                        placeholder=\"Enter tags to blacklist\"\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n                {showLogin && (\r\n                    <div className=\"login-dialog\">\r\n                        <div className=\"login-content\">\r\n                            <div className=\"login-header\">\r\n                                <h2>{isRegistering ? 'Create Account' : 'Login'}</h2>\r\n                                <button onClick={() => setShowLogin(false)}>\r\n                                    <i className=\"fas fa-times\"></i>\r\n                                </button>\r\n                            </div>\r\n                            {loginError && <div className=\"login-error\">{loginError}</div>}\r\n                            <form className=\"login-form\" onSubmit={isRegistering ? handleRegister : handleLogin}>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    placeholder=\"Username\"\r\n                                    value={username}\r\n                                    onChange={(e) => setUsername(e.target.value)}\r\n                                    required\r\n                                />\r\n                                <input\r\n                                    type=\"password\"\r\n                                    placeholder=\"Password\"\r\n                                    value={password}\r\n                                    onChange={(e) => {\r\n                                        setPassword(e.target.value);\r\n                                        if (isRegistering) {\r\n                                            checkPasswordRequirements(e.target.value);\r\n                                        }\r\n                                    }}\r\n                                    required\r\n                                />\r\n                                {isRegistering && (\r\n                                    <div className=\"password-requirements\">\r\n                                        <p className={passwordRequirements.length ? 'met' : ''}>\r\n                                            ✓ At least 12 characters\r\n                                        </p>\r\n                                        <p className={passwordRequirements.uppercase ? 'met' : ''}>\r\n                                            ✓ One uppercase letter\r\n                                        </p>\r\n                                        <p className={passwordRequirements.lowercase ? 'met' : ''}>\r\n                                            ✓ One lowercase letter\r\n                                        </p>\r\n                                        <p className={passwordRequirements.number ? 'met' : ''}>\r\n                                            ✓ One number\r\n                                        </p>\r\n                                        <p className={passwordRequirements.special ? 'met' : ''}>\r\n                                            ✓ One special character (@$!%*?&)\r\n                                        </p>\r\n                                    </div>\r\n                                )}\r\n                                <button type=\"submit\">\r\n                                    {isRegistering ? 'Create Account' : 'Login'}\r\n                                </button>\r\n                            </form>\r\n                            <div className=\"login-options\">\r\n                                <button onClick={() => {\r\n                                    setIsRegistering(!isRegistering);\r\n                                    setLoginError('');\r\n                                }}>\r\n                                    {isRegistering \r\n                                        ? 'Already have an account? Login' \r\n                                        : 'Need an account? Register'}\r\n                                </button>\r\n                            </div>\r\n                            {isLoggedIn && (\r\n                                <div className=\"profile-actions\">\r\n                                    <button onClick={handleExport} className=\"export-button\">\r\n                                        <i className=\"fas fa-download\"></i> Export Links\r\n                                    </button>\r\n                                    <label className=\"import-button\">\r\n                                        <i className=\"fas fa-upload\"></i> Import Links\r\n                                        <input\r\n                                            type=\"file\"\r\n                                            accept=\".json\"\r\n                                            onChange={handleImport}\r\n                                            style={{ display: 'none' }}\r\n                                        />\r\n                                    </label>\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                )}\r\n                {showConfirmClear && (\r\n                    <div className=\"login-dialog\">\r\n                        <div className=\"login-content\">\r\n                            <div className=\"login-header\">\r\n                                <h2>Confirm Clear</h2>\r\n                                <button onClick={cancelClearCollection}>\r\n                                    <i className=\"fas fa-times\"></i>\r\n                                </button>\r\n                            </div>\r\n                            <p>Are you sure you want to clear your collection? This action cannot be undone.</p>\r\n                            <div className=\"login-options\">\r\n                                <button onClick={confirmClearCollection} className=\"profile-menu-button danger\">\r\n                                    Yes, Clear Collection\r\n                                </button>\r\n                                <button onClick={cancelClearCollection}>\r\n                                    Cancel\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default React.memo(VideoList);\r\n"],"names":["isDevelopment","window","location","hostname","config","API_URL","console","log","LOCAL_STORAGE_KEY","saveToLocalStorage","mediaLinks","localStorage","setItem","JSON","stringify","error","getFromLocalStorage","data","getItem","parse","VideoList","mediaUrls","setMediaUrls","useState","currentPage","setCurrentPage","scrapeUrl","setScrapeUrl","fullscreenMedia","setFullscreenMedia","loading","setLoading","isLoggedIn","setIsLoggedIn","autoScroll","setAutoScroll","filter","setFilter","showSettings","setShowSettings","notifications","setNotifications","showLogin","setShowLogin","isRegistering","setIsRegistering","username","setUsername","password","setPassword","loginError","setLoginError","passwordRequirements","setPasswordRequirements","length","uppercase","lowercase","number","special","showProfileMenu","setShowProfileMenu","isClickable","setIsClickable","loadedMedia","setLoadedMedia","randomSeed","setRandomSeed","Date","now","tagFilter","setTagFilter","contentFilter","setContentFilter","globalVolume","setGlobalVolume","socket","setSocket","searchQuery","setSearchQuery","guestId","useRef","Math","random","toString","substr","showDefaultLinks","setShowDefaultLinks","prevScrollY","mediaRefs","mediaSet","Set","observer","scrapeNotificationId","similarNotificationId","tagSearchNotificationId","showConfirmClear","setShowConfirmClear","tagBlacklist","setTagBlacklist","scrollSpeed","setScrollSpeed","tagSearchQuery","setTagSearchQuery","defaultMediaLinks","shuffleArray","useCallback","array","newArray","reverse","rand","seedrandom","i","j","floor","fetchConfig","credentials","filterMediaByTag","searchTerm","lowercaseSearchTerm","toLowerCase","item","tags","Array","isArray","some","tag","includes","Object","values","categoryTags","applyTagBlacklist","media","blacklist","split","map","trim","allTags","forEach","push","blacklistedTag","fetchMedia","async","page","limit","response","fetch","cache","ok","status","json","postLink","videoLinks","defaultLinks","localStorageLinks","totalAvailableItems","startIndex","sortedMediaLinks","endIndex","min","pageMediaUrls","slice","current","clear","uniqueMediaUrls","has","add","prevMediaUrls","isUserContent","isDefault","userItems","_item$","defaultItems","_item$2","setCookies","cookies","cookie","document","name","value","domain","path","showNotification","message","type","arguments","undefined","id","newNotification","prev","setTimeout","notification","removeNotification","handleTagSearch","notificationId","progress","isComplete","existingNotificationIndex","findIndex","n","updatedNotifications","contentFilterValue","headers","method","body","query","contentType","Error","showProgressNotification","scrollToMedia","index","mediaElement","scrollIntoView","behavior","block","handleMediaClose","tagName","pause","mediaContainer","getElementById","classList","remove","querySelectorAll","button","style","zIndex","querySelector","display","handleClickOutside","event","_mediaRefs$current$fu","contains","target","closest","handleKeyPress","e","key","nextIndex","nextMedia","play","catch","prevIndex","prevMedia","lastMediaElementRef","node","disconnect","IntersectionObserver","entries","entry","isIntersecting","prevPage","threshold","rootMargin","observe","useEffect","addEventListener","overflow","removeEventListener","currentMedia","videoDuration","duration","timeoutId","clearTimeout","intervalId","setInterval","scrollBy","top","clearInterval","script","createElement","src","appendChild","removeChild","seed","selectedMedia","useMemo","handleScroll","currentScrollY","scrollY","scrollTimeout","onScroll","breakpointColumnsObj","default","handleImageError","link","every","mediaLink","from","el","getFilterFromCookie","match","getScrollSpeedFromCookie","parseInt","saveShowDefaultLinksPreference","show","getShowDefaultLinksFromCookie","getContentFilterFromCookie","getAutoScrollFromCookie","handleFilterChange","newFilter","filterValue","savedScrollSpeed","updateSliderFill","savedVolume","getVolumeFromCookie","parseFloat","updateVolumeSliderFill","ref","volume","savedShowDefaultLinks","savedContentFilter","handleExport","mediaResponse","statusText","scrapeResponse","mediaData","scrapeData","links","urls","zip","JSZip","file","content","generateAsync","url","URL","createObjectURL","a","href","download","click","revokeObjectURL","handleImport","files","reader","FileReader","onload","result","_ref","validContent","readAsText","handleMediaLoad","TagsPanel","_ref2","_jsx","className","children","categorizedTags","general","_jsxs","label","category","idx","onClick","handleTagClick","stopPropagation","newSocket","setupSocket","io","withCredentials","transports","reconnection","reconnectionAttempts","reconnectionDelay","reconnectionDelayMax","timeout","on","userData","savedFilter","emit","checkLoginStatus","isGuest","handleProgressEvent","notificationIdRef","prevNotifications","_data$newItems","currentNotification","find","totalLinksAdded","linksAdded","newLinksCount","newItems","updatedLinksAdded","count","typeLabel","word","charAt","toUpperCase","join","linkCountMessage","currentId","formattedItems","mediaItem","currentLinks","addToLocalStorage","slider","percentage","backgroundSize","handleClearCollection","cancelClearCollection","handleUnifiedSearch","startsWith","alert","fetchTweetsFromList","replace","scrapeSavedLinks","addScrapeUrlToFile","urlToScrape","handleScrape","reload","cursor","saveContentFilterPreference","title","onChange","onKeyPress","placeholder","_Fragment","width","Masonry","breakpointCols","columnClassName","firstVideoLink","isVideo","endsWith","isRule34Video","embedUrl","isLoaded","handleMediaClick","frameBorder","allowFullScreen","loop","onLoad","controls","muted","onLoadedData","onError","code","keys","Number","handleVideoError","onLoadStart","alt","open","errorData","handleSimilar","handleRemove","handleSettingsOpen","newAutoScroll","saveAutoScrollPreference","accept","total","shuffledLinks","localData","dataStr","dataBlob","Blob","newValue","htmlFor","max","newSpeed","speed","round","step","newVolume","onSubmit","preventDefault","required","test","checkPasswordRequirements","confirmClearCollection","then","removeItem","React"],"sourceRoot":""}