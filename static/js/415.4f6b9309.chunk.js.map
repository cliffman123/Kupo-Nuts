{"version":3,"file":"static/js/415.4f6b9309.chunk.js","mappings":"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","sources":["config.js","components/VideoList.js"],"sourcesContent":["// Dynamic configuration based on environment\r\n\r\n// Detect if we're running in development mode\r\nconst isDevelopment = process.env.NODE_ENV === 'development' || \r\n                      window.location.hostname === 'localhost' || \r\n                      window.location.hostname === '127.0.0.1';\r\n\r\n// Set API URL based on environment\r\nconst config = {\r\n  API_URL: process.env.NODE_ENV === 'production' \r\n    ? 'https://kupo-nuts.onrender.com'\r\n    : 'http://localhost:5000'\r\n};\r\n\r\nconsole.log('Running in', isDevelopment ? 'DEVELOPMENT' : 'PRODUCTION', 'mode');\r\nconsole.log('Using API URL:', config.API_URL);\r\n\r\nexport default config;\r\n","import React, { useState, useEffect, useRef, useCallback, useMemo } from 'react';\r\nimport Masonry from 'react-masonry-css';\r\nimport './VideoList.css';\r\nimport JSZip from 'jszip';\r\nimport defaultLinks from './default-links.json';\r\nimport config from '../config'; // Import the config file\r\n\r\nconst API_URL = config.API_URL;\r\n\r\nconst VideoList = () => {\r\n    const [mediaUrls, setMediaUrls] = useState([]);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [scrapeUrl, setScrapeUrl] = useState('');\r\n    const [fullscreenMedia, setFullscreenMedia] = useState(null);\r\n    const [loading, setLoading] = useState(false);\r\n    const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n    const [autoScroll, setAutoScroll] = useState(!isLoggedIn);\r\n    const [filter, setFilter] = useState('random'); // Default to random for non-logged in users\r\n    const [showSettings, setShowSettings] = useState(false);\r\n    const [notifications, setNotifications] = useState([]);\r\n    const [showLogin, setShowLogin] = useState(false);\r\n    const [isRegistering, setIsRegistering] = useState(false);\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [loginError, setLoginError] = useState('');\r\n    const [passwordRequirements, setPasswordRequirements] = useState({\r\n        length: false,\r\n        uppercase: false,\r\n        lowercase: false,\r\n        number: false,\r\n        special: false\r\n    });\r\n    const [showProfileMenu, setShowProfileMenu] = useState(false);\r\n    const [isClickable, setIsClickable] = useState(true);\r\n    const [loadedMedia, setLoadedMedia] = useState({});\r\n    const [randomSeed, setRandomSeed] = useState(Date.now());\r\n    const mediaRefs = useRef([]);\r\n    const mediaSet = useRef(new Set());\r\n    const observer = useRef();\r\n\r\n    const initialMediaPerPage = 8;\r\n    const mediaPerPage = 16;\r\n\r\n    const shuffleArray = useCallback((array) => {\r\n        const newArray = [...array];\r\n        newArray.reverse();\r\n        const rand = seedrandom(randomSeed.toString());\r\n        for (let i = newArray.length - 1; i > 0; i--) {\r\n            const j = Math.floor(rand() * (i + 1));\r\n            [newArray[i], newArray[j]] = [newArray[j], newArray[i]];\r\n        }\r\n        newArray.reverse();\r\n        return newArray;\r\n    }, [randomSeed]);\r\n\r\n    const fetchConfig = {\r\n        credentials: 'include',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n        }\r\n    };\r\n\r\n    const fetchMedia = useCallback(async (page, limit) => {\r\n        setLoading(true);\r\n        try {\r\n            let mediaLinks;\r\n            if (isLoggedIn) {\r\n                const response = await fetch(`${API_URL}/api/media`, {\r\n                    ...fetchConfig,\r\n                    cache: 'no-cache'\r\n                });\r\n                \r\n                if (!response.ok) {\r\n                    if (response.status === 401) {\r\n                        setIsLoggedIn(false);\r\n                        setShowLogin(true);\r\n                        throw new Error('Please login to view media');\r\n                    }\r\n                    throw new Error('Network response was not ok');\r\n                }\r\n                \r\n                const data = await response.json();\r\n                mediaLinks = data.map(item => [item.postLink || '', item.videoLinks]);\r\n            } else {\r\n                // Only load default links if not logged in and they exist\r\n                if (!defaultLinks || defaultLinks.length === 0) {\r\n                    mediaLinks = [];\r\n                    return; // Exit early if no default links\r\n                }\r\n                mediaLinks = defaultLinks.map(item => [item.postLink || '', item.videoLinks]);\r\n            }\r\n\r\n            const totalAvailableItems = mediaLinks.length;\r\n            const startIndex = (page - 1) * limit;\r\n            \r\n            // Check if we've reached the end, but don't refresh\r\n            if (startIndex >= totalAvailableItems) {\r\n                // We've reached the end, simply return without loading more\r\n                return;\r\n            }\r\n\r\n            let sortedMediaLinks;\r\n            const shuffledLinks = shuffleArray([...mediaLinks]);\r\n            const reversedLinks = [...mediaLinks].reverse();\r\n\r\n            switch (filter.toLowerCase()) {\r\n                case 'newest':\r\n                    sortedMediaLinks = reversedLinks;\r\n                    break;\r\n                case 'random':\r\n                    sortedMediaLinks = shuffleArray([...mediaLinks]); // Create completely random array\r\n                    break;\r\n                default:\r\n                    sortedMediaLinks = page % 2 === 0 ? reversedLinks : shuffledLinks;\r\n                    break;\r\n            }\r\n\r\n            const endIndex = Math.min(startIndex + limit, totalAvailableItems);\r\n            const newMediaUrls = sortedMediaLinks.slice(startIndex, endIndex);\r\n\r\n            if (page === 1) {\r\n                mediaSet.current.clear(); // Clear mediaSet before setting new media URLs\r\n            }\r\n\r\n            const uniqueMediaUrls = newMediaUrls.filter(media => !mediaSet.current.has(media[1][0]));\r\n            uniqueMediaUrls.forEach(media => mediaSet.current.add(media[1][0]));\r\n\r\n            if (page === 1) {\r\n                setMediaUrls(uniqueMediaUrls);\r\n            } else {\r\n                setMediaUrls(prevMediaUrls => [...prevMediaUrls, ...uniqueMediaUrls]);\r\n            }\r\n        } catch (error) {\r\n            console.error('Failed to load media:', error);\r\n            showNotification(error.message, 'error');\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, [filter, isLoggedIn, shuffleArray]);\r\n\r\n    const setCookies = () => {\r\n        const cookies = JSON.parse(localStorage.getItem('cookies'));\r\n        if (cookies) {\r\n            cookies.forEach(cookie => {\r\n                document.cookie = `${cookie.name}=${cookie.value}; domain=${cookie.domain}; path=${cookie.path}`;\r\n            });\r\n        }\r\n    };\r\n\r\n    const fetchTweetsFromList = async (username) => {\r\n        try {\r\n            const response = await fetch(`${API_URL}/api/tweets`, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ username }),\r\n                ...fetchConfig\r\n            });\r\n            if (!response.ok) throw new Error('Network response was not ok');\r\n        } catch (error) {\r\n            alert('Failed to fetch tweets. Please try again later.');\r\n        }\r\n    };\r\n\r\n    const showNotification = (message, type = 'info') => {\r\n        const id = Date.now(); // Create unique ID for each notification\r\n        const newNotification = { id, message, type };\r\n        \r\n        setNotifications(prev => [...prev, newNotification]);\r\n        \r\n        // Remove this specific notification after 3 seconds\r\n        setTimeout(() => {\r\n            setNotifications(prev => prev.filter(notification => notification.id !== id));\r\n        }, 3000);\r\n    };\r\n\r\n    const showProgressNotification = (id, message, count = 0, isComplete = false) => {\r\n        console.log('Showing progress notification:', { id, message, count, isComplete });\r\n        \r\n        setNotifications(prev => {\r\n            const existing = prev.find(n => n.id === id);\r\n            const updatedNotifications = existing \r\n                ? prev.map(n => n.id === id ? { ...n, message, count, isComplete } : n)\r\n                : [...prev, { id, message, type: 'progress', count, isComplete }];\r\n            \r\n            return updatedNotifications;\r\n        });\r\n    };\r\n\r\n    const removeNotification = (id) => {\r\n        setNotifications(prev => prev.filter(n => n.id !== id));\r\n    };\r\n\r\n    // New helper function to fetch only the latest added media\r\n    const fetchLatestMedia = async (count = 10) => {\r\n        try {\r\n            const response = await fetch(`${API_URL}/api/media/latest?count=${count}`, {\r\n                ...fetchConfig,\r\n                cache: 'no-cache'\r\n            });\r\n            \r\n            if (!response.ok) {\r\n                throw new Error('Failed to fetch latest media');\r\n            }\r\n            \r\n            const data = await response.json();\r\n            return data.map(item => [item.postLink || '', item.videoLinks]);\r\n        } catch (error) {\r\n            console.error('Error fetching latest media:', error);\r\n            return [];\r\n        }\r\n    };\r\n\r\n    // Updated handleScrape function\r\n    const handleScrape = async () => {\r\n        const notificationId = Date.now();\r\n        try {\r\n            // Show initial \"in progress\" notification without count\r\n            showProgressNotification(notificationId, 'Scraping in progress...', 0, false);\r\n            console.log('Scraping URL:', scrapeUrl);\r\n            \r\n            const response = await fetch(`${API_URL}/api/scrape`, {\r\n                method: 'POST',\r\n                headers: { \r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Bearer ${document.cookie.split('token=')[1]}`\r\n                },\r\n                ...fetchConfig,\r\n                body: JSON.stringify({ url: scrapeUrl }),\r\n            });\r\n            \r\n            if (!response.ok) {\r\n                if (response.status === 401) {\r\n                    setIsLoggedIn(false);\r\n                    setShowLogin(true);\r\n                    throw new Error('Please login to scrape media');\r\n                }\r\n                throw new Error('Network response was not ok');\r\n            }\r\n\r\n            const result = await response.json();\r\n            \r\n            // Update notification with final count when complete and mark as complete\r\n            showProgressNotification(notificationId, 'Scraping completed successfully!', result.linksAdded || 0, true);\r\n            \r\n            // Handle media updates based on current sort\r\n            if (filter.toLowerCase() === 'newest') {\r\n                // Refresh the entire media list for \"newest\" sort\r\n                setCurrentPage(1);\r\n                setMediaUrls([]);\r\n                await fetchMedia(1, initialMediaPerPage);\r\n            } else if (result.linksAdded > 0) {\r\n                // For other sorts, append new media to the end of the current list\r\n                const latestMedia = await fetchLatestMedia(result.linksAdded);\r\n                \r\n                // Add only unique media that isn't already in our list\r\n                const existingUrls = new Set(mediaUrls.map(media => media[0]));\r\n                const uniqueNewMedia = latestMedia.filter(media => !existingUrls.has(media[0]));\r\n                \r\n                if (uniqueNewMedia.length > 0) {\r\n                    setMediaUrls(prevMediaUrls => [...prevMediaUrls, ...uniqueNewMedia]);\r\n                }\r\n            }\r\n            \r\n            // Auto-remove notification after a few seconds\r\n            setTimeout(() => removeNotification(notificationId), 5000);\r\n        } catch (error) {\r\n            console.error('Failed to scrape:', error);\r\n            showNotification(error.message || 'Failed to scrape. Please try again.', 'error');\r\n            removeNotification(notificationId);\r\n        }\r\n    };\r\n\r\n    const handleRemove = async (postLink) => {\r\n        try {\r\n            const response = await fetch(`${API_URL}/api/remove`, {\r\n                method: 'POST',\r\n                headers: { \r\n                    'Content-Type': 'application/json',\r\n                },\r\n                ...fetchConfig,\r\n                body: JSON.stringify({ postLink }),\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error('Failed to remove media');\r\n            }\r\n\r\n            // Update the local state to remove the entire post\r\n            setMediaUrls(prevMediaUrls => \r\n                prevMediaUrls.filter(media => media[0] !== postLink)\r\n            );\r\n\r\n            showNotification('Media removed successfully', 'success');\r\n        } catch (error) {\r\n            console.error('Failed to remove media:', error);\r\n            showNotification('Failed to remove media', 'error');\r\n        }\r\n    };\r\n\r\n    const addScrapeUrlToFile = async (url) => {\r\n        try {\r\n            console.log('Adding scrape URL to file:', url); // Add logging\r\n            const response = await fetch(`${API_URL}/api/save-scrape-url`, {\r\n                method: 'POST',\r\n                headers: { \r\n                    'Content-Type': 'application/json',\r\n                    // Add credentials header if needed\r\n                    'Authorization': `Bearer ${document.cookie.split('token=')[1]}`\r\n                },\r\n                ...fetchConfig,\r\n                body: JSON.stringify({ url }),\r\n            });\r\n            if (!response.ok) {\r\n                if (response.status === 401) {\r\n                    setIsLoggedIn(false);\r\n                    setShowLogin(true);\r\n                    throw new Error('Please login to save scrape URL');\r\n                }\r\n                throw new Error('Network response was not ok');\r\n            }\r\n        } catch (error) {\r\n            console.error('Failed to add scrape URL to file:', error);\r\n            showNotification(error.message || 'Failed to save scrape URL', 'error');\r\n        }\r\n    };\r\n\r\n    const scrapeSavedLinks = async () => {\r\n        try {\r\n            const response = await fetch(`${API_URL}/api/scrape-saved-links`, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                ...fetchConfig\r\n            });\r\n            if (!response.ok) throw new Error('Network response was not ok');\r\n        } catch (error) {\r\n            alert('Failed to scrape media. Please try again later.');\r\n            showNotification('Failed to scrape media. Please try again later.', 'error');\r\n        }\r\n    };\r\n\r\n    // Updated handleSimilar function\r\n    const handleSimilar = async (postLink) => {\r\n        const notificationId = Date.now();\r\n        try {\r\n            // Show initial notification without count\r\n            showProgressNotification(notificationId, 'Searching for similar posts...', 0, false);\r\n            console.log('Finding similar posts for:', postLink);\r\n            \r\n            const response = await fetch(`${API_URL}/api/similar`, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                ...fetchConfig,\r\n                body: JSON.stringify({ url: postLink }),\r\n            });\r\n\r\n            if (!response.ok) {\r\n                const errorData = await response.json().catch(() => ({}));\r\n                throw new Error(errorData.message || 'Failed to find similar posts');\r\n            }\r\n\r\n            const result = await response.json();\r\n            \r\n            if (result.count === 0) {\r\n                showProgressNotification(notificationId, 'No similar posts found', 0, true);\r\n            } else {\r\n                showProgressNotification(notificationId, 'Similar posts found!', result.count, true);\r\n                \r\n                // Handle media updates based on current sort\r\n                if (filter.toLowerCase() === 'newest') {\r\n                    // Refresh the entire media list for \"newest\" sort\r\n                    setCurrentPage(1);\r\n                    setMediaUrls([]);\r\n                    await fetchMedia(1, initialMediaPerPage);\r\n                } else if (result.count > 0) {\r\n                    // For other sorts, append new media to the end of the current list\r\n                    const latestMedia = await fetchLatestMedia(result.count);\r\n                    \r\n                    // Add only unique media that isn't already in our list\r\n                    const existingUrls = new Set(mediaUrls.map(media => media[0]));\r\n                    const uniqueNewMedia = latestMedia.filter(media => !existingUrls.has(media[0]));\r\n                    \r\n                    if (uniqueNewMedia.length > 0) {\r\n                        setMediaUrls(prevMediaUrls => [...prevMediaUrls, ...uniqueNewMedia]);\r\n                    }\r\n                }\r\n            }\r\n            \r\n            setTimeout(() => removeNotification(notificationId), 3000);\r\n        } catch (error) {\r\n            console.error('Failed to find similar:', error);\r\n            showNotification(error.message || 'Failed to find similar posts', 'error');\r\n            removeNotification(notificationId);\r\n        }\r\n    };\r\n\r\n    const scrollToMedia = useCallback((index) => {\r\n        const mediaElement = mediaRefs.current[index];\r\n        if (mediaElement) {\r\n            mediaElement.scrollIntoView({ behavior: 'smooth', block: 'center' });\r\n        }\r\n    }, []);\r\n\r\n    const handleMediaClick = (index) => {\r\n        if (!isClickable) return; // Prevent clicking if in cooldown\r\n        setFullscreenMedia(index);\r\n        mediaRefs.current.forEach((media, i) => {\r\n            if (media && i !== index && media.tagName === 'VIDEO') media.pause();\r\n        });\r\n        const mediaContainer = document.getElementById('media-container');\r\n        if (mediaContainer) {\r\n            mediaContainer.classList.add('fullscreen-active');\r\n        }\r\n        document.querySelectorAll('.postlink-icon, .close-icon, .remove-icon, .similar-icon').forEach(button => {\r\n            button.style.zIndex = '1002';\r\n        });\r\n        document.querySelector('.profile-button').style.display = 'none';\r\n        scrollToMedia(index);\r\n    };\r\n\r\n    const handleMediaClose = () => {\r\n        setFullscreenMedia(null);\r\n        setIsClickable(false); // Disable clicking\r\n        mediaRefs.current.forEach(media => {\r\n            if (media && media.tagName === 'VIDEO') media.pause();\r\n        });\r\n        const mediaContainer = document.getElementById('media-container');\r\n        if (mediaContainer) {\r\n            mediaContainer.classList.remove('fullscreen-active');\r\n        }\r\n        document.querySelectorAll('.postlink-icon, .close-icon, .remove-icon').forEach(button => {\r\n            button.style.zIndex = '';\r\n        });\r\n        document.querySelector('.profile-button').style.display = '';\r\n        \r\n        // Enable clicking after 500ms (0.5 seconds)\r\n        setTimeout(() => {\r\n            setIsClickable(true);\r\n        }, 100);\r\n    };\r\n\r\n    const handleClickOutside = (event) => {\r\n        if (fullscreenMedia !== null && !mediaRefs.current[fullscreenMedia]?.contains(event.target) && !event.target.closest('.postlink-icon, .close-icon, .remove-icon, .scrape-button, .auto-scroll-button, .similar-icon')) {\r\n            handleMediaClose();\r\n        }\r\n    };\r\n\r\n    const handleKeyPress = useCallback((e) => {\r\n        if (fullscreenMedia === null) return;\r\n\r\n        if (e.key === 'ArrowDown') {\r\n            const nextIndex = (fullscreenMedia + 1) % mediaUrls.length;\r\n            setFullscreenMedia(nextIndex);\r\n            const nextMedia = mediaRefs.current[nextIndex];\r\n            if (nextMedia && nextMedia.tagName === 'VIDEO') {\r\n                nextMedia.play().catch(() => {});\r\n            }\r\n            scrollToMedia(nextIndex);\r\n        } else if (e.key === 'ArrowUp') {\r\n            const prevIndex = (fullscreenMedia - 1 + mediaUrls.length) % mediaUrls.length;\r\n            setFullscreenMedia(prevIndex);\r\n            const prevMedia = mediaRefs.current[prevIndex];\r\n            if (prevMedia && prevMedia.tagName === 'VIDEO') {\r\n                prevMedia.play().catch(() => {});\r\n            }\r\n            scrollToMedia(prevIndex);\r\n        }\r\n    }, [fullscreenMedia, mediaUrls.length, scrollToMedia]);\r\n\r\n    const lastMediaElementRef = useCallback(node => {\r\n        if (!node) return;\r\n        \r\n        if (observer.current) observer.current.disconnect();\r\n        observer.current = new IntersectionObserver(entries => {\r\n            if (entries.some(entry => entry.isIntersecting)) {\r\n                setCurrentPage(prevPage => prevPage + 1);\r\n            }\r\n        }, { \r\n            threshold: 0.1,\r\n            rootMargin: '100px'\r\n        });\r\n                           \r\n        const lastColumnItems = document.querySelectorAll('.masonry-grid_column > div:last-child');\r\n        lastColumnItems.forEach(item => {\r\n            observer.current.observe(item);\r\n        });\r\n        \r\n        // Also observe the provided node\r\n        observer.current.observe(node);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        setCurrentPage(1);\r\n        setMediaUrls([]);\r\n        fetchMedia(1, initialMediaPerPage);\r\n    }, [filter, fetchMedia]);\r\n\r\n    useEffect(() => {\r\n        fetchMedia(currentPage, mediaPerPage);\r\n    }, [currentPage, fetchMedia]);\r\n\r\n    useEffect(() => {\r\n        document.addEventListener('mousedown', handleClickOutside);\r\n        document.addEventListener('keydown', handleKeyPress);\r\n        document.body.style.overflow = fullscreenMedia !== null ? 'hidden' : 'auto';\r\n        return () => {\r\n            document.removeEventListener('mousedown', handleClickOutside);\r\n            document.removeEventListener('keydown', handleKeyPress);\r\n            document.body.style.overflow = 'auto';\r\n        };\r\n    }, [fullscreenMedia, handleKeyPress]);\r\n\r\n    useEffect(() => {\r\n        if (autoScroll && fullscreenMedia !== null) {\r\n            const currentMedia = mediaRefs.current[fullscreenMedia];\r\n            const videoDuration = currentMedia.tagName === 'VIDEO' ? currentMedia.duration * 1000 : 10000;\r\n            const timeoutId = setTimeout(() => {\r\n                const nextIndex = (fullscreenMedia + 1) % mediaUrls.length;\r\n                setFullscreenMedia(nextIndex);\r\n                const nextMedia = mediaRefs.current[nextIndex];\r\n                if (nextMedia && nextMedia.tagName === 'VIDEO') {\r\n                    nextMedia.play().catch(() => {});\r\n                }\r\n            }, videoDuration <= 1 ? videoDuration * 5 : videoDuration);\r\n            return () => clearTimeout(timeoutId);\r\n        }\r\n    }, [fullscreenMedia, mediaUrls, autoScroll]);\r\n\r\n    useEffect(() => {\r\n        if (autoScroll && fullscreenMedia === null) {\r\n            const intervalId = setInterval(() => {\r\n                window.scrollBy({ top: 3, behavior: 'smooth' });\r\n            }, 1);\r\n            return () => clearInterval(intervalId);\r\n        }\r\n    }, [autoScroll, fullscreenMedia]);\r\n\r\n    useEffect(() => {\r\n        setRandomSeed(Date.now());\r\n    }, [filter]);\r\n\r\n    useEffect(() => {\r\n        const script = document.createElement('script');\r\n        script.src = 'https://cdnjs.cloudflare.com/ajax/libs/seedrandom/3.0.5/seedrandom.min.js';\r\n        script.async = true;\r\n        document.body.appendChild(script);\r\n\r\n        return () => {\r\n            document.body.removeChild(script);\r\n        };\r\n    }, []);\r\n\r\n    const seedrandom = (seed) => {\r\n        if (window.Math.seedrandom) {\r\n            return new window.Math.seedrandom(seed);\r\n        }\r\n        return () => Math.random();\r\n    };\r\n\r\n    const selectedMedia = useMemo(() => {\r\n        const startIndex = (currentPage - 1) * mediaPerPage;\r\n        return mediaUrls.slice(0, startIndex + (2 * mediaPerPage));\r\n    }, [currentPage, mediaUrls, mediaPerPage]);\r\n\r\n    const handleIconClick = (url) => window.open(url, '_blank');\r\n\r\n    const handleScrapeInputKeyPress = (event) => {\r\n        if (event.key === 'Enter') {\r\n            if (scrapeUrl.includes('@')) {\r\n                const listId = scrapeUrl.replace('@', '');\r\n                fetchTweetsFromList(listId);\r\n            } else if (scrapeUrl.includes('❤️')) {\r\n                scrapeSavedLinks();\r\n            } else {\r\n                addScrapeUrlToFile(scrapeUrl);\r\n                handleScrape();\r\n            }\r\n            setScrapeUrl('');\r\n        }\r\n    };\r\n\r\n    const breakpointColumnsObj = useMemo(() => ({\r\n        default: 4,\r\n        1100: 3,\r\n        700: 2,\r\n        500: 1\r\n    }), []);\r\n\r\n    const handleImageError = (e, link, index) => {\r\n        console.error('Image failed to load:', e);\r\n        e.target.style.display = 'none'; // Hide the broken image\r\n        \r\n        // If in fullscreen and all media in this item failed to display, move to next\r\n        if (fullscreenMedia === index) {\r\n            const mediaItem = mediaUrls[index];\r\n            const allMediaFailed = mediaItem[1].every(mediaLink => {\r\n                const mediaElement = Array.from(document.querySelectorAll(`img[src=\"${mediaLink}\"], video[src=\"${mediaLink}\"]`));\r\n                return mediaElement.every(el => el.style.display === 'none');\r\n            });\r\n            \r\n            if (allMediaFailed) {\r\n                const nextIndex = (index + 1) % mediaUrls.length;\r\n                setFullscreenMedia(nextIndex);\r\n                const nextMedia = mediaRefs.current[nextIndex];\r\n                if (nextMedia && nextMedia.tagName === 'VIDEO') {\r\n                    nextMedia.play().catch(() => {});\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleVideoError = async (e) => {\r\n        console.error('Video failed to load:', e);\r\n        if (e.target.error.code === 4) { // 404 error\r\n            e.target.style.display = 'none'; // Hide the broken video\r\n            \r\n            // Get the index from the video element's reference in mediaRefs\r\n            const index = Object.keys(mediaRefs.current).find(key => \r\n                mediaRefs.current[key] === e.target\r\n            );\r\n            \r\n            if (fullscreenMedia === Number(index)) {\r\n                const nextIndex = (Number(index) + 1) % mediaUrls.length;\r\n                setFullscreenMedia(nextIndex);\r\n                const nextMedia = mediaRefs.current[nextIndex];\r\n                if (nextMedia && nextMedia.tagName === 'VIDEO') {\r\n                    nextMedia.play().catch(() => {});\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    const checkPasswordRequirements = (password) => {\r\n        setPasswordRequirements({\r\n            length: password.length >= 12,\r\n            uppercase: /[A-Z]/.test(password),\r\n            lowercase: /[a-z]/.test(password),\r\n            number: /\\d/.test(password),\r\n            special: /[@$!%*?&]/.test(password)\r\n        });\r\n    };\r\n\r\n    const handleLogin = async (e) => {\r\n        e.preventDefault();\r\n        setLoginError('');\r\n        \r\n        try {\r\n            const response = await fetch(`${API_URL}/api/login`, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                ...fetchConfig,\r\n                body: JSON.stringify({ username, password }),\r\n            });\r\n\r\n            const data = await response.json();\r\n\r\n            if (!response.ok) {\r\n                throw new Error(data.message || 'Login failed');\r\n            }\r\n\r\n            setIsLoggedIn(true);\r\n            setShowLogin(false);\r\n            showNotification('Login successful', 'success');\r\n            setUsername('');\r\n            setPassword('');\r\n            \r\n            // Load saved filter preference after login\r\n            const savedFilter = getFilterFromCookie();\r\n            setFilter(savedFilter);\r\n            \r\n            // Reset page and fetch media after successful login\r\n            setCurrentPage(1);\r\n            setMediaUrls([]);\r\n            await fetchMedia(1, initialMediaPerPage);\r\n            \r\n        } catch (error) {\r\n            setLoginError(error.message);\r\n            showNotification(error.message, 'error');\r\n        }\r\n    };\r\n\r\n    const handleRegister = async (e) => {\r\n        e.preventDefault();\r\n        setLoginError('');\r\n\r\n        try {\r\n            const response = await fetch(`${API_URL}/api/register`, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ username, password }),\r\n            });\r\n\r\n            const data = await response.json();\r\n\r\n            if (!response.ok) {\r\n                throw new Error(data.message || 'Registration failed');\r\n            }\r\n\r\n            showNotification('Registration successful! Please log in.', 'success');\r\n            setIsRegistering(false);\r\n            setUsername('');\r\n            setPassword('');\r\n        } catch (error) {\r\n            setLoginError(error.message);\r\n            showNotification(error.message, 'error');\r\n        }\r\n    };\r\n\r\n    const handleLogout = async () => {\r\n        try {\r\n            await fetch(`${API_URL}/api/logout`, {\r\n                method: 'POST',\r\n                ...fetchConfig,\r\n            });\r\n            \r\n            // Update state first\r\n            setIsLoggedIn(false);\r\n            setFilter('random'); // Set filter to random when logging out\r\n            showNotification('Logged out successfully', 'success');\r\n            \r\n            // Close profile menu\r\n            setShowProfileMenu(false);\r\n            \r\n            // Instead of fetching from API, just set to default links for non-logged in users\r\n            if (defaultLinks && defaultLinks.length > 0) {\r\n                const links = defaultLinks.map(item => [item.postLink || '', item.videoLinks]);\r\n                const shuffledLinks = shuffleArray([...links]);\r\n                setMediaUrls(shuffledLinks.slice(0, initialMediaPerPage));\r\n            } else {\r\n                setMediaUrls([]);\r\n            }\r\n            \r\n            // Reset page\r\n            setCurrentPage(1);\r\n            \r\n        } catch (error) {\r\n            showNotification('Logout failed', 'error');\r\n        }\r\n    };\r\n\r\n    // Add this function to handle saving filter preference\r\n    const saveFilterPreference = (filterValue) => {\r\n        document.cookie = `preferred_filter=${filterValue}; max-age=31536000; path=/`; // Expires in 1 year\r\n    };\r\n\r\n    // Add this function to get filter from cookie\r\n    const getFilterFromCookie = () => {\r\n        const match = document.cookie.match(/preferred_filter=([^;]+)/);\r\n        return match ? match[1] : 'default';\r\n    };\r\n\r\n    // Add this new effect to check login status on component mount\r\n    useEffect(() => {\r\n        const checkLoginStatus = async () => {\r\n            try {\r\n                const response = await fetch(`${API_URL}/api/profile`, {\r\n                    ...fetchConfig\r\n                });\r\n                \r\n                if (response.ok) {\r\n                    setIsLoggedIn(true);\r\n                    setAutoScroll(false); // Disable autoScroll when user logs in\r\n                    // Load saved filter preference\r\n                    const savedFilter = getFilterFromCookie();\r\n                    setFilter(savedFilter);\r\n                    setCurrentPage(1);\r\n                    setMediaUrls([]);\r\n                    await fetchMedia(1, initialMediaPerPage);\r\n                } else {\r\n                    setIsLoggedIn(false);\r\n                    setFilter('random'); // Explicitly set filter to random for non-logged in users\r\n                    setShowLogin(true);\r\n                }\r\n            } catch (error) {\r\n                console.error('Error checking login status:', error);\r\n                setIsLoggedIn(false);\r\n                setFilter('random'); // Set filter to random here too in case of error\r\n                setShowLogin(true);\r\n            }\r\n        };\r\n\r\n        checkLoginStatus();\r\n    }, []);\r\n\r\n    const handleExport = async () => {\r\n        try {\r\n            const mediaResponse = await fetch(`${API_URL}/api/export-links`, {\r\n                ...fetchConfig,\r\n                headers: {\r\n                    ...fetchConfig.headers,\r\n                    'Accept': 'application/json'\r\n                }\r\n            });\r\n            \r\n            if (!mediaResponse.ok) {\r\n                throw new Error(`Failed to export media links: ${mediaResponse.statusText}`);\r\n            }\r\n            \r\n            const scrapeResponse = await fetch(`${API_URL}/api/export-scrape-list`, {\r\n                ...fetchConfig,\r\n                headers: {\r\n                    ...fetchConfig.headers,\r\n                    'Accept': 'application/json'\r\n                }\r\n            });\r\n            \r\n            if (!scrapeResponse.ok) {\r\n                throw new Error(`Failed to export scrape links: ${scrapeResponse.statusText}`);\r\n            }\r\n\r\n            // Parse responses with error handling\r\n            let mediaData;\r\n            let scrapeData;\r\n            \r\n            try {\r\n                mediaData = await mediaResponse.json();\r\n                // Accept either array or object with links property\r\n                if (!Array.isArray(mediaData) && !mediaData.links) {\r\n                    mediaData = []; // Default to empty array if no valid data\r\n                }\r\n                // Convert to array if it's in object format\r\n                mediaData = Array.isArray(mediaData) ? mediaData : mediaData.links || [];\r\n            } catch (error) {\r\n                console.error('Media parse error:', error);\r\n                mediaData = []; // Default to empty array on parse error\r\n            }\r\n\r\n            try {\r\n                scrapeData = await scrapeResponse.json();\r\n                // Accept either array or object format\r\n                if (typeof scrapeData === 'string') {\r\n                    scrapeData = [scrapeData]; // Convert single string to array\r\n                } else if (!Array.isArray(scrapeData) && typeof scrapeData === 'object') {\r\n                    scrapeData = scrapeData.urls || Object.values(scrapeData) || []; // Try to extract URLs\r\n                } else if (!Array.isArray(scrapeData)) {\r\n                    scrapeData = []; // Default to empty array if no valid data\r\n                }\r\n            } catch (error) {\r\n                console.error('Scrape parse error:', error);\r\n                scrapeData = []; // Default to empty array on parse error\r\n            }\r\n            \r\n            // Create zip file with error handling\r\n            try {\r\n                const zip = new JSZip();\r\n                zip.file(\"media-links.json\", JSON.stringify(mediaData, null, 2));\r\n                zip.file(\"scrape-links.json\", JSON.stringify(scrapeData, null, 2));\r\n                \r\n                const content = await zip.generateAsync({ type: \"blob\" });\r\n                \r\n                // Create download link\r\n                const url = window.URL.createObjectURL(content);\r\n                const a = document.createElement('a');\r\n                a.href = url;\r\n                a.download = 'KupoNutEX.zip';\r\n                document.body.appendChild(a);\r\n                a.click();\r\n                window.URL.revokeObjectURL(url);\r\n                document.body.removeChild(a);\r\n                \r\n                showNotification('Collection exported successfully', 'success');\r\n            } catch (error) {\r\n                throw new Error('Failed to create zip file: ' + error.message);\r\n            }\r\n        } catch (error) {\r\n            console.error('Export error:', error);\r\n            showNotification(error.message || 'Failed to export collection', 'error');\r\n        }\r\n    };\r\n\r\n    const handleImport = async (event) => {\r\n        try {\r\n            const file = event.target.files[0];\r\n            if (!file) return;\r\n\r\n            const reader = new FileReader();\r\n            reader.onload = async (e) => {\r\n                try {\r\n                    let content = JSON.parse(e.target.result);\r\n                    \r\n                    // Convert old format if necessary\r\n                    if (!Array.isArray(content)) {\r\n                        content = Object.entries(content).map(([postLink, videoLinks]) => ({\r\n                            postLink,\r\n                            videoLinks: Array.isArray(videoLinks) ? videoLinks : [videoLinks]\r\n                        }));\r\n                    }\r\n\r\n                    // Validate content structure\r\n                    const validContent = content.filter(item => {\r\n                        return item && \r\n                               typeof item === 'object' && \r\n                               typeof item.postLink === 'string' && \r\n                               (Array.isArray(item.videoLinks) || typeof item.videoLinks === 'string');\r\n                    });\r\n\r\n                    if (validContent.length === 0) {\r\n                        throw new Error('No valid media links found in file');\r\n                    }\r\n\r\n                    const response = await fetch(`${API_URL}/api/import-links`, {\r\n                        method: 'POST',\r\n                        headers: { 'Content-Type': 'application/json' },\r\n                        ...fetchConfig,\r\n                        body: JSON.stringify(validContent)\r\n                    });\r\n\r\n                    if (!response.ok) throw new Error('Failed to import links');\r\n                    \r\n                    showNotification(`Successfully imported ${validContent.length} links`, 'success');\r\n                    // Refresh media after import\r\n                    setCurrentPage(1);\r\n                    setMediaUrls([]);\r\n                    await fetchMedia(1, initialMediaPerPage);\r\n                } catch (error) {\r\n                    console.error('Import error:', error);\r\n                    showNotification(error.message || 'Invalid file format', 'error');\r\n                }\r\n            };\r\n            reader.readAsText(file);\r\n        } catch (error) {\r\n            console.error('File reading error:', error);\r\n            showNotification('Failed to read import file', 'error');\r\n        }\r\n        // Reset file input\r\n        event.target.value = '';\r\n    };\r\n\r\n    const handleImportScrapeList = async (event) => {\r\n        try {\r\n            const file = event.target.files[0];\r\n            if (!file) return;\r\n\r\n            const reader = new FileReader();\r\n            reader.onload = async (e) => {\r\n                try {\r\n                    const content = JSON.parse(e.target.result);\r\n                    \r\n                    const response = await fetch(`${API_URL}/api/import-scrape-list`, {\r\n                        method: 'POST',\r\n                        headers: { 'Content-Type': 'application/json' },\r\n                        ...fetchConfig,\r\n                        body: JSON.stringify(content)\r\n                    });\r\n\r\n                    if (!response.ok) {\r\n                        const error = await response.json();\r\n                        throw new Error(error.message || 'Failed to import scrape list');\r\n                    }\r\n\r\n                    const result = await response.json();\r\n                    showNotification(`Successfully imported ${result.total} URLs and started scraping`, 'success');\r\n                    \r\n                    // Refresh media after import and scrape\r\n                    setCurrentPage(1);\r\n                    setMediaUrls([]);\r\n                    await fetchMedia(1, initialMediaPerPage);\r\n                } catch (error) {\r\n                    console.error('Import error:', error);\r\n                    showNotification(error.message || 'Invalid file format', 'error');\r\n                }\r\n            };\r\n            reader.readAsText(file);\r\n        } catch (error) {\r\n            console.error('File reading error:', error);\r\n            showNotification('Failed to read import file', 'error');\r\n        }\r\n        // Reset file input\r\n        event.target.value = '';\r\n    };\r\n\r\n    // Add function to mark media as loaded\r\n    const handleMediaLoad = (index) => {\r\n        setLoadedMedia(prev => ({\r\n            ...prev,\r\n            [index]: true\r\n        }));\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"notifications-container\">\r\n                {notifications.map((notification, index) => (\r\n                    <div \r\n                        key={notification.id} \r\n                        className={`notification ${notification.type}`}\r\n                        style={{ top: `${20 + (index * 70)}px` }}\r\n                    >\r\n                        <p className=\"notification-message\">{notification.message}</p>\r\n                        {notification.type === 'progress' && notification.isComplete && (\r\n                            <>\r\n                                <p className=\"notification-count\">\r\n                                    {notification.count} items found\r\n                                </p>\r\n                                <div \r\n                                    className=\"notification-progress-bar\" \r\n                                    style={{ width: '100%' }}\r\n                                />\r\n                            </>\r\n                        )}\r\n                        {notification.type === 'progress' && !notification.isComplete && (\r\n                            <div className=\"notification-loading\">\r\n                                <div className=\"notification-spinner\"></div>\r\n                            </div>\r\n                        )}\r\n                        {notification.type !== 'progress' && (\r\n                            <div className=\"notification-progress\" />\r\n                        )}\r\n                    </div>\r\n                ))}\r\n            </div>\r\n            <div className=\"main-content\">\r\n                <Masonry\r\n                    breakpointCols={breakpointColumnsObj}\r\n                    className=\"masonry-grid\"\r\n                    columnClassName=\"masonry-grid_column\"\r\n                >\r\n                    {selectedMedia.map((media, index) => {\r\n                        if (!media || !media[1] || media[1].length === 0 || !media[1][0]) return null;\r\n                        const [postLink, videoLinks] = media;\r\n                        const firstVideoLink = videoLinks[0];\r\n                        const isVideo = firstVideoLink && (firstVideoLink.endsWith('.mp4') || firstVideoLink.endsWith('.mov') || firstVideoLink.endsWith('.webm'));\r\n                        const isRule34Video = postLink.includes('rule34video');\r\n                        const embedUrl = firstVideoLink ? firstVideoLink.replace('/view/', '/embed/') : '';\r\n                        const isLoaded = loadedMedia[index];\r\n\r\n                        return (\r\n                            <div\r\n                                key={index}\r\n                                ref={index >= selectedMedia.length - breakpointColumnsObj.default ? lastMediaElementRef : null}\r\n                                className={`media-wrapper masonry-item ${fullscreenMedia === index ? 'fullscreen' : ''}`}\r\n                                onClick={() => handleMediaClick(index)}\r\n                            >\r\n                                <div className={`media-container ${isLoaded ? 'media-loaded' : 'media-loading'}`}>\r\n                                    {isRule34Video ? (\r\n                                        <iframe\r\n                                            className=\"media-container\"\r\n                                            src={embedUrl}\r\n                                            frameBorder=\"0\"\r\n                                            allowFullScreen\r\n                                            loop\r\n                                            title=\"Embedded Video\"\r\n                                            onLoad={() => handleMediaLoad(index)}\r\n                                        ></iframe>\r\n                                    ) : isVideo ? (\r\n                                        <video\r\n                                            ref={el => mediaRefs.current[index] = el}\r\n                                            src={firstVideoLink}\r\n                                            controls\r\n                                            muted={fullscreenMedia !== index}\r\n                                            loop\r\n                                            onLoadedData={() => handleMediaLoad(index)}\r\n                                            onError={(e) => handleVideoError(e, firstVideoLink)}\r\n                                            onLoadStart={() => {\r\n                                                setCookies();\r\n                                            }}\r\n                                        />\r\n                                    ) : (\r\n                                        <img\r\n                                            ref={el => mediaRefs.current[index] = el}\r\n                                            src={firstVideoLink}\r\n                                            alt=\"Media\"\r\n                                            onLoad={() => handleMediaLoad(index)}\r\n                                            onError={(e) => handleImageError(e, firstVideoLink, index)}\r\n                                        />\r\n                                    )}\r\n                                    {fullscreenMedia === index && videoLinks.slice(1).map((link, i) => (\r\n                                        <div key={i} className=\"fullscreen-media-container\">\r\n                                            <img className='fullscreen-media'\r\n                                                ref={el => mediaRefs.current[`${index}_${i}`] = el}\r\n                                                src={link}\r\n                                                alt=\"Media\"\r\n                                                onError={(e) => handleImageError(e, link, index)}\r\n                                                onLoad={() => {\r\n                                                    setCookies();\r\n                                                }}\r\n                                            />\r\n                                        </div>\r\n                                    ))}\r\n                                </div>\r\n                                <div className=\"icon-container\">\r\n                                    <button\r\n                                        className=\"close-icon\"\r\n                                        onClick={(e) => {\r\n                                            e.stopPropagation();\r\n                                            handleMediaClose();\r\n                                        }}\r\n                                        aria-label=\"Close media\"\r\n                                    >\r\n                                        <i className=\"fas fa-times\"></i>\r\n                                    </button>\r\n                                    <button\r\n                                        className=\"postlink-icon\"\r\n                                        onClick={(e) => {\r\n                                            e.stopPropagation();\r\n                                            handleIconClick(postLink);\r\n                                        }}\r\n                                        aria-label=\"Open post link\"\r\n                                    >\r\n                                        <i className=\"fas fa-link\"></i>\r\n                                    </button>\r\n                                    {!postLink.includes('kusowanka') && (\r\n                                        <button\r\n                                            className=\"similar-icon\"\r\n                                            onClick={(e) => {\r\n                                                e.stopPropagation();\r\n                                                handleSimilar(postLink);\r\n                                            }}\r\n                                            aria-label=\"Find similar media\"\r\n                                        >\r\n                                            <i className=\"fas fa-clone\"></i>\r\n                                        </button>\r\n                                    )}\r\n                                </div>\r\n                                {isLoggedIn && (\r\n                                    <button\r\n                                        className=\"remove-icon\"\r\n                                        onClick={(e) => {\r\n                                            e.stopPropagation();\r\n                                            handleRemove(postLink); // Now we just pass postLink, not the specific videoLink\r\n                                        }}\r\n                                        aria-label=\"Remove media\"\r\n                                    >\r\n                                        <i className=\"fas fa-trash\"></i>\r\n                                    </button>\r\n                                )}\r\n                            </div>\r\n                        );\r\n                    })}\r\n                    {loading && (\r\n                        <div className=\"loading-placeholder\"></div>\r\n                    )}\r\n                </Masonry>\r\n                <div id=\"bottom-of-page\"></div>\r\n                {!showLogin && (\r\n                    <div className=\"overlay-buttons\">\r\n                        {isLoggedIn && (\r\n                            <button\r\n                                onClick={() => setShowSettings(!showSettings)}\r\n                                className=\"settings-button\"\r\n                                aria-label=\"Settings\"\r\n                            >\r\n                                <i className=\"fas fa-cog\"></i>\r\n                            </button>\r\n                        )}\r\n                        <button\r\n                            onClick={() => setAutoScroll(!autoScroll)}\r\n                            className={`auto-scroll-button ${autoScroll ? 'active' : ''}`}\r\n                            aria-label=\"Toggle auto scroll\"\r\n                        >\r\n                            <i className=\"fas fa-arrow-down\"></i>\r\n                        </button>\r\n                        <button\r\n                            onClick={() => isLoggedIn ? setShowProfileMenu(!showProfileMenu) : setShowLogin(true)}\r\n                            className={`profile-button ${isLoggedIn ? 'logged-in' : ''}`}\r\n                            aria-label=\"Profile\"\r\n                        >\r\n                            <i className={`fas ${isLoggedIn ? 'fa-user-check' : 'fa-user'}`}></i>\r\n                        </button>\r\n                        {showProfileMenu && isLoggedIn && (\r\n                            <div className=\"profile-menu\">\r\n                                <div className=\"profile-menu-header\">\r\n                                    <h3>Profile Menu</h3>\r\n                                    <button onClick={() => setShowProfileMenu(false)}>\r\n                                        <i className=\"fas fa-times\"></i>\r\n                                    </button>\r\n                                </div>\r\n                                <div className=\"profile-menu-content\">\r\n                                    <button className=\"profile-menu-button\" onClick={handleExport}>\r\n                                        <i className=\"fas fa-download\"></i>\r\n                                        Export Collection\r\n                                    </button>\r\n                                    <label className=\"profile-menu-button\">\r\n                                        <i className=\"fas fa-upload\"></i>\r\n                                        Import Collection\r\n                                        <input\r\n                                            type=\"file\"\r\n                                            accept=\".json\"\r\n                                            onChange={handleImport}\r\n                                            style={{ display: 'none' }}\r\n                                        />\r\n                                    </label>\r\n                                    <label className=\"profile-menu-button\">\r\n                                        <i className=\"fas fa-list\"></i>\r\n                                        Import Scrape List\r\n                                        <input\r\n                                            type=\"file\"\r\n                                            accept=\".json\"\r\n                                            onChange={handleImportScrapeList}\r\n                                            style={{ display: 'none' }}\r\n                                        />\r\n                                    </label>\r\n                                    <div className=\"profile-menu-divider\"></div>\r\n                                    <button className=\"profile-menu-button danger\" onClick={handleLogout}>\r\n                                        <i className=\"fas fa-sign-out-alt\"></i>\r\n                                        Logout\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                )}\r\n                {showSettings && (\r\n                    <div className=\"settings-dialog\">\r\n                        <div className=\"settings-content\">\r\n                            <div className=\"settings-header\">\r\n                                <h2>Gallery Settings</h2>\r\n                                <button onClick={() => setShowSettings(false)}>\r\n                                    <i className=\"fas fa-times\"></i>\r\n                                </button>\r\n                            </div>\r\n                            <div className=\"settings-body\">\r\n                                <div className=\"settings-item\">\r\n                                    <label htmlFor=\"scrape-url\">Scrape URL</label>\r\n                                    <div className=\"scrape-input-container\">\r\n                                        <input\r\n                                            id=\"scrape-url\"\r\n                                            value={scrapeUrl}\r\n                                            onChange={(e) => setScrapeUrl(e.target.value)}\r\n                                            onKeyPress={handleScrapeInputKeyPress}\r\n                                            placeholder=\"Enter URL to scrape\"\r\n                                        />\r\n                                        <button\r\n                                            onClick={() => {\r\n                                                if (scrapeUrl.includes('@')) {\r\n                                                    const listId = scrapeUrl.replace('@', '');\r\n                                                    fetchTweetsFromList(listId);\r\n                                                } else if (scrapeUrl.includes('❤️')) {\r\n                                                    scrapeSavedLinks();\r\n                                                } else {\r\n                                                    addScrapeUrlToFile(scrapeUrl);\r\n                                                    handleScrape();\r\n                                                }\r\n                                                setScrapeUrl('');\r\n                                            }}\r\n                                            aria-label=\"Scrape URL\"\r\n                                        >\r\n                                            Scrape\r\n                                        </button>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"settings-item\">\r\n                                    <label htmlFor=\"filter\">Sort by:</label>\r\n                                    <select \r\n                                        id=\"filter\" \r\n                                        value={filter} \r\n                                        onChange={(e) => {\r\n                                            const newFilter = e.target.value;\r\n                                            setFilter(newFilter);\r\n                                            saveFilterPreference(newFilter);\r\n                                        }}\r\n                                    >\r\n                                        <option value=\"Default\">Default</option>\r\n                                        <option value=\"Newest\">Newest</option>\r\n                                        <option value=\"Random\">Random</option>\r\n                                    </select>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n                {showLogin && (\r\n                    <div className=\"login-dialog\">\r\n                        <div className=\"login-content\">\r\n                            <div className=\"login-header\">\r\n                                <h2>{isRegistering ? 'Create Account' : 'Login'}</h2>\r\n                                <button onClick={() => {\r\n                                    setShowLogin(false);\r\n                                    setIsRegistering(false);\r\n                                    setLoginError('');\r\n                                }}>\r\n                                    <i className=\"fas fa-times\"></i>\r\n                                </button>\r\n                            </div>\r\n                            {loginError && (\r\n                                <div className=\"login-error\">\r\n                                    {loginError}\r\n                                </div>\r\n                            )}\r\n                            <form className=\"login-form\" onSubmit={isRegistering ? handleRegister : handleLogin}>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    placeholder=\"Username\"\r\n                                    value={username}\r\n                                    onChange={(e) => setUsername(e.target.value)}\r\n                                    required\r\n                                />\r\n                                <input\r\n                                    type=\"password\"\r\n                                    placeholder=\"Password\"\r\n                                    value={password}\r\n                                    onChange={(e) => {\r\n                                        setPassword(e.target.value);\r\n                                        if (isRegistering) {\r\n                                            checkPasswordRequirements(e.target.value);\r\n                                        }\r\n                                    }}\r\n                                    required\r\n                                />\r\n                                {isRegistering && (\r\n                                    <div className=\"password-requirements\">\r\n                                        <p className={passwordRequirements.length ? 'met' : ''}>\r\n                                            ✓ At least 12 characters\r\n                                        </p>\r\n                                        <p className={passwordRequirements.uppercase ? 'met' : ''}>\r\n                                            ✓ One uppercase letter\r\n                                        </p>\r\n                                        <p className={passwordRequirements.lowercase ? 'met' : ''}>\r\n                                            ✓ One lowercase letter\r\n                                        </p>\r\n                                        <p className={passwordRequirements.number ? 'met' : ''}>\r\n                                            ✓ One number\r\n                                        </p>\r\n                                        <p className={passwordRequirements.special ? 'met' : ''}>\r\n                                            ✓ One special character (@$!%*?&)\r\n                                        </p>\r\n                                    </div>\r\n                                )}\r\n                                <button type=\"submit\">\r\n                                    {isRegistering ? 'Create Account' : 'Login'}\r\n                                </button>\r\n                            </form>\r\n                            <div className=\"login-options\">\r\n                                <button onClick={() => {\r\n                                    setIsRegistering(!isRegistering);\r\n                                    setLoginError('');\r\n                                }}>\r\n                                    {isRegistering \r\n                                        ? 'Already have an account? Login' \r\n                                        : 'Need an account? Register'}\r\n                                </button>\r\n                            </div>\r\n                            {isLoggedIn && (\r\n                                <div className=\"profile-actions\">\r\n                                    <button onClick={handleExport} className=\"export-button\">\r\n                                        <i className=\"fas fa-download\"></i> Export Links\r\n                                    </button>\r\n                                    <label className=\"import-button\">\r\n                                        <i className=\"fas fa-upload\"></i> Import Links\r\n                                        <input\r\n                                            type=\"file\"\r\n                                            accept=\".json\"\r\n                                            onChange={handleImport}\r\n                                            style={{ display: 'none' }}\r\n                                        />\r\n                                    </label>\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default React.memo(VideoList);\r\n"],"names":["isDevelopment","window","location","hostname","config","API_URL","console","log","VideoList","mediaUrls","setMediaUrls","useState","currentPage","setCurrentPage","scrapeUrl","setScrapeUrl","fullscreenMedia","setFullscreenMedia","loading","setLoading","isLoggedIn","setIsLoggedIn","autoScroll","setAutoScroll","filter","setFilter","showSettings","setShowSettings","notifications","setNotifications","showLogin","setShowLogin","isRegistering","setIsRegistering","username","setUsername","password","setPassword","loginError","setLoginError","passwordRequirements","setPasswordRequirements","length","uppercase","lowercase","number","special","showProfileMenu","setShowProfileMenu","isClickable","setIsClickable","loadedMedia","setLoadedMedia","randomSeed","setRandomSeed","Date","now","mediaRefs","useRef","mediaSet","Set","observer","shuffleArray","useCallback","array","newArray","reverse","rand","seedrandom","toString","i","j","Math","floor","fetchConfig","credentials","headers","fetchMedia","async","page","limit","mediaLinks","response","fetch","cache","ok","status","Error","json","map","item","postLink","videoLinks","defaultLinks","totalAvailableItems","startIndex","sortedMediaLinks","shuffledLinks","reversedLinks","toLowerCase","endIndex","min","newMediaUrls","slice","current","clear","uniqueMediaUrls","media","has","forEach","add","prevMediaUrls","error","showNotification","message","setCookies","cookies","JSON","parse","localStorage","getItem","cookie","document","name","value","domain","path","fetchTweetsFromList","method","body","stringify","alert","type","arguments","undefined","id","newNotification","prev","setTimeout","notification","showProgressNotification","count","isComplete","find","n","removeNotification","fetchLatestMedia","handleScrape","notificationId","split","url","result","linksAdded","latestMedia","existingUrls","uniqueNewMedia","addScrapeUrlToFile","scrapeSavedLinks","scrollToMedia","index","mediaElement","scrollIntoView","behavior","block","handleMediaClose","tagName","pause","mediaContainer","getElementById","classList","remove","querySelectorAll","button","style","zIndex","querySelector","display","handleClickOutside","event","_mediaRefs$current$fu","contains","target","closest","handleKeyPress","e","key","nextIndex","nextMedia","play","catch","prevIndex","prevMedia","lastMediaElementRef","node","disconnect","IntersectionObserver","entries","some","entry","isIntersecting","prevPage","threshold","rootMargin","observe","useEffect","addEventListener","overflow","removeEventListener","currentMedia","videoDuration","duration","timeoutId","clearTimeout","intervalId","setInterval","scrollBy","top","clearInterval","script","createElement","src","appendChild","removeChild","seed","random","selectedMedia","useMemo","breakpointColumnsObj","default","handleImageError","link","every","mediaLink","Array","from","el","getFilterFromCookie","match","savedFilter","checkLoginStatus","handleExport","mediaResponse","statusText","scrapeResponse","mediaData","scrapeData","isArray","links","urls","Object","values","zip","JSZip","file","content","generateAsync","URL","createObjectURL","a","href","download","click","revokeObjectURL","handleImport","files","reader","FileReader","onload","_ref","validContent","readAsText","handleMediaLoad","_jsxs","children","_jsx","className","_Fragment","width","Masonry","breakpointCols","columnClassName","firstVideoLink","isVideo","endsWith","isRule34Video","includes","embedUrl","replace","isLoaded","ref","onClick","handleMediaClick","frameBorder","allowFullScreen","loop","title","onLoad","controls","muted","onLoadedData","onError","code","keys","Number","handleVideoError","onLoadStart","alt","stopPropagation","open","errorData","handleSimilar","handleRemove","accept","onChange","total","htmlFor","onKeyPress","listId","placeholder","newFilter","filterValue","onSubmit","preventDefault","data","required","test","checkPasswordRequirements","React"],"sourceRoot":""}