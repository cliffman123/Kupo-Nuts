{"version":3,"file":"static/js/415.8e042063.chunk.js","mappings":"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","sources":["config.js","components/VideoList.js"],"sourcesContent":["// Set default ngrok URL - update this whenever you start a new ngrok session\r\nconst DEFAULT_NGROK_URL = 'https://c848-2600-4040-441b-5e00-5d21-af5b-ff0a-2c09.ngrok-free.app';\r\n\r\n// Use stored URL from localStorage or fall back to the default\r\nconst ngrokUrl = localStorage.getItem('ngrokUrl') || DEFAULT_NGROK_URL;\r\n\r\nconst config = {\r\n  // Always use ngrok URL\r\n  API_URL: ngrokUrl\r\n};\r\n\r\n// Log configuration info\r\nconsole.log('Using API URL:', config.API_URL);\r\n\r\n// Helper function to update ngrok URL when it changes\r\nexport const updateNgrokUrl = (url) => {\r\n  if (url && url.includes('ngrok')) {\r\n    localStorage.setItem('ngrokUrl', url);\r\n    console.log('Ngrok URL updated to:', url);\r\n    console.log('Please refresh the page to use the new URL.');\r\n    return true;\r\n  }\r\n  return false;\r\n};\r\n\r\n// Helper to reset to default ngrok URL\r\nexport const resetToDefaultNgrok = () => {\r\n  localStorage.setItem('ngrokUrl', DEFAULT_NGROK_URL);\r\n  console.log('Reset to default ngrok URL. Please refresh the page.');\r\n};\r\n\r\nexport default config;\r\n","import React, { useState, useEffect, useRef, useCallback, useMemo } from 'react';\r\nimport Masonry from 'react-masonry-css';\r\nimport './VideoList.css';\r\nimport JSZip from 'jszip';\r\nimport defaultLinks from './default-links.json';\r\nimport config from '../config'; // Import the config file\r\n\r\nconst API_URL = config.API_URL;\r\n\r\nconst VideoList = () => {\r\n    const [mediaUrls, setMediaUrls] = useState([]);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [scrapeUrl, setScrapeUrl] = useState('');\r\n    const [fullscreenMedia, setFullscreenMedia] = useState(null);\r\n    const [loading, setLoading] = useState(false);\r\n    const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n    const [autoScroll, setAutoScroll] = useState(!isLoggedIn);\r\n    const [filter, setFilter] = useState('default');\r\n    const [showSettings, setShowSettings] = useState(false);\r\n    const [notifications, setNotifications] = useState([]);\r\n    const [showLogin, setShowLogin] = useState(false);\r\n    const [isRegistering, setIsRegistering] = useState(false);\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [loginError, setLoginError] = useState('');\r\n    const [passwordRequirements, setPasswordRequirements] = useState({\r\n        length: false,\r\n        uppercase: false,\r\n        lowercase: false,\r\n        number: false,\r\n        special: false\r\n    });\r\n    const [showProfileMenu, setShowProfileMenu] = useState(false);\r\n    const [isClickable, setIsClickable] = useState(true);\r\n    const [loadedMedia, setLoadedMedia] = useState({});\r\n    const [isOnline, setIsOnline] = useState(navigator.onLine);\r\n    const [retryCount, setRetryCount] = useState(0);\r\n    const maxRetries = 3;\r\n    const mediaRefs = useRef([]);\r\n    const mediaSet = useRef(new Set());\r\n    const observer = useRef();\r\n\r\n    const initialMediaPerPage = 8;\r\n    const mediaPerPage = 16;\r\n\r\n    const shuffleArray = (array) => {\r\n        array.reverse();\r\n        for (let i = array.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            [array[i], array[j]] = [array[j], array[i]];\r\n        }\r\n        array.reverse();\r\n        return array;\r\n    };\r\n\r\n    const fetchConfig = {\r\n        credentials: 'include',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n        }\r\n    };\r\n\r\n    // Add network status monitoring\r\n    useEffect(() => {\r\n        const handleOnline = () => {\r\n            setIsOnline(true);\r\n            showNotification('Your internet connection has been restored', 'success');\r\n            // Retry fetching media when connection is restored\r\n            if (mediaUrls.length === 0) {\r\n                setCurrentPage(1);\r\n                fetchMedia(1, initialMediaPerPage);\r\n            }\r\n        };\r\n        \r\n        const handleOffline = () => {\r\n            setIsOnline(false);\r\n            showNotification('You are currently offline. Some features may not work properly.', 'error');\r\n        };\r\n        \r\n        window.addEventListener('online', handleOnline);\r\n        window.addEventListener('offline', handleOffline);\r\n        \r\n        return () => {\r\n            window.removeEventListener('online', handleOnline);\r\n            window.removeEventListener('offline', handleOffline);\r\n        };\r\n    }, [mediaUrls.length]);\r\n\r\n    // Enhanced fetchMedia with special handling for CORS issues\r\n    const fetchMedia = useCallback(async (page, limit) => {\r\n        if (!isOnline) {\r\n            showNotification('Unable to load media while offline', 'error');\r\n            return;\r\n        }\r\n        \r\n        setLoading(true);\r\n        try {\r\n            let mediaLinks;\r\n            if (isLoggedIn) {\r\n                // Build fetch request carefully with all required fields\r\n                const controller = new AbortController();\r\n                const timeoutId = setTimeout(() => controller.abort(), 15000); // 15 second timeout\r\n                \r\n                try {\r\n                    console.log('Fetching media from:', `${API_URL}/api/media`);\r\n                    console.log('Using fetch config:', {...fetchConfig});\r\n                    \r\n                    const response = await fetch(`${API_URL}/api/media`, {\r\n                        ...fetchConfig,\r\n                        method: 'GET',  // Explicit method\r\n                        cache: 'no-cache',\r\n                        signal: controller.signal,\r\n                        credentials: 'include',  // Explicit credentials mode\r\n                        headers: {\r\n                            ...fetchConfig.headers,\r\n                            'Accept': 'application/json',\r\n                            'Content-Type': 'application/json',\r\n                            'X-Requested-With': 'fetch'\r\n                        }\r\n                    });\r\n                    \r\n                    clearTimeout(timeoutId);\r\n                    \r\n                    console.log('Media fetch response status:', response.status);\r\n                    console.log('Media fetch response headers:', \r\n                        Object.fromEntries([...response.headers.entries()]));\r\n                    \r\n                    if (!response.ok) {\r\n                        if (response.status === 401) {\r\n                            setIsLoggedIn(false);\r\n                            setShowLogin(true);\r\n                            throw new Error('Please login to view media');\r\n                        }\r\n                        throw new Error(`Network response error: ${response.status} ${response.statusText}`);\r\n                    }\r\n                    \r\n                    const data = await response.json();\r\n                    setRetryCount(0); // Reset retry count on success\r\n                    mediaLinks = data.map(item => [item.postLink || '', item.videoLinks]);\r\n                    \r\n                    // Log success for debugging\r\n                    console.log('Successfully loaded media data, count:', data.length);\r\n                } catch (error) {\r\n                    if (error.name === 'AbortError') {\r\n                        throw new Error('Request timed out. Server may be unavailable.');\r\n                    }\r\n                    \r\n                    // Implement retry logic\r\n                    if (retryCount < maxRetries) {\r\n                        console.log(`Retry attempt ${retryCount + 1} of ${maxRetries}`);\r\n                        setRetryCount(prev => prev + 1);\r\n                        setTimeout(() => fetchMedia(page, limit), 2000); // Retry after 2 seconds\r\n                        return;\r\n                    }\r\n                    \r\n                    throw error;\r\n                }\r\n            } else {\r\n                // Only load default links if not logged in and they exist\r\n                if (!defaultLinks || defaultLinks.length === 0) {\r\n                    mediaLinks = [];\r\n                    return; // Exit early if no default links\r\n                }\r\n                mediaLinks = defaultLinks.map(item => [item.postLink || '', item.videoLinks]);\r\n            }\r\n\r\n            // Prepare arrays before switch\r\n            let sortedMediaLinks;\r\n            const shuffledLinks = shuffleArray([...mediaLinks]);\r\n            const reversedLinks = [...mediaLinks].reverse();\r\n\r\n            switch (filter.toLowerCase()) {\r\n                case 'newest':\r\n                    sortedMediaLinks = reversedLinks;\r\n                    break;\r\n                case 'random':\r\n                    sortedMediaLinks = shuffleArray([...mediaLinks]); // Create completely random array\r\n                    break;\r\n                default:\r\n                    sortedMediaLinks = page % 2 === 0 ? reversedLinks : shuffledLinks;\r\n                    break;\r\n            }\r\n\r\n            const startIndex = (page - 1) * limit;\r\n            const endIndex = startIndex + limit;\r\n            const newMediaUrls = sortedMediaLinks.slice(startIndex, endIndex);\r\n\r\n            if (page === 1) {\r\n                mediaSet.current.clear(); // Clear mediaSet before setting new media URLs\r\n            }\r\n\r\n            const uniqueMediaUrls = newMediaUrls.filter(media => !mediaSet.current.has(media[1][0]));\r\n            uniqueMediaUrls.forEach(media => mediaSet.current.add(media[1][0]));\r\n\r\n            if (page === 1) {\r\n                setMediaUrls(uniqueMediaUrls);\r\n            } else {\r\n                setMediaUrls(prevMediaUrls => [...prevMediaUrls, ...uniqueMediaUrls]);\r\n            }\r\n        } catch (error) {\r\n            console.error('Failed to load media:', error);\r\n            \r\n            // Provide more specific error messages\r\n            if (!navigator.onLine) {\r\n                showNotification('Network connection lost. Please check your internet connection.', 'error');\r\n            } else if (error.message.includes('timed out')) {\r\n                showNotification('Server response took too long. Please try again later.', 'error');\r\n            } else {\r\n                showNotification(`${error.message || 'Failed to load media'}. ${retryCount < maxRetries ? 'Retrying...' : ''}`, 'error');\r\n            }\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, [filter, isLoggedIn, isOnline, retryCount]);\r\n\r\n    const setCookies = () => {\r\n        const cookies = JSON.parse(localStorage.getItem('cookies'));\r\n        if (cookies) {\r\n            cookies.forEach(cookie => {\r\n                document.cookie = `${cookie.name}=${cookie.value}; domain=${cookie.domain}; path=${cookie.path}`;\r\n            });\r\n        }\r\n    };\r\n\r\n    const fetchTweetsFromList = async (username) => {\r\n        try {\r\n            const response = await fetch(`${API_URL}/api/tweets`, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ username }),\r\n                ...fetchConfig\r\n            });\r\n            if (!response.ok) throw new Error('Network response was not ok');\r\n        } catch (error) {\r\n            alert('Failed to fetch tweets. Please try again later.');\r\n        }\r\n    };\r\n\r\n    const showNotification = (message, type = 'info') => {\r\n        const id = Date.now(); // Create unique ID for each notification\r\n        const newNotification = { id, message, type };\r\n        \r\n        setNotifications(prev => [...prev, newNotification]);\r\n        \r\n        // Remove this specific notification after 3 seconds\r\n        setTimeout(() => {\r\n            setNotifications(prev => prev.filter(notification => notification.id !== id));\r\n        }, 3000);\r\n    };\r\n\r\n    const showProgressNotification = (id, message, count = 0, isComplete = false) => {\r\n        console.log('Showing progress notification:', { id, message, count, isComplete });\r\n        \r\n        setNotifications(prev => {\r\n            const existing = prev.find(n => n.id === id);\r\n            const updatedNotifications = existing \r\n                ? prev.map(n => n.id === id ? { ...n, message, count, isComplete } : n)\r\n                : [...prev, { id, message, type: 'progress', count, isComplete }];\r\n            \r\n            return updatedNotifications;\r\n        });\r\n    };\r\n\r\n    const removeNotification = (id) => {\r\n        setNotifications(prev => prev.filter(n => n.id !== id));\r\n    };\r\n\r\n    // New helper function to fetch only the latest added media\r\n    const fetchLatestMedia = async (count = 10) => {\r\n        try {\r\n            const response = await fetch(`${API_URL}/api/media/latest?count=${count}`, {\r\n                ...fetchConfig,\r\n                cache: 'no-cache'\r\n            });\r\n            \r\n            if (!response.ok) {\r\n                throw new Error('Failed to fetch latest media');\r\n            }\r\n            \r\n            const data = await response.json();\r\n            return data.map(item => [item.postLink || '', item.videoLinks]);\r\n        } catch (error) {\r\n            console.error('Error fetching latest media:', error);\r\n            return [];\r\n        }\r\n    };\r\n\r\n    // Updated handleScrape function\r\n    const handleScrape = async () => {\r\n        const notificationId = Date.now();\r\n        try {\r\n            // Show initial \"in progress\" notification without count\r\n            showProgressNotification(notificationId, 'Scraping in progress...', 0, false);\r\n            console.log('Scraping URL:', scrapeUrl);\r\n            \r\n            const response = await fetch(`${API_URL}/api/scrape`, {\r\n                method: 'POST',\r\n                headers: { \r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Bearer ${document.cookie.split('token=')[1]}`\r\n                },\r\n                ...fetchConfig,\r\n                body: JSON.stringify({ url: scrapeUrl }),\r\n            });\r\n            \r\n            if (!response.ok) {\r\n                if (response.status === 401) {\r\n                    setIsLoggedIn(false);\r\n                    setShowLogin(true);\r\n                    throw new Error('Please login to scrape media');\r\n                }\r\n                throw new Error('Network response was not ok');\r\n            }\r\n\r\n            const result = await response.json();\r\n            \r\n            // Update notification with final count when complete and mark as complete\r\n            showProgressNotification(notificationId, 'Scraping completed successfully!', result.linksAdded || 0, true);\r\n            \r\n            // Handle media updates based on current sort\r\n            if (filter.toLowerCase() === 'newest') {\r\n                // Refresh the entire media list for \"newest\" sort\r\n                setCurrentPage(1);\r\n                setMediaUrls([]);\r\n                await fetchMedia(1, initialMediaPerPage);\r\n            } else if (result.linksAdded > 0) {\r\n                // For other sorts, append new media to the end of the current list\r\n                const latestMedia = await fetchLatestMedia(result.linksAdded);\r\n                \r\n                // Add only unique media that isn't already in our list\r\n                const existingUrls = new Set(mediaUrls.map(media => media[0]));\r\n                const uniqueNewMedia = latestMedia.filter(media => !existingUrls.has(media[0]));\r\n                \r\n                if (uniqueNewMedia.length > 0) {\r\n                    setMediaUrls(prevMediaUrls => [...prevMediaUrls, ...uniqueNewMedia]);\r\n                }\r\n            }\r\n            \r\n            // Auto-remove notification after a few seconds\r\n            setTimeout(() => removeNotification(notificationId), 5000);\r\n        } catch (error) {\r\n            console.error('Failed to scrape:', error);\r\n            showNotification(error.message || 'Failed to scrape. Please try again.', 'error');\r\n            removeNotification(notificationId);\r\n        }\r\n    };\r\n\r\n    const handleRemove = async (postLink) => {\r\n        try {\r\n            const response = await fetch(`${API_URL}/api/remove`, {\r\n                method: 'POST',\r\n                headers: { \r\n                    'Content-Type': 'application/json',\r\n                },\r\n                ...fetchConfig,\r\n                body: JSON.stringify({ postLink }),\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error('Failed to remove media');\r\n            }\r\n\r\n            // Update the local state to remove the entire post\r\n            setMediaUrls(prevMediaUrls => \r\n                prevMediaUrls.filter(media => media[0] !== postLink)\r\n            );\r\n\r\n            showNotification('Media removed successfully', 'success');\r\n        } catch (error) {\r\n            console.error('Failed to remove media:', error);\r\n            showNotification('Failed to remove media', 'error');\r\n        }\r\n    };\r\n\r\n    const addScrapeUrlToFile = async (url) => {\r\n        try {\r\n            console.log('Adding scrape URL to file:', url); // Add logging\r\n            const response = await fetch(`${API_URL}/api/save-scrape-url`, {\r\n                method: 'POST',\r\n                headers: { \r\n                    'Content-Type': 'application/json',\r\n                    // Add credentials header if needed\r\n                    'Authorization': `Bearer ${document.cookie.split('token=')[1]}`\r\n                },\r\n                ...fetchConfig,\r\n                body: JSON.stringify({ url }),\r\n            });\r\n            if (!response.ok) {\r\n                if (response.status === 401) {\r\n                    setIsLoggedIn(false);\r\n                    setShowLogin(true);\r\n                    throw new Error('Please login to save scrape URL');\r\n                }\r\n                throw new Error('Network response was not ok');\r\n            }\r\n        } catch (error) {\r\n            console.error('Failed to add scrape URL to file:', error);\r\n            showNotification(error.message || 'Failed to save scrape URL', 'error');\r\n        }\r\n    };\r\n\r\n    const scrapeSavedLinks = async () => {\r\n        try {\r\n            const response = await fetch(`${API_URL}/api/scrape-saved-links`, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                ...fetchConfig\r\n            });\r\n            if (!response.ok) throw new Error('Network response was not ok');\r\n        } catch (error) {\r\n            alert('Failed to scrape media. Please try again later.');\r\n            showNotification('Failed to scrape media. Please try again later.', 'error');\r\n        }\r\n    };\r\n\r\n    // Updated handleSimilar function\r\n    const handleSimilar = async (postLink) => {\r\n        const notificationId = Date.now();\r\n        try {\r\n            // Show initial notification without count\r\n            showProgressNotification(notificationId, 'Searching for similar posts...', 0, false);\r\n            console.log('Finding similar posts for:', postLink);\r\n            \r\n            const response = await fetch(`${API_URL}/api/similar`, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                ...fetchConfig,\r\n                body: JSON.stringify({ url: postLink }),\r\n            });\r\n\r\n            if (!response.ok) {\r\n                const errorData = await response.json().catch(() => ({}));\r\n                throw new Error(errorData.message || 'Failed to find similar posts');\r\n            }\r\n\r\n            const result = await response.json();\r\n            \r\n            if (result.count === 0) {\r\n                showProgressNotification(notificationId, 'No similar posts found', 0, true);\r\n            } else {\r\n                showProgressNotification(notificationId, 'Similar posts found!', result.count, true);\r\n                \r\n                // Handle media updates based on current sort\r\n                if (filter.toLowerCase() === 'newest') {\r\n                    // Refresh the entire media list for \"newest\" sort\r\n                    setCurrentPage(1);\r\n                    setMediaUrls([]);\r\n                    await fetchMedia(1, initialMediaPerPage);\r\n                } else if (result.count > 0) {\r\n                    // For other sorts, append new media to the end of the current list\r\n                    const latestMedia = await fetchLatestMedia(result.count);\r\n                    \r\n                    // Add only unique media that isn't already in our list\r\n                    const existingUrls = new Set(mediaUrls.map(media => media[0]));\r\n                    const uniqueNewMedia = latestMedia.filter(media => !existingUrls.has(media[0]));\r\n                    \r\n                    if (uniqueNewMedia.length > 0) {\r\n                        setMediaUrls(prevMediaUrls => [...prevMediaUrls, ...uniqueNewMedia]);\r\n                    }\r\n                }\r\n            }\r\n            \r\n            setTimeout(() => removeNotification(notificationId), 3000);\r\n        } catch (error) {\r\n            console.error('Failed to find similar:', error);\r\n            showNotification(error.message || 'Failed to find similar posts', 'error');\r\n            removeNotification(notificationId);\r\n        }\r\n    };\r\n\r\n    const scrollToMedia = useCallback((index) => {\r\n        const mediaElement = mediaRefs.current[index];\r\n        if (mediaElement) {\r\n            mediaElement.scrollIntoView({ behavior: 'smooth', block: 'center' });\r\n        }\r\n    }, []);\r\n\r\n    const handleMediaClick = (index) => {\r\n        if (!isClickable) return; // Prevent clicking if in cooldown\r\n        setFullscreenMedia(index);\r\n        mediaRefs.current.forEach((media, i) => {\r\n            if (media && i !== index && media.tagName === 'VIDEO') media.pause();\r\n        });\r\n        const mediaContainer = document.getElementById('media-container');\r\n        if (mediaContainer) {\r\n            mediaContainer.classList.add('fullscreen-active');\r\n        }\r\n        document.querySelectorAll('.postlink-icon, .close-icon, .remove-icon, .similar-icon').forEach(button => {\r\n            button.style.zIndex = '1002';\r\n        });\r\n        document.querySelector('.profile-button').style.display = 'none';\r\n        scrollToMedia(index);\r\n    };\r\n\r\n    const handleMediaClose = () => {\r\n        setFullscreenMedia(null);\r\n        setIsClickable(false); // Disable clicking\r\n        mediaRefs.current.forEach(media => {\r\n            if (media && media.tagName === 'VIDEO') media.pause();\r\n        });\r\n        const mediaContainer = document.getElementById('media-container');\r\n        if (mediaContainer) {\r\n            mediaContainer.classList.remove('fullscreen-active');\r\n        }\r\n        document.querySelectorAll('.postlink-icon, .close-icon, .remove-icon').forEach(button => {\r\n            button.style.zIndex = '';\r\n        });\r\n        document.querySelector('.profile-button').style.display = '';\r\n        \r\n        // Enable clicking after 500ms (0.5 seconds)\r\n        setTimeout(() => {\r\n            setIsClickable(true);\r\n        }, 100);\r\n    };\r\n\r\n    const handleClickOutside = (event) => {\r\n        if (fullscreenMedia !== null && !mediaRefs.current[fullscreenMedia]?.contains(event.target) && !event.target.closest('.postlink-icon, .close-icon, .remove-icon, .scrape-button, .auto-scroll-button, .similar-icon')) {\r\n            handleMediaClose();\r\n        }\r\n    };\r\n\r\n    const handleKeyPress = useCallback((e) => {\r\n        if (fullscreenMedia === null) return;\r\n\r\n        if (e.key === 'ArrowDown') {\r\n            const nextIndex = (fullscreenMedia + 1) % mediaUrls.length;\r\n            setFullscreenMedia(nextIndex);\r\n            const nextMedia = mediaRefs.current[nextIndex];\r\n            if (nextMedia && nextMedia.tagName === 'VIDEO') {\r\n                nextMedia.play().catch(() => {});\r\n            }\r\n            scrollToMedia(nextIndex);\r\n        } else if (e.key === 'ArrowUp') {\r\n            const prevIndex = (fullscreenMedia - 1 + mediaUrls.length) % mediaUrls.length;\r\n            setFullscreenMedia(prevIndex);\r\n            const prevMedia = mediaRefs.current[prevIndex];\r\n            if (prevMedia && prevMedia.tagName === 'VIDEO') {\r\n                prevMedia.play().catch(() => {});\r\n            }\r\n            scrollToMedia(prevIndex);\r\n        }\r\n    }, [fullscreenMedia, mediaUrls.length, scrollToMedia]);\r\n\r\n    const lastMediaElementRef = useCallback(node => {\r\n        if (!node) return;\r\n        \r\n        if (observer.current) observer.current.disconnect();\r\n        observer.current = new IntersectionObserver(entries => {\r\n            if (entries.some(entry => entry.isIntersecting)) {\r\n                setCurrentPage(prevPage => prevPage + 1);\r\n            }\r\n        }, { \r\n            threshold: 0.1,\r\n            rootMargin: '100px'\r\n        });\r\n                           \r\n        const lastColumnItems = document.querySelectorAll('.masonry-grid_column > div:last-child');\r\n        lastColumnItems.forEach(item => {\r\n            observer.current.observe(item);\r\n        });\r\n        \r\n        // Also observe the provided node\r\n        observer.current.observe(node);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        setCurrentPage(1);\r\n        setMediaUrls([]);\r\n        fetchMedia(1, initialMediaPerPage);\r\n    }, [filter, fetchMedia]);\r\n\r\n    useEffect(() => {\r\n        fetchMedia(currentPage, mediaPerPage);\r\n    }, [currentPage, fetchMedia]);\r\n\r\n    useEffect(() => {\r\n        document.addEventListener('mousedown', handleClickOutside);\r\n        document.addEventListener('keydown', handleKeyPress);\r\n        document.body.style.overflow = fullscreenMedia !== null ? 'hidden' : 'auto';\r\n        return () => {\r\n            document.removeEventListener('mousedown', handleClickOutside);\r\n            document.removeEventListener('keydown', handleKeyPress);\r\n            document.body.style.overflow = 'auto';\r\n        };\r\n    }, [fullscreenMedia, handleKeyPress]);\r\n\r\n    useEffect(() => {\r\n        if (autoScroll && fullscreenMedia !== null) {\r\n            const currentMedia = mediaRefs.current[fullscreenMedia];\r\n            const videoDuration = currentMedia.tagName === 'VIDEO' ? currentMedia.duration * 1000 : 10000;\r\n            const timeoutId = setTimeout(() => {\r\n                const nextIndex = (fullscreenMedia + 1) % mediaUrls.length;\r\n                setFullscreenMedia(nextIndex);\r\n                const nextMedia = mediaRefs.current[nextIndex];\r\n                if (nextMedia && nextMedia.tagName === 'VIDEO') {\r\n                    nextMedia.play().catch(() => {});\r\n                }\r\n            }, videoDuration <= 1 ? videoDuration * 5 : videoDuration);\r\n            return () => clearTimeout(timeoutId);\r\n        }\r\n    }, [fullscreenMedia, mediaUrls, autoScroll]);\r\n\r\n    useEffect(() => {\r\n        if (autoScroll && fullscreenMedia === null) {\r\n            const intervalId = setInterval(() => {\r\n                window.scrollBy({ top: 3, behavior: 'smooth' });\r\n            }, 1);\r\n            return () => clearInterval(intervalId);\r\n        }\r\n    }, [autoScroll, fullscreenMedia]);\r\n\r\n    const selectedMedia = useMemo(() => {\r\n        const startIndex = (currentPage - 1) * mediaPerPage;\r\n        return mediaUrls.slice(0, startIndex + (2 * mediaPerPage));\r\n    }, [currentPage, mediaUrls, mediaPerPage]);\r\n\r\n    const handleIconClick = (url) => window.open(url, '_blank');\r\n\r\n    const handleScrapeInputKeyPress = (event) => {\r\n        if (event.key === 'Enter') {\r\n            if (scrapeUrl.includes('@')) {\r\n                const listId = scrapeUrl.replace('@', '');\r\n                fetchTweetsFromList(listId);\r\n            } else if (scrapeUrl.includes('❤️')) {\r\n                scrapeSavedLinks();\r\n            } else {\r\n                addScrapeUrlToFile(scrapeUrl);\r\n                handleScrape();\r\n            }\r\n            setScrapeUrl('');\r\n        }\r\n    };\r\n\r\n    const breakpointColumnsObj = useMemo(() => ({\r\n        default: 4,\r\n        1100: 3,\r\n        700: 2,\r\n        500: 1\r\n    }), []);\r\n\r\n    const handleImageError = (e, link, index) => {\r\n        console.error('Image failed to load:', e);\r\n        e.target.style.display = 'none'; // Hide the broken image\r\n        \r\n        // If in fullscreen and all media in this item failed to display, move to next\r\n        if (fullscreenMedia === index) {\r\n            const mediaItem = mediaUrls[index];\r\n            const allMediaFailed = mediaItem[1].every(mediaLink => {\r\n                const mediaElement = Array.from(document.querySelectorAll(`img[src=\"${mediaLink}\"], video[src=\"${mediaLink}\"]`));\r\n                return mediaElement.every(el => el.style.display === 'none');\r\n            });\r\n            \r\n            if (allMediaFailed) {\r\n                const nextIndex = (index + 1) % mediaUrls.length;\r\n                setFullscreenMedia(nextIndex);\r\n                const nextMedia = mediaRefs.current[nextIndex];\r\n                if (nextMedia && nextMedia.tagName === 'VIDEO') {\r\n                    nextMedia.play().catch(() => {});\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleVideoError = async (e) => {\r\n        console.error('Video failed to load:', e);\r\n        if (e.target.error.code === 4) { // 404 error\r\n            e.target.style.display = 'none'; // Hide the broken video\r\n            \r\n            // Get the index from the video element's reference in mediaRefs\r\n            const index = Object.keys(mediaRefs.current).find(key => \r\n                mediaRefs.current[key] === e.target\r\n            );\r\n            \r\n            if (fullscreenMedia === Number(index)) {\r\n                const nextIndex = (Number(index) + 1) % mediaUrls.length;\r\n                setFullscreenMedia(nextIndex);\r\n                const nextMedia = mediaRefs.current[nextIndex];\r\n                if (nextMedia && nextMedia.tagName === 'VIDEO') {\r\n                    nextMedia.play().catch(() => {});\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    const checkPasswordRequirements = (password) => {\r\n        setPasswordRequirements({\r\n            length: password.length >= 12,\r\n            uppercase: /[A-Z]/.test(password),\r\n            lowercase: /[a-z]/.test(password),\r\n            number: /\\d/.test(password),\r\n            special: /[@$!%*?&]/.test(password)\r\n        });\r\n    };\r\n\r\n    const handleLogin = async (e) => {\r\n        e.preventDefault();\r\n        setLoginError('');\r\n        \r\n        try {\r\n            const response = await fetch(`${API_URL}/api/login`, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                ...fetchConfig,\r\n                body: JSON.stringify({ username, password }),\r\n            });\r\n\r\n            const data = await response.json();\r\n\r\n            if (!response.ok) {\r\n                throw new Error(data.message || 'Login failed');\r\n            }\r\n\r\n            setIsLoggedIn(true);\r\n            setShowLogin(false);\r\n            showNotification('Login successful', 'success');\r\n            setUsername('');\r\n            setPassword('');\r\n            \r\n            // Add this: Reset page and fetch media after successful login\r\n            setCurrentPage(1);\r\n            setMediaUrls([]);\r\n            await fetchMedia(1, initialMediaPerPage);\r\n            \r\n        } catch (error) {\r\n            setLoginError(error.message);\r\n            showNotification(error.message, 'error');\r\n        }\r\n    };\r\n\r\n    const handleRegister = async (e) => {\r\n        e.preventDefault();\r\n        setLoginError('');\r\n\r\n        try {\r\n            const response = await fetch(`${API_URL}/api/register`, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ username, password }),\r\n            });\r\n\r\n            const data = await response.json();\r\n\r\n            if (!response.ok) {\r\n                throw new Error(data.message || 'Registration failed');\r\n            }\r\n\r\n            showNotification('Registration successful! Please log in.', 'success');\r\n            setIsRegistering(false);\r\n            setUsername('');\r\n            setPassword('');\r\n        } catch (error) {\r\n            setLoginError(error.message);\r\n            showNotification(error.message, 'error');\r\n        }\r\n    };\r\n\r\n    const handleLogout = async () => {\r\n        try {\r\n            await fetch(`${API_URL}/api/logout`, {\r\n                method: 'POST',\r\n                ...fetchConfig,\r\n            });\r\n            setIsLoggedIn(false);\r\n            showNotification('Logged out successfully', 'success');\r\n            \r\n            // Close profile menu\r\n            setShowProfileMenu(false);\r\n            \r\n            // Short timeout to allow notification to appear before refresh\r\n            setTimeout(() => {\r\n                window.location.reload(); // Refresh the page\r\n            }, 1000);\r\n        } catch (error) {\r\n            showNotification('Logout failed', 'error');\r\n        }\r\n    };\r\n\r\n    // Add this function to handle saving filter preference\r\n    const saveFilterPreference = (filterValue) => {\r\n        document.cookie = `preferred_filter=${filterValue}; max-age=31536000; path=/`; // Expires in 1 year\r\n    };\r\n\r\n    // Add this function to get filter from cookie\r\n    const getFilterFromCookie = () => {\r\n        const match = document.cookie.match(/preferred_filter=([^;]+)/);\r\n        return match ? match[1] : 'default';\r\n    };\r\n\r\n    // Add this new effect to check login status on component mount\r\n    useEffect(() => {\r\n        const checkLoginStatus = async () => {\r\n            try {\r\n                const response = await fetch(`${API_URL}/api/profile`, {\r\n                    ...fetchConfig\r\n                });\r\n                \r\n                if (response.ok) {\r\n                    setIsLoggedIn(true);\r\n                    setAutoScroll(false); // Disable autoScroll when user logs in\r\n                    // Load saved filter preference\r\n                    const savedFilter = getFilterFromCookie();\r\n                    setFilter(savedFilter);\r\n                    setCurrentPage(1);\r\n                    setMediaUrls([]);\r\n                    await fetchMedia(1, initialMediaPerPage);\r\n                } else {\r\n                    setIsLoggedIn(false);\r\n                    setShowLogin(true);\r\n                }\r\n            } catch (error) {\r\n                console.error('Error checking login status:', error);\r\n                setIsLoggedIn(false);\r\n                setShowLogin(true);\r\n            }\r\n        };\r\n\r\n        checkLoginStatus();\r\n    }, []);\r\n\r\n    const handleExport = async () => {\r\n        try {\r\n            const mediaResponse = await fetch(`${API_URL}/api/export-links`, {\r\n                ...fetchConfig,\r\n                headers: {\r\n                    ...fetchConfig.headers,\r\n                    'Accept': 'application/json'\r\n                }\r\n            });\r\n            \r\n            if (!mediaResponse.ok) {\r\n                throw new Error(`Failed to export media links: ${mediaResponse.statusText}`);\r\n            }\r\n            \r\n            const scrapeResponse = await fetch(`${API_URL}/api/export-scrape-list`, {\r\n                ...fetchConfig,\r\n                headers: {\r\n                    ...fetchConfig.headers,\r\n                    'Accept': 'application/json'\r\n                }\r\n            });\r\n            \r\n            if (!scrapeResponse.ok) {\r\n                throw new Error(`Failed to export scrape links: ${scrapeResponse.statusText}`);\r\n            }\r\n\r\n            // Parse responses with error handling\r\n            let mediaData;\r\n            let scrapeData;\r\n            \r\n            try {\r\n                mediaData = await mediaResponse.json();\r\n                // Accept either array or object with links property\r\n                if (!Array.isArray(mediaData) && !mediaData.links) {\r\n                    mediaData = []; // Default to empty array if no valid data\r\n                }\r\n                // Convert to array if it's in object format\r\n                mediaData = Array.isArray(mediaData) ? mediaData : mediaData.links || [];\r\n            } catch (error) {\r\n                console.error('Media parse error:', error);\r\n                mediaData = []; // Default to empty array on parse error\r\n            }\r\n\r\n            try {\r\n                scrapeData = await scrapeResponse.json();\r\n                // Accept either array or object format\r\n                if (typeof scrapeData === 'string') {\r\n                    scrapeData = [scrapeData]; // Convert single string to array\r\n                } else if (!Array.isArray(scrapeData) && typeof scrapeData === 'object') {\r\n                    scrapeData = scrapeData.urls || Object.values(scrapeData) || []; // Try to extract URLs\r\n                } else if (!Array.isArray(scrapeData)) {\r\n                    scrapeData = []; // Default to empty array if no valid data\r\n                }\r\n            } catch (error) {\r\n                console.error('Scrape parse error:', error);\r\n                scrapeData = []; // Default to empty array on parse error\r\n            }\r\n            \r\n            // Create zip file with error handling\r\n            try {\r\n                const zip = new JSZip();\r\n                zip.file(\"media-links.json\", JSON.stringify(mediaData, null, 2));\r\n                zip.file(\"scrape-links.json\", JSON.stringify(scrapeData, null, 2));\r\n                \r\n                const content = await zip.generateAsync({ type: \"blob\" });\r\n                \r\n                // Create download link\r\n                const url = window.URL.createObjectURL(content);\r\n                const a = document.createElement('a');\r\n                a.href = url;\r\n                a.download = 'KupoNutEX.zip';\r\n                document.body.appendChild(a);\r\n                a.click();\r\n                window.URL.revokeObjectURL(url);\r\n                document.body.removeChild(a);\r\n                \r\n                showNotification('Collection exported successfully', 'success');\r\n            } catch (error) {\r\n                throw new Error('Failed to create zip file: ' + error.message);\r\n            }\r\n        } catch (error) {\r\n            console.error('Export error:', error);\r\n            showNotification(error.message || 'Failed to export collection', 'error');\r\n        }\r\n    };\r\n\r\n    const handleImport = async (event) => {\r\n        try {\r\n            const file = event.target.files[0];\r\n            if (!file) return;\r\n            \r\n            // Add file size validation\r\n            if (file.size > 50 * 1024 * 1024) { // 50MB in bytes\r\n                showNotification('File size exceeds 50MB limit', 'error');\r\n                event.target.value = '';\r\n                return;\r\n            }\r\n\r\n            const reader = new FileReader();\r\n            reader.onload = async (e) => {\r\n                try {\r\n                    let content = JSON.parse(e.target.result);\r\n                    \r\n                    // Convert old format if necessary\r\n                    if (!Array.isArray(content)) {\r\n                        content = Object.entries(content).map(([postLink, videoLinks]) => ({\r\n                            postLink,\r\n                            videoLinks: Array.isArray(videoLinks) ? videoLinks : [videoLinks]\r\n                        }));\r\n                    }\r\n\r\n                    // Validate content structure\r\n                    const validContent = content.filter(item => {\r\n                        return item && \r\n                               typeof item === 'object' && \r\n                               typeof item.postLink === 'string' && \r\n                               (Array.isArray(item.videoLinks) || typeof item.videoLinks === 'string');\r\n                    });\r\n\r\n                    if (validContent.length === 0) {\r\n                        throw new Error('No valid media links found in file');\r\n                    }\r\n\r\n                    // Add timeout to import requests\r\n                    const controller = new AbortController();\r\n                    const timeoutId = setTimeout(() => controller.abort(), 60000); // 60 second timeout for large imports\r\n                    \r\n                    try {\r\n                        const response = await fetch(`${API_URL}/api/import-links`, {\r\n                            method: 'POST',\r\n                            headers: { 'Content-Type': 'application/json' },\r\n                            ...fetchConfig,\r\n                            signal: controller.signal,\r\n                            body: JSON.stringify(validContent)\r\n                        });\r\n                        \r\n                        clearTimeout(timeoutId);\r\n\r\n                        // Enhanced error handling\r\n                        if (!response.ok) {\r\n                            const errorText = await response.text();\r\n                            let errorMessage = 'Failed to import links';\r\n                            \r\n                            try {\r\n                                // Try to parse as JSON for structured errors\r\n                                const errorData = JSON.parse(errorText);\r\n                                errorMessage = errorData.message || errorData.error || errorMessage;\r\n                            } catch (e) {\r\n                                // If not JSON, use the raw text\r\n                                if (errorText) errorMessage = errorText;\r\n                            }\r\n                            \r\n                            throw new Error(errorMessage);\r\n                        }\r\n                        \r\n                        showNotification(`Successfully imported ${validContent.length} links`, 'success');\r\n                        // Refresh media after import\r\n                        setCurrentPage(1);\r\n                        setMediaUrls([]);\r\n                        await fetchMedia(1, initialMediaPerPage);\r\n                    } catch (fetchError) {\r\n                        if (fetchError.name === 'AbortError') {\r\n                            throw new Error('Import request timed out. The file may be too large or the server is busy.');\r\n                        }\r\n                        throw fetchError;\r\n                    }\r\n                } catch (error) {\r\n                    console.error('Import error:', error);\r\n                    showNotification(error.message || 'Invalid file format', 'error');\r\n                }\r\n            };\r\n            reader.readAsText(file);\r\n        } catch (error) {\r\n            console.error('File reading error:', error);\r\n            showNotification('Failed to read import file', 'error');\r\n        }\r\n        // Reset file input\r\n        event.target.value = '';\r\n    };\r\n\r\n    const handleImportScrapeList = async (event) => {\r\n        try {\r\n            const file = event.target.files[0];\r\n            if (!file) return;\r\n\r\n            const reader = new FileReader();\r\n            reader.onload = async (e) => {\r\n                try {\r\n                    const content = JSON.parse(e.target.result);\r\n                    \r\n                    const response = await fetch(`${API_URL}/api/import-scrape-list`, {\r\n                        method: 'POST',\r\n                        headers: { 'Content-Type': 'application/json' },\r\n                        ...fetchConfig,\r\n                        body: JSON.stringify(content)\r\n                    });\r\n\r\n                    if (!response.ok) {\r\n                        const error = await response.json();\r\n                        throw new Error(error.message || 'Failed to import scrape list');\r\n                    }\r\n\r\n                    const result = await response.json();\r\n                    showNotification(`Successfully imported ${result.total} URLs and started scraping`, 'success');\r\n                    \r\n                    // Refresh media after import and scrape\r\n                    setCurrentPage(1);\r\n                    setMediaUrls([]);\r\n                    await fetchMedia(1, initialMediaPerPage);\r\n                } catch (error) {\r\n                    console.error('Import error:', error);\r\n                    showNotification(error.message || 'Invalid file format', 'error');\r\n                }\r\n            };\r\n            reader.readAsText(file);\r\n        } catch (error) {\r\n            console.error('File reading error:', error);\r\n            showNotification('Failed to read import file', 'error');\r\n        }\r\n        // Reset file input\r\n        event.target.value = '';\r\n    };\r\n\r\n    // Add function to mark media as loaded\r\n    const handleMediaLoad = (index) => {\r\n        setLoadedMedia(prev => ({\r\n            ...prev,\r\n            [index]: true\r\n        }));\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {!isOnline && (\r\n                <div className=\"offline-banner\">\r\n                    You are currently offline. Some features may not work properly.\r\n                </div>\r\n            )}\r\n            <div className=\"notifications-container\">\r\n                {notifications.map((notification, index) => (\r\n                    <div \r\n                        key={notification.id} \r\n                        className={`notification ${notification.type}`}\r\n                        style={{ top: `${20 + (index * 70)}px` }}\r\n                    >\r\n                        <p className=\"notification-message\">{notification.message}</p>\r\n                        {notification.type === 'progress' && notification.isComplete && (\r\n                            <>\r\n                                <p className=\"notification-count\">\r\n                                    {notification.count} items found\r\n                                </p>\r\n                                <div \r\n                                    className=\"notification-progress-bar\" \r\n                                    style={{ width: '100%' }}\r\n                                />\r\n                            </>\r\n                        )}\r\n                        {notification.type === 'progress' && !notification.isComplete && (\r\n                            <div className=\"notification-loading\">\r\n                                <div className=\"notification-spinner\"></div>\r\n                            </div>\r\n                        )}\r\n                        {notification.type !== 'progress' && (\r\n                            <div className=\"notification-progress\" />\r\n                        )}\r\n                    </div>\r\n                ))}\r\n            </div>\r\n            <div className=\"main-content\">\r\n                <Masonry\r\n                    breakpointCols={breakpointColumnsObj}\r\n                    className=\"masonry-grid\"\r\n                    columnClassName=\"masonry-grid_column\"\r\n                >\r\n                    {selectedMedia.map((media, index) => {\r\n                        if (!media || !media[1]) return null;\r\n                        const [postLink, videoLinks] = media;\r\n                        const firstVideoLink = videoLinks[0];\r\n                        const isVideo = firstVideoLink && (firstVideoLink.endsWith('.mp4') || firstVideoLink.endsWith('.mov') || firstVideoLink.endsWith('.webm'));\r\n                        const isRule34Video = postLink.includes('rule34video');\r\n                        const embedUrl = firstVideoLink ? firstVideoLink.replace('/view/', '/embed/') : '';\r\n                        const isLoaded = loadedMedia[index];\r\n\r\n                        return (\r\n                            <div\r\n                                key={index}\r\n                                ref={index >= selectedMedia.length - breakpointColumnsObj.default ? lastMediaElementRef : null}\r\n                                className={`media-wrapper masonry-item ${fullscreenMedia === index ? 'fullscreen' : ''}`}\r\n                                onClick={() => handleMediaClick(index)}\r\n                            >\r\n                                <div className={`media-container ${isLoaded ? 'media-loaded' : 'media-loading'}`}>\r\n                                    {isRule34Video ? (\r\n                                        <iframe\r\n                                            className=\"media-container\"\r\n                                            src={embedUrl}\r\n                                            frameBorder=\"0\"\r\n                                            allowFullScreen\r\n                                            loop\r\n                                            title=\"Embedded Video\"\r\n                                            onLoad={() => handleMediaLoad(index)}\r\n                                        ></iframe>\r\n                                    ) : isVideo ? (\r\n                                        <video\r\n                                            ref={el => mediaRefs.current[index] = el}\r\n                                            src={firstVideoLink}\r\n                                            controls\r\n                                            muted={fullscreenMedia !== index}\r\n                                            loop\r\n                                            onLoadedData={() => handleMediaLoad(index)}\r\n                                            onError={(e) => handleVideoError(e, firstVideoLink)}\r\n                                            onLoadStart={() => {\r\n                                                setCookies();\r\n                                            }}\r\n                                        />\r\n                                    ) : (\r\n                                        <img\r\n                                            ref={el => mediaRefs.current[index] = el}\r\n                                            src={firstVideoLink}\r\n                                            alt=\"Media\"\r\n                                            onLoad={() => handleMediaLoad(index)}\r\n                                            onError={(e) => handleImageError(e, firstVideoLink, index)}\r\n                                        />\r\n                                    )}\r\n                                    {fullscreenMedia === index && videoLinks.slice(1).map((link, i) => (\r\n                                        <div key={i} className=\"fullscreen-media-container\">\r\n                                            <img className='fullscreen-media'\r\n                                                ref={el => mediaRefs.current[`${index}_${i}`] = el}\r\n                                                src={link}\r\n                                                alt=\"Media\"\r\n                                                onError={(e) => handleImageError(e, link, index)}\r\n                                                onLoad={() => {\r\n                                                    setCookies();\r\n                                                }}\r\n                                            />\r\n                                        </div>\r\n                                    ))}\r\n                                </div>\r\n                                <div className=\"icon-container\">\r\n                                    <button\r\n                                        className=\"close-icon\"\r\n                                        onClick={(e) => {\r\n                                            e.stopPropagation();\r\n                                            handleMediaClose();\r\n                                        }}\r\n                                        aria-label=\"Close media\"\r\n                                    >\r\n                                        <i className=\"fas fa-times\"></i>\r\n                                    </button>\r\n                                    <button\r\n                                        className=\"postlink-icon\"\r\n                                        onClick={(e) => {\r\n                                            e.stopPropagation();\r\n                                            handleIconClick(postLink);\r\n                                        }}\r\n                                        aria-label=\"Open post link\"\r\n                                    >\r\n                                        <i className=\"fas fa-link\"></i>\r\n                                    </button>\r\n                                    {!postLink.includes('kusowanka') && (\r\n                                        <button\r\n                                            className=\"similar-icon\"\r\n                                            onClick={(e) => {\r\n                                                e.stopPropagation();\r\n                                                handleSimilar(postLink);\r\n                                            }}\r\n                                            aria-label=\"Find similar media\"\r\n                                        >\r\n                                            <i className=\"fas fa-clone\"></i>\r\n                                        </button>\r\n                                    )}\r\n                                </div>\r\n                                {isLoggedIn && (\r\n                                    <button\r\n                                        className=\"remove-icon\"\r\n                                        onClick={(e) => {\r\n                                            e.stopPropagation();\r\n                                            handleRemove(postLink); // Now we just pass postLink, not the specific videoLink\r\n                                        }}\r\n                                        aria-label=\"Remove media\"\r\n                                    >\r\n                                        <i className=\"fas fa-trash\"></i>\r\n                                    </button>\r\n                                )}\r\n                            </div>\r\n                        );\r\n                    })}\r\n                    {loading && (\r\n                        <div className=\"loading-placeholder\"></div>\r\n                    )}\r\n                </Masonry>\r\n                <div id=\"bottom-of-page\"></div>\r\n                {!showLogin && (\r\n                    <div className=\"overlay-buttons\">\r\n                        {isLoggedIn && (\r\n                            <button\r\n                                onClick={() => setShowSettings(!showSettings)}\r\n                                className=\"settings-button\"\r\n                                aria-label=\"Settings\"\r\n                            >\r\n                                <i className=\"fas fa-cog\"></i>\r\n                            </button>\r\n                        )}\r\n                        <button\r\n                            onClick={() => setAutoScroll(!autoScroll)}\r\n                            className={`auto-scroll-button ${autoScroll ? 'active' : ''}`}\r\n                            aria-label=\"Toggle auto scroll\"\r\n                        >\r\n                            <i className=\"fas fa-arrow-down\"></i>\r\n                        </button>\r\n                        <button\r\n                            onClick={() => isLoggedIn ? setShowProfileMenu(!showProfileMenu) : setShowLogin(true)}\r\n                            className={`profile-button ${isLoggedIn ? 'logged-in' : ''}`}\r\n                            aria-label=\"Profile\"\r\n                        >\r\n                            <i className={`fas ${isLoggedIn ? 'fa-user-check' : 'fa-user'}`}></i>\r\n                        </button>\r\n                        {showProfileMenu && isLoggedIn && (\r\n                            <div className=\"profile-menu\">\r\n                                <div className=\"profile-menu-header\">\r\n                                    <h3>Profile Menu</h3>\r\n                                    <button onClick={() => setShowProfileMenu(false)}>\r\n                                        <i className=\"fas fa-times\"></i>\r\n                                    </button>\r\n                                </div>\r\n                                <div className=\"profile-menu-content\">\r\n                                    <button className=\"profile-menu-button\" onClick={handleExport}>\r\n                                        <i className=\"fas fa-download\"></i>\r\n                                        Export Collection\r\n                                    </button>\r\n                                    <label className=\"profile-menu-button\">\r\n                                        <i className=\"fas fa-upload\"></i>\r\n                                        Import Collection\r\n                                        <input\r\n                                            type=\"file\"\r\n                                            accept=\".json\"\r\n                                            onChange={handleImport}\r\n                                            style={{ display: 'none' }}\r\n                                        />\r\n                                    </label>\r\n                                    <label className=\"profile-menu-button\">\r\n                                        <i className=\"fas fa-list\"></i>\r\n                                        Import Scrape List\r\n                                        <input\r\n                                            type=\"file\"\r\n                                            accept=\".json\"\r\n                                            onChange={handleImportScrapeList}\r\n                                            style={{ display: 'none' }}\r\n                                        />\r\n                                    </label>\r\n                                    <div className=\"profile-menu-divider\"></div>\r\n                                    <button className=\"profile-menu-button danger\" onClick={handleLogout}>\r\n                                        <i className=\"fas fa-sign-out-alt\"></i>\r\n                                        Logout\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                )}\r\n                {showSettings && (\r\n                    <div className=\"settings-dialog\">\r\n                        <div className=\"settings-content\">\r\n                            <div className=\"settings-header\">\r\n                                <h2>Gallery Settings</h2>\r\n                                <button onClick={() => setShowSettings(false)}>\r\n                                    <i className=\"fas fa-times\"></i>\r\n                                </button>\r\n                            </div>\r\n                            <div className=\"settings-body\">\r\n                                <div className=\"settings-item\">\r\n                                    <label htmlFor=\"scrape-url\">Scrape URL</label>\r\n                                    <div className=\"scrape-input-container\">\r\n                                        <input\r\n                                            id=\"scrape-url\"\r\n                                            value={scrapeUrl}\r\n                                            onChange={(e) => setScrapeUrl(e.target.value)}\r\n                                            onKeyPress={handleScrapeInputKeyPress}\r\n                                            placeholder=\"Enter URL to scrape\"\r\n                                        />\r\n                                        <button\r\n                                            onClick={() => {\r\n                                                if (scrapeUrl.includes('@')) {\r\n                                                    const listId = scrapeUrl.replace('@', '');\r\n                                                    fetchTweetsFromList(listId);\r\n                                                } else if (scrapeUrl.includes('❤️')) {\r\n                                                    scrapeSavedLinks();\r\n                                                } else {\r\n                                                    addScrapeUrlToFile(scrapeUrl);\r\n                                                    handleScrape();\r\n                                                }\r\n                                                setScrapeUrl('');\r\n                                            }}\r\n                                            aria-label=\"Scrape URL\"\r\n                                        >\r\n                                            Scrape\r\n                                        </button>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"settings-item\">\r\n                                    <label htmlFor=\"filter\">Sort by:</label>\r\n                                    <select \r\n                                        id=\"filter\" \r\n                                        value={filter} \r\n                                        onChange={(e) => {\r\n                                            const newFilter = e.target.value;\r\n                                            setFilter(newFilter);\r\n                                            saveFilterPreference(newFilter);\r\n                                        }}\r\n                                    >\r\n                                        <option value=\"Default\">Default</option>\r\n                                        <option value=\"Newest\">Newest</option>\r\n                                        <option value=\"Random\">Random</option>\r\n                                    </select>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n                {showLogin && (\r\n                    <div className=\"login-dialog\">\r\n                        <div className=\"login-content\">\r\n                            <div className=\"login-header\">\r\n                                <h2>{isRegistering ? 'Create Account' : 'Login'}</h2>\r\n                                <button onClick={() => {\r\n                                    setShowLogin(false);\r\n                                    setIsRegistering(false);\r\n                                    setLoginError('');\r\n                                }}>\r\n                                    <i className=\"fas fa-times\"></i>\r\n                                </button>\r\n                            </div>\r\n                            {loginError && (\r\n                                <div className=\"login-error\">\r\n                                    {loginError}\r\n                                </div>\r\n                            )}\r\n                            <form className=\"login-form\" onSubmit={isRegistering ? handleRegister : handleLogin}>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    placeholder=\"Username\"\r\n                                    value={username}\r\n                                    onChange={(e) => setUsername(e.target.value)}\r\n                                    required\r\n                                />\r\n                                <input\r\n                                    type=\"password\"\r\n                                    placeholder=\"Password\"\r\n                                    value={password}\r\n                                    onChange={(e) => {\r\n                                        setPassword(e.target.value);\r\n                                        if (isRegistering) {\r\n                                            checkPasswordRequirements(e.target.value);\r\n                                        }\r\n                                    }}\r\n                                    required\r\n                                />\r\n                                {isRegistering && (\r\n                                    <div className=\"password-requirements\">\r\n                                        <p className={passwordRequirements.length ? 'met' : ''}>\r\n                                            ✓ At least 12 characters\r\n                                        </p>\r\n                                        <p className={passwordRequirements.uppercase ? 'met' : ''}>\r\n                                            ✓ One uppercase letter\r\n                                        </p>\r\n                                        <p className={passwordRequirements.lowercase ? 'met' : ''}>\r\n                                            ✓ One lowercase letter\r\n                                        </p>\r\n                                        <p className={passwordRequirements.number ? 'met' : ''}>\r\n                                            ✓ One number\r\n                                        </p>\r\n                                        <p className={passwordRequirements.special ? 'met' : ''}>\r\n                                            ✓ One special character (@$!%*?&)\r\n                                        </p>\r\n                                    </div>\r\n                                )}\r\n                                <button type=\"submit\">\r\n                                    {isRegistering ? 'Create Account' : 'Login'}\r\n                                </button>\r\n                            </form>\r\n                            <div className=\"login-options\">\r\n                                <button onClick={() => {\r\n                                    setIsRegistering(!isRegistering);\r\n                                    setLoginError('');\r\n                                }}>\r\n                                    {isRegistering \r\n                                        ? 'Already have an account? Login' \r\n                                        : 'Need an account? Register'}\r\n                                </button>\r\n                            </div>\r\n                            {isLoggedIn && (\r\n                                <div className=\"profile-actions\">\r\n                                    <button onClick={handleExport} className=\"export-button\">\r\n                                        <i className=\"fas fa-download\"></i> Export Links\r\n                                    </button>\r\n                                    <label className=\"import-button\">\r\n                                        <i className=\"fas fa-upload\"></i> Import Links\r\n                                        <input\r\n                                            type=\"file\"\r\n                                            accept=\".json\"\r\n                                            onChange={handleImport}\r\n                                            style={{ display: 'none' }}\r\n                                        />\r\n                                    </label>\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default React.memo(VideoList);\r\n"],"names":["DEFAULT_NGROK_URL","config","API_URL","localStorage","getItem","console","log","VideoList","mediaUrls","setMediaUrls","useState","currentPage","setCurrentPage","scrapeUrl","setScrapeUrl","fullscreenMedia","setFullscreenMedia","loading","setLoading","isLoggedIn","setIsLoggedIn","autoScroll","setAutoScroll","filter","setFilter","showSettings","setShowSettings","notifications","setNotifications","showLogin","setShowLogin","isRegistering","setIsRegistering","username","setUsername","password","setPassword","loginError","setLoginError","passwordRequirements","setPasswordRequirements","length","uppercase","lowercase","number","special","showProfileMenu","setShowProfileMenu","isClickable","setIsClickable","loadedMedia","setLoadedMedia","isOnline","setIsOnline","navigator","onLine","retryCount","setRetryCount","mediaRefs","useRef","mediaSet","Set","observer","shuffleArray","array","reverse","i","j","Math","floor","random","fetchConfig","credentials","headers","useEffect","handleOnline","showNotification","fetchMedia","handleOffline","window","addEventListener","removeEventListener","useCallback","async","page","limit","mediaLinks","sortedMediaLinks","controller","AbortController","timeoutId","setTimeout","abort","response","fetch","method","cache","signal","clearTimeout","status","Object","fromEntries","entries","ok","Error","statusText","data","json","map","item","postLink","videoLinks","error","name","prev","defaultLinks","shuffledLinks","reversedLinks","toLowerCase","startIndex","endIndex","newMediaUrls","slice","current","clear","uniqueMediaUrls","media","has","forEach","add","prevMediaUrls","message","includes","setCookies","cookies","JSON","parse","cookie","document","value","domain","path","fetchTweetsFromList","body","stringify","alert","type","arguments","undefined","id","Date","now","newNotification","notification","showProgressNotification","count","isComplete","find","n","removeNotification","fetchLatestMedia","handleScrape","notificationId","split","url","result","linksAdded","latestMedia","existingUrls","uniqueNewMedia","addScrapeUrlToFile","scrapeSavedLinks","scrollToMedia","index","mediaElement","scrollIntoView","behavior","block","handleMediaClose","tagName","pause","mediaContainer","getElementById","classList","remove","querySelectorAll","button","style","zIndex","querySelector","display","handleClickOutside","event","_mediaRefs$current$fu","contains","target","closest","handleKeyPress","e","key","nextIndex","nextMedia","play","catch","prevIndex","prevMedia","lastMediaElementRef","node","disconnect","IntersectionObserver","some","entry","isIntersecting","prevPage","threshold","rootMargin","observe","overflow","currentMedia","videoDuration","duration","intervalId","setInterval","scrollBy","top","clearInterval","selectedMedia","useMemo","breakpointColumnsObj","default","handleImageError","link","every","mediaLink","Array","from","el","savedFilter","getFilterFromCookie","match","checkLoginStatus","handleExport","mediaResponse","scrapeResponse","mediaData","scrapeData","isArray","links","urls","values","zip","JSZip","file","content","generateAsync","URL","createObjectURL","a","createElement","href","download","appendChild","click","revokeObjectURL","removeChild","handleImport","files","size","reader","FileReader","onload","_ref","validContent","errorText","text","errorMessage","errorData","fetchError","readAsText","handleMediaLoad","_jsxs","children","_jsx","className","_Fragment","width","Masonry","breakpointCols","columnClassName","firstVideoLink","isVideo","endsWith","isRule34Video","embedUrl","replace","isLoaded","ref","onClick","handleMediaClick","src","frameBorder","allowFullScreen","loop","title","onLoad","controls","muted","onLoadedData","onError","code","keys","Number","handleVideoError","onLoadStart","alt","stopPropagation","open","handleSimilar","handleRemove","accept","onChange","total","location","reload","htmlFor","onKeyPress","listId","placeholder","newFilter","filterValue","onSubmit","preventDefault","required","test","checkPasswordRequirements","React"],"sourceRoot":""}