{"version":3,"file":"static/js/415.83751499.chunk.js","mappings":"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","sources":["config.js","components/VideoList.js"],"sourcesContent":["// Set default ngrok URL - update this whenever you start a new ngrok session\r\nconst DEFAULT_NGROK_URL = 'https://c848-2600-4040-441b-5e00-5d21-af5b-ff0a-2c09.ngrok-free.app';\r\n\r\n// Use stored URL from localStorage or fall back to the default\r\nconst ngrokUrl = localStorage.getItem('ngrokUrl') || DEFAULT_NGROK_URL;\r\n\r\nconst config = {\r\n  // Always use ngrok URL\r\n  API_URL: ngrokUrl\r\n};\r\n\r\n// Log configuration info\r\nconsole.log('Using API URL:', config.API_URL);\r\n\r\n// Helper function to update ngrok URL when it changes\r\nexport const updateNgrokUrl = (url) => {\r\n  if (url && url.includes('ngrok')) {\r\n    localStorage.setItem('ngrokUrl', url);\r\n    console.log('Ngrok URL updated to:', url);\r\n    console.log('Please refresh the page to use the new URL.');\r\n    return true;\r\n  }\r\n  return false;\r\n};\r\n\r\n// Helper to reset to default ngrok URL\r\nexport const resetToDefaultNgrok = () => {\r\n  localStorage.setItem('ngrokUrl', DEFAULT_NGROK_URL);\r\n  console.log('Reset to default ngrok URL. Please refresh the page.');\r\n};\r\n\r\nexport default config;\r\n","import React, { useState, useEffect, useRef, useCallback, useMemo } from 'react';\r\nimport Masonry from 'react-masonry-css';\r\nimport './VideoList.css';\r\nimport JSZip from 'jszip';\r\nimport defaultLinks from './default-links.json';\r\nimport config from '../config'; // Import the config file\r\n\r\nconst API_URL = config.API_URL;\r\n\r\nconst VideoList = () => {\r\n    const [mediaUrls, setMediaUrls] = useState([]);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [scrapeUrl, setScrapeUrl] = useState('');\r\n    const [fullscreenMedia, setFullscreenMedia] = useState(null);\r\n    const [loading, setLoading] = useState(false);\r\n    const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n    const [autoScroll, setAutoScroll] = useState(!isLoggedIn);\r\n    const [filter, setFilter] = useState('default');\r\n    const [showSettings, setShowSettings] = useState(false);\r\n    const [notifications, setNotifications] = useState([]);\r\n    const [showLogin, setShowLogin] = useState(false);\r\n    const [isRegistering, setIsRegistering] = useState(false);\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [loginError, setLoginError] = useState('');\r\n    const [passwordRequirements, setPasswordRequirements] = useState({\r\n        length: false,\r\n        uppercase: false,\r\n        lowercase: false,\r\n        number: false,\r\n        special: false\r\n    });\r\n    const [showProfileMenu, setShowProfileMenu] = useState(false);\r\n    const [isClickable, setIsClickable] = useState(true);\r\n    const [loadedMedia, setLoadedMedia] = useState({});\r\n    const mediaRefs = useRef([]);\r\n    const mediaSet = useRef(new Set());\r\n    const observer = useRef();\r\n\r\n    const initialMediaPerPage = 8;\r\n    const mediaPerPage = 16;\r\n\r\n    const shuffleArray = (array) => {\r\n        array.reverse();\r\n        for (let i = array.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            [array[i], array[j]] = [array[j], array[i]];\r\n        }\r\n        array.reverse();\r\n        return array;\r\n    };\r\n\r\n    const fetchConfig = {\r\n        credentials: 'include',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n        },\r\n        mode: 'cors'  // Explicitly set CORS mode\r\n    };\r\n\r\n    // Add a helper function to generate a cache-busting URL\r\n    const cacheBustUrl = (url) => {\r\n        const separator = url.includes('?') ? '&' : '?';\r\n        return `${url}${separator}_=${Date.now()}`;\r\n    };\r\n\r\n    // Before trying to fetch media, test CORS setup\r\n    useEffect(() => {\r\n        const testCorsSetup = async () => {\r\n            if (isLoggedIn) {\r\n                try {\r\n                    console.log('Testing CORS setup...');\r\n                    const response = await fetch(cacheBustUrl(`${API_URL}/api/cors-test`), fetchConfig);\r\n                    \r\n                    if (response.ok) {\r\n                        const data = await response.json();\r\n                        console.log('CORS test successful:', data);\r\n                    } else {\r\n                        console.error('CORS test failed:', response.status);\r\n                    }\r\n                } catch (error) {\r\n                    console.error('CORS test error:', error);\r\n                }\r\n            }\r\n        };\r\n        \r\n        testCorsSetup();\r\n    }, [isLoggedIn]);\r\n\r\n    const fetchMedia = useCallback(async (page, limit) => {\r\n        setLoading(true);\r\n        try {\r\n            let mediaLinks;\r\n            if (isLoggedIn) {\r\n                console.log('Fetching media, logged in status:', isLoggedIn);\r\n                console.log('Using API URL:', API_URL);\r\n                \r\n                // Add cache busting parameter\r\n                const url = cacheBustUrl(`${API_URL}/api/media`);\r\n                console.log('Fetching from URL with cache busting:', url);\r\n                \r\n                const response = await fetch(url, {\r\n                    ...fetchConfig,\r\n                    cache: 'no-cache'\r\n                });\r\n                \r\n                console.log('API response status:', response.status);\r\n                console.log('Response headers:', \r\n                    Array.from(response.headers.entries()).reduce((obj, [key, val]) => {\r\n                        obj[key] = val;\r\n                        return obj;\r\n                    }, {})\r\n                );\r\n                \r\n                // Check if we got a proper response\r\n                const contentType = response.headers.get('content-type');\r\n                console.log('Content-Type:', contentType);\r\n                \r\n                if (!response.ok) {\r\n                    if (response.status === 401) {\r\n                        setIsLoggedIn(false);\r\n                        setShowLogin(true);\r\n                        throw new Error('Please login to view media');\r\n                    }\r\n                    \r\n                    // Try to get the error message\r\n                    let errorMessage;\r\n                    if (contentType && contentType.includes('application/json')) {\r\n                        const errorData = await response.json();\r\n                        errorMessage = errorData.message || errorData.error || `Error: ${response.status}`;\r\n                    } else {\r\n                        errorMessage = `Server returned ${response.status}: ${response.statusText}`;\r\n                    }\r\n                    throw new Error(errorMessage);\r\n                }\r\n                \r\n                // Check for correct content type\r\n                if (!contentType || !contentType.includes('application/json')) {\r\n                    throw new Error(`Expected JSON response but got ${contentType || 'unknown content type'}`);\r\n                }\r\n                \r\n                const data = await response.json();\r\n                mediaLinks = data.map(item => [item.postLink || '', item.videoLinks]);\r\n            } else {\r\n                // Only load default links if not logged in and they exist\r\n                if (!defaultLinks || defaultLinks.length === 0) {\r\n                    mediaLinks = [];\r\n                    return; // Exit early if no default links\r\n                }\r\n                mediaLinks = defaultLinks.map(item => [item.postLink || '', item.videoLinks]);\r\n            }\r\n\r\n            // Prepare arrays before switch\r\n            let sortedMediaLinks;\r\n            const shuffledLinks = shuffleArray([...mediaLinks]);\r\n            const reversedLinks = [...mediaLinks].reverse();\r\n\r\n            switch (filter.toLowerCase()) {\r\n                case 'newest':\r\n                    sortedMediaLinks = reversedLinks;\r\n                    break;\r\n                case 'random':\r\n                    sortedMediaLinks = shuffleArray([...mediaLinks]); // Create completely random array\r\n                    break;\r\n                default:\r\n                    sortedMediaLinks = page % 2 === 0 ? reversedLinks : shuffledLinks;\r\n                    break;\r\n            }\r\n\r\n            const startIndex = (page - 1) * limit;\r\n            const endIndex = startIndex + limit;\r\n            const newMediaUrls = sortedMediaLinks.slice(startIndex, endIndex);\r\n\r\n            if (page === 1) {\r\n                mediaSet.current.clear(); // Clear mediaSet before setting new media URLs\r\n            }\r\n\r\n            const uniqueMediaUrls = newMediaUrls.filter(media => !mediaSet.current.has(media[1][0]));\r\n            uniqueMediaUrls.forEach(media => mediaSet.current.add(media[1][0]));\r\n\r\n            if (page === 1) {\r\n                setMediaUrls(uniqueMediaUrls);\r\n            } else {\r\n                setMediaUrls(prevMediaUrls => [...prevMediaUrls, ...uniqueMediaUrls]);\r\n            }\r\n        } catch (error) {\r\n            console.error('Failed to load media:', error);\r\n            // Special handling for CORS errors\r\n            if (error.message.includes('Failed to fetch') || error.message.includes('CORS')) {\r\n                showNotification('CORS error: Please check browser console for details', 'error');\r\n                \r\n                // Provide helpful information on dealing with ngrok CORS issues\r\n                console.error(`\r\n                    CORS ERROR HELP:\r\n                    - Make sure your ngrok session is using the same URL\r\n                    - Try running \"ngrok http 5000 --host-header=rewrite\"\r\n                    - You may need to restart the ngrok session and the server\r\n                    - Check that the origin ${window.location.origin} is allowed in your CORS configuration\r\n                `);\r\n            } else {\r\n                showNotification(error.message, 'error');\r\n            }\r\n            \r\n            // If fetch failed and we thought we were logged in, show login prompt\r\n            if (isLoggedIn) {\r\n                setIsLoggedIn(false);\r\n                setShowLogin(true);\r\n            }\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, [filter, isLoggedIn]);\r\n\r\n    const setCookies = () => {\r\n        const cookies = JSON.parse(localStorage.getItem('cookies'));\r\n        if (cookies) {\r\n            cookies.forEach(cookie => {\r\n                document.cookie = `${cookie.name}=${cookie.value}; domain=${cookie.domain}; path=${cookie.path}`;\r\n            });\r\n        }\r\n    };\r\n\r\n    const fetchTweetsFromList = async (username) => {\r\n        try {\r\n            const response = await fetch(`${API_URL}/api/tweets`, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ username }),\r\n                ...fetchConfig\r\n            });\r\n            if (!response.ok) throw new Error('Network response was not ok');\r\n        } catch (error) {\r\n            alert('Failed to fetch tweets. Please try again later.');\r\n        }\r\n    };\r\n\r\n    const showNotification = (message, type = 'info') => {\r\n        const id = Date.now(); // Create unique ID for each notification\r\n        const newNotification = { id, message, type };\r\n        \r\n        setNotifications(prev => [...prev, newNotification]);\r\n        \r\n        // Remove this specific notification after 3 seconds\r\n        setTimeout(() => {\r\n            setNotifications(prev => prev.filter(notification => notification.id !== id));\r\n        }, 3000);\r\n    };\r\n\r\n    const showProgressNotification = (id, message, count = 0, isComplete = false) => {\r\n        console.log('Showing progress notification:', { id, message, count, isComplete });\r\n        \r\n        setNotifications(prev => {\r\n            const existing = prev.find(n => n.id === id);\r\n            const updatedNotifications = existing \r\n                ? prev.map(n => n.id === id ? { ...n, message, count, isComplete } : n)\r\n                : [...prev, { id, message, type: 'progress', count, isComplete }];\r\n            \r\n            return updatedNotifications;\r\n        });\r\n    };\r\n\r\n    const removeNotification = (id) => {\r\n        setNotifications(prev => prev.filter(n => n.id !== id));\r\n    };\r\n\r\n    // New helper function to fetch only the latest added media\r\n    const fetchLatestMedia = async (count = 10) => {\r\n        try {\r\n            const response = await fetch(`${API_URL}/api/media/latest?count=${count}`, {\r\n                ...fetchConfig,\r\n                cache: 'no-cache'\r\n            });\r\n            \r\n            if (!response.ok) {\r\n                throw new Error('Failed to fetch latest media');\r\n            }\r\n            \r\n            const data = await response.json();\r\n            return data.map(item => [item.postLink || '', item.videoLinks]);\r\n        } catch (error) {\r\n            console.error('Error fetching latest media:', error);\r\n            return [];\r\n        }\r\n    };\r\n\r\n    // Updated handleScrape function\r\n    const handleScrape = async () => {\r\n        const notificationId = Date.now();\r\n        try {\r\n            // Show initial \"in progress\" notification without count\r\n            showProgressNotification(notificationId, 'Scraping in progress...', 0, false);\r\n            console.log('Scraping URL:', scrapeUrl);\r\n            \r\n            const response = await fetch(`${API_URL}/api/scrape`, {\r\n                method: 'POST',\r\n                headers: { \r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Bearer ${document.cookie.split('token=')[1]}`\r\n                },\r\n                ...fetchConfig,\r\n                body: JSON.stringify({ url: scrapeUrl }),\r\n            });\r\n            \r\n            if (!response.ok) {\r\n                if (response.status === 401) {\r\n                    setIsLoggedIn(false);\r\n                    setShowLogin(true);\r\n                    throw new Error('Please login to scrape media');\r\n                }\r\n                throw new Error('Network response was not ok');\r\n            }\r\n\r\n            const result = await response.json();\r\n            \r\n            // Update notification with final count when complete and mark as complete\r\n            showProgressNotification(notificationId, 'Scraping completed successfully!', result.linksAdded || 0, true);\r\n            \r\n            // Handle media updates based on current sort\r\n            if (filter.toLowerCase() === 'newest') {\r\n                // Refresh the entire media list for \"newest\" sort\r\n                setCurrentPage(1);\r\n                setMediaUrls([]);\r\n                await fetchMedia(1, initialMediaPerPage);\r\n            } else if (result.linksAdded > 0) {\r\n                // For other sorts, append new media to the end of the current list\r\n                const latestMedia = await fetchLatestMedia(result.linksAdded);\r\n                \r\n                // Add only unique media that isn't already in our list\r\n                const existingUrls = new Set(mediaUrls.map(media => media[0]));\r\n                const uniqueNewMedia = latestMedia.filter(media => !existingUrls.has(media[0]));\r\n                \r\n                if (uniqueNewMedia.length > 0) {\r\n                    setMediaUrls(prevMediaUrls => [...prevMediaUrls, ...uniqueNewMedia]);\r\n                }\r\n            }\r\n            \r\n            // Auto-remove notification after a few seconds\r\n            setTimeout(() => removeNotification(notificationId), 5000);\r\n        } catch (error) {\r\n            console.error('Failed to scrape:', error);\r\n            showNotification(error.message || 'Failed to scrape. Please try again.', 'error');\r\n            removeNotification(notificationId);\r\n        }\r\n    };\r\n\r\n    const handleRemove = async (postLink) => {\r\n        try {\r\n            const response = await fetch(`${API_URL}/api/remove`, {\r\n                method: 'POST',\r\n                headers: { \r\n                    'Content-Type': 'application/json',\r\n                },\r\n                ...fetchConfig,\r\n                body: JSON.stringify({ postLink }),\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error('Failed to remove media');\r\n            }\r\n\r\n            // Update the local state to remove the entire post\r\n            setMediaUrls(prevMediaUrls => \r\n                prevMediaUrls.filter(media => media[0] !== postLink)\r\n            );\r\n\r\n            showNotification('Media removed successfully', 'success');\r\n        } catch (error) {\r\n            console.error('Failed to remove media:', error);\r\n            showNotification('Failed to remove media', 'error');\r\n        }\r\n    };\r\n\r\n    const addScrapeUrlToFile = async (url) => {\r\n        try {\r\n            console.log('Adding scrape URL to file:', url); // Add logging\r\n            const response = await fetch(`${API_URL}/api/save-scrape-url`, {\r\n                method: 'POST',\r\n                headers: { \r\n                    'Content-Type': 'application/json',\r\n                    // Add credentials header if needed\r\n                    'Authorization': `Bearer ${document.cookie.split('token=')[1]}`\r\n                },\r\n                ...fetchConfig,\r\n                body: JSON.stringify({ url }),\r\n            });\r\n            if (!response.ok) {\r\n                if (response.status === 401) {\r\n                    setIsLoggedIn(false);\r\n                    setShowLogin(true);\r\n                    throw new Error('Please login to save scrape URL');\r\n                }\r\n                throw new Error('Network response was not ok');\r\n            }\r\n        } catch (error) {\r\n            console.error('Failed to add scrape URL to file:', error);\r\n            showNotification(error.message || 'Failed to save scrape URL', 'error');\r\n        }\r\n    };\r\n\r\n    const scrapeSavedLinks = async () => {\r\n        try {\r\n            const response = await fetch(`${API_URL}/api/scrape-saved-links`, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                ...fetchConfig\r\n            });\r\n            if (!response.ok) throw new Error('Network response was not ok');\r\n        } catch (error) {\r\n            alert('Failed to scrape media. Please try again later.');\r\n            showNotification('Failed to scrape media. Please try again later.', 'error');\r\n        }\r\n    };\r\n\r\n    // Updated handleSimilar function\r\n    const handleSimilar = async (postLink) => {\r\n        const notificationId = Date.now();\r\n        try {\r\n            // Show initial notification without count\r\n            showProgressNotification(notificationId, 'Searching for similar posts...', 0, false);\r\n            console.log('Finding similar posts for:', postLink);\r\n            \r\n            const response = await fetch(`${API_URL}/api/similar`, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                ...fetchConfig,\r\n                body: JSON.stringify({ url: postLink }),\r\n            });\r\n\r\n            if (!response.ok) {\r\n                const errorData = await response.json().catch(() => ({}));\r\n                throw new Error(errorData.message || 'Failed to find similar posts');\r\n            }\r\n\r\n            const result = await response.json();\r\n            \r\n            if (result.count === 0) {\r\n                showProgressNotification(notificationId, 'No similar posts found', 0, true);\r\n            } else {\r\n                showProgressNotification(notificationId, 'Similar posts found!', result.count, true);\r\n                \r\n                // Handle media updates based on current sort\r\n                if (filter.toLowerCase() === 'newest') {\r\n                    // Refresh the entire media list for \"newest\" sort\r\n                    setCurrentPage(1);\r\n                    setMediaUrls([]);\r\n                    await fetchMedia(1, initialMediaPerPage);\r\n                } else if (result.count > 0) {\r\n                    // For other sorts, append new media to the end of the current list\r\n                    const latestMedia = await fetchLatestMedia(result.count);\r\n                    \r\n                    // Add only unique media that isn't already in our list\r\n                    const existingUrls = new Set(mediaUrls.map(media => media[0]));\r\n                    const uniqueNewMedia = latestMedia.filter(media => !existingUrls.has(media[0]));\r\n                    \r\n                    if (uniqueNewMedia.length > 0) {\r\n                        setMediaUrls(prevMediaUrls => [...prevMediaUrls, ...uniqueNewMedia]);\r\n                    }\r\n                }\r\n            }\r\n            \r\n            setTimeout(() => removeNotification(notificationId), 3000);\r\n        } catch (error) {\r\n            console.error('Failed to find similar:', error);\r\n            showNotification(error.message || 'Failed to find similar posts', 'error');\r\n            removeNotification(notificationId);\r\n        }\r\n    };\r\n\r\n    const scrollToMedia = useCallback((index) => {\r\n        const mediaElement = mediaRefs.current[index];\r\n        if (mediaElement) {\r\n            mediaElement.scrollIntoView({ behavior: 'smooth', block: 'center' });\r\n        }\r\n    }, []);\r\n\r\n    const handleMediaClick = (index) => {\r\n        if (!isClickable) return; // Prevent clicking if in cooldown\r\n        setFullscreenMedia(index);\r\n        mediaRefs.current.forEach((media, i) => {\r\n            if (media && i !== index && media.tagName === 'VIDEO') media.pause();\r\n        });\r\n        const mediaContainer = document.getElementById('media-container');\r\n        if (mediaContainer) {\r\n            mediaContainer.classList.add('fullscreen-active');\r\n        }\r\n        document.querySelectorAll('.postlink-icon, .close-icon, .remove-icon, .similar-icon').forEach(button => {\r\n            button.style.zIndex = '1002';\r\n        });\r\n        document.querySelector('.profile-button').style.display = 'none';\r\n        scrollToMedia(index);\r\n    };\r\n\r\n    const handleMediaClose = () => {\r\n        setFullscreenMedia(null);\r\n        setIsClickable(false); // Disable clicking\r\n        mediaRefs.current.forEach(media => {\r\n            if (media && media.tagName === 'VIDEO') media.pause();\r\n        });\r\n        const mediaContainer = document.getElementById('media-container');\r\n        if (mediaContainer) {\r\n            mediaContainer.classList.remove('fullscreen-active');\r\n        }\r\n        document.querySelectorAll('.postlink-icon, .close-icon, .remove-icon').forEach(button => {\r\n            button.style.zIndex = '';\r\n        });\r\n        document.querySelector('.profile-button').style.display = '';\r\n        \r\n        // Enable clicking after 500ms (0.5 seconds)\r\n        setTimeout(() => {\r\n            setIsClickable(true);\r\n        }, 100);\r\n    };\r\n\r\n    const handleClickOutside = (event) => {\r\n        if (fullscreenMedia !== null && !mediaRefs.current[fullscreenMedia]?.contains(event.target) && !event.target.closest('.postlink-icon, .close-icon, .remove-icon, .scrape-button, .auto-scroll-button, .similar-icon')) {\r\n            handleMediaClose();\r\n        }\r\n    };\r\n\r\n    const handleKeyPress = useCallback((e) => {\r\n        if (fullscreenMedia === null) return;\r\n\r\n        if (e.key === 'ArrowDown') {\r\n            const nextIndex = (fullscreenMedia + 1) % mediaUrls.length;\r\n            setFullscreenMedia(nextIndex);\r\n            const nextMedia = mediaRefs.current[nextIndex];\r\n            if (nextMedia && nextMedia.tagName === 'VIDEO') {\r\n                nextMedia.play().catch(() => {});\r\n            }\r\n            scrollToMedia(nextIndex);\r\n        } else if (e.key === 'ArrowUp') {\r\n            const prevIndex = (fullscreenMedia - 1 + mediaUrls.length) % mediaUrls.length;\r\n            setFullscreenMedia(prevIndex);\r\n            const prevMedia = mediaRefs.current[prevIndex];\r\n            if (prevMedia && prevMedia.tagName === 'VIDEO') {\r\n                prevMedia.play().catch(() => {});\r\n            }\r\n            scrollToMedia(prevIndex);\r\n        }\r\n    }, [fullscreenMedia, mediaUrls.length, scrollToMedia]);\r\n\r\n    const lastMediaElementRef = useCallback(node => {\r\n        if (!node) return;\r\n        \r\n        if (observer.current) observer.current.disconnect();\r\n        observer.current = new IntersectionObserver(entries => {\r\n            if (entries.some(entry => entry.isIntersecting)) {\r\n                setCurrentPage(prevPage => prevPage + 1);\r\n            }\r\n        }, { \r\n            threshold: 0.1,\r\n            rootMargin: '100px'\r\n        });\r\n                           \r\n        const lastColumnItems = document.querySelectorAll('.masonry-grid_column > div:last-child');\r\n        lastColumnItems.forEach(item => {\r\n            observer.current.observe(item);\r\n        });\r\n        \r\n        // Also observe the provided node\r\n        observer.current.observe(node);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        setCurrentPage(1);\r\n        setMediaUrls([]);\r\n        fetchMedia(1, initialMediaPerPage);\r\n    }, [filter, fetchMedia]);\r\n\r\n    useEffect(() => {\r\n        fetchMedia(currentPage, mediaPerPage);\r\n    }, [currentPage, fetchMedia]);\r\n\r\n    useEffect(() => {\r\n        document.addEventListener('mousedown', handleClickOutside);\r\n        document.addEventListener('keydown', handleKeyPress);\r\n        document.body.style.overflow = fullscreenMedia !== null ? 'hidden' : 'auto';\r\n        return () => {\r\n            document.removeEventListener('mousedown', handleClickOutside);\r\n            document.removeEventListener('keydown', handleKeyPress);\r\n            document.body.style.overflow = 'auto';\r\n        };\r\n    }, [fullscreenMedia, handleKeyPress]);\r\n\r\n    useEffect(() => {\r\n        if (autoScroll && fullscreenMedia !== null) {\r\n            const currentMedia = mediaRefs.current[fullscreenMedia];\r\n            const videoDuration = currentMedia.tagName === 'VIDEO' ? currentMedia.duration * 1000 : 10000;\r\n            const timeoutId = setTimeout(() => {\r\n                const nextIndex = (fullscreenMedia + 1) % mediaUrls.length;\r\n                setFullscreenMedia(nextIndex);\r\n                const nextMedia = mediaRefs.current[nextIndex];\r\n                if (nextMedia && nextMedia.tagName === 'VIDEO') {\r\n                    nextMedia.play().catch(() => {});\r\n                }\r\n            }, videoDuration <= 1 ? videoDuration * 5 : videoDuration);\r\n            return () => clearTimeout(timeoutId);\r\n        }\r\n    }, [fullscreenMedia, mediaUrls, autoScroll]);\r\n\r\n    useEffect(() => {\r\n        if (autoScroll && fullscreenMedia === null) {\r\n            const intervalId = setInterval(() => {\r\n                window.scrollBy({ top: 3, behavior: 'smooth' });\r\n            }, 1);\r\n            return () => clearInterval(intervalId);\r\n        }\r\n    }, [autoScroll, fullscreenMedia]);\r\n\r\n    const selectedMedia = useMemo(() => {\r\n        const startIndex = (currentPage - 1) * mediaPerPage;\r\n        return mediaUrls.slice(0, startIndex + (2 * mediaPerPage));\r\n    }, [currentPage, mediaUrls, mediaPerPage]);\r\n\r\n    const handleIconClick = (url) => window.open(url, '_blank');\r\n\r\n    const handleScrapeInputKeyPress = (event) => {\r\n        if (event.key === 'Enter') {\r\n            if (scrapeUrl.includes('@')) {\r\n                const listId = scrapeUrl.replace('@', '');\r\n                fetchTweetsFromList(listId);\r\n            } else if (scrapeUrl.includes('❤️')) {\r\n                scrapeSavedLinks();\r\n            } else {\r\n                addScrapeUrlToFile(scrapeUrl);\r\n                handleScrape();\r\n            }\r\n            setScrapeUrl('');\r\n        }\r\n    };\r\n\r\n    const breakpointColumnsObj = useMemo(() => ({\r\n        default: 4,\r\n        1100: 3,\r\n        700: 2,\r\n        500: 1\r\n    }), []);\r\n\r\n    const handleImageError = (e, link, index) => {\r\n        console.error('Image failed to load:', e);\r\n        e.target.style.display = 'none'; // Hide the broken image\r\n        \r\n        // If in fullscreen and all media in this item failed to display, move to next\r\n        if (fullscreenMedia === index) {\r\n            const mediaItem = mediaUrls[index];\r\n            const allMediaFailed = mediaItem[1].every(mediaLink => {\r\n                const mediaElement = Array.from(document.querySelectorAll(`img[src=\"${mediaLink}\"], video[src=\"${mediaLink}\"]`));\r\n                return mediaElement.every(el => el.style.display === 'none');\r\n            });\r\n            \r\n            if (allMediaFailed) {\r\n                const nextIndex = (index + 1) % mediaUrls.length;\r\n                setFullscreenMedia(nextIndex);\r\n                const nextMedia = mediaRefs.current[nextIndex];\r\n                if (nextMedia && nextMedia.tagName === 'VIDEO') {\r\n                    nextMedia.play().catch(() => {});\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleVideoError = async (e) => {\r\n        console.error('Video failed to load:', e);\r\n        if (e.target.error.code === 4) { // 404 error\r\n            e.target.style.display = 'none'; // Hide the broken video\r\n            \r\n            // Get the index from the video element's reference in mediaRefs\r\n            const index = Object.keys(mediaRefs.current).find(key => \r\n                mediaRefs.current[key] === e.target\r\n            );\r\n            \r\n            if (fullscreenMedia === Number(index)) {\r\n                const nextIndex = (Number(index) + 1) % mediaUrls.length;\r\n                setFullscreenMedia(nextIndex);\r\n                const nextMedia = mediaRefs.current[nextIndex];\r\n                if (nextMedia && nextMedia.tagName === 'VIDEO') {\r\n                    nextMedia.play().catch(() => {});\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    const checkPasswordRequirements = (password) => {\r\n        setPasswordRequirements({\r\n            length: password.length >= 12,\r\n            uppercase: /[A-Z]/.test(password),\r\n            lowercase: /[a-z]/.test(password),\r\n            number: /\\d/.test(password),\r\n            special: /[@$!%*?&]/.test(password)\r\n        });\r\n    };\r\n\r\n    const handleLogin = async (e) => {\r\n        e.preventDefault();\r\n        setLoginError('');\r\n        \r\n        try {\r\n            const response = await fetch(`${API_URL}/api/login`, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                ...fetchConfig,\r\n                body: JSON.stringify({ username, password }),\r\n            });\r\n\r\n            const data = await response.json();\r\n\r\n            if (!response.ok) {\r\n                throw new Error(data.message || 'Login failed');\r\n            }\r\n\r\n            setIsLoggedIn(true);\r\n            setShowLogin(false);\r\n            showNotification('Login successful', 'success');\r\n            setUsername('');\r\n            setPassword('');\r\n            \r\n            // Add this: Reset page and fetch media after successful login\r\n            setCurrentPage(1);\r\n            setMediaUrls([]);\r\n            await fetchMedia(1, initialMediaPerPage);\r\n            \r\n        } catch (error) {\r\n            setLoginError(error.message);\r\n            showNotification(error.message, 'error');\r\n        }\r\n    };\r\n\r\n    const handleRegister = async (e) => {\r\n        e.preventDefault();\r\n        setLoginError('');\r\n\r\n        try {\r\n            const response = await fetch(`${API_URL}/api/register`, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ username, password }),\r\n            });\r\n\r\n            const data = await response.json();\r\n\r\n            if (!response.ok) {\r\n                throw new Error(data.message || 'Registration failed');\r\n            }\r\n\r\n            showNotification('Registration successful! Please log in.', 'success');\r\n            setIsRegistering(false);\r\n            setUsername('');\r\n            setPassword('');\r\n        } catch (error) {\r\n            setLoginError(error.message);\r\n            showNotification(error.message, 'error');\r\n        }\r\n    };\r\n\r\n    const handleLogout = async () => {\r\n        try {\r\n            await fetch(`${API_URL}/api/logout`, {\r\n                method: 'POST',\r\n                ...fetchConfig,\r\n            });\r\n            setIsLoggedIn(false);\r\n            showNotification('Logged out successfully', 'success');\r\n            \r\n            // Close profile menu\r\n            setShowProfileMenu(false);\r\n            \r\n            // Short timeout to allow notification to appear before refresh\r\n            setTimeout(() => {\r\n                window.location.reload(); // Refresh the page\r\n            }, 1000);\r\n        } catch (error) {\r\n            showNotification('Logout failed', 'error');\r\n        }\r\n    };\r\n\r\n    // Add this function to handle saving filter preference\r\n    const saveFilterPreference = (filterValue) => {\r\n        document.cookie = `preferred_filter=${filterValue}; max-age=31536000; path=/`; // Expires in 1 year\r\n    };\r\n\r\n    // Add this function to get filter from cookie\r\n    const getFilterFromCookie = () => {\r\n        const match = document.cookie.match(/preferred_filter=([^;]+)/);\r\n        return match ? match[1] : 'default';\r\n    };\r\n\r\n    // Add this new effect to check login status on component mount\r\n    useEffect(() => {\r\n        const checkLoginStatus = async () => {\r\n            try {\r\n                console.log('Checking login status...');\r\n                console.log('Using API URL:', API_URL);\r\n                \r\n                const response = await fetch(`${API_URL}/api/profile`, {\r\n                    ...fetchConfig\r\n                });\r\n                \r\n                console.log('Login status response:', response.status);\r\n                \r\n                if (response.ok) {\r\n                    setIsLoggedIn(true);\r\n                    setAutoScroll(false); // Disable autoScroll when user logs in\r\n                    // Load saved filter preference\r\n                    const savedFilter = getFilterFromCookie();\r\n                    setFilter(savedFilter);\r\n                    setCurrentPage(1);\r\n                    setMediaUrls([]);\r\n                    await fetchMedia(1, initialMediaPerPage);\r\n                } else {\r\n                    setIsLoggedIn(false);\r\n                    setShowLogin(true);\r\n                }\r\n            } catch (error) {\r\n                console.error('Error checking login status:', error);\r\n                setIsLoggedIn(false);\r\n                setShowLogin(true);\r\n            }\r\n        };\r\n\r\n        checkLoginStatus();\r\n    }, []);\r\n\r\n    const handleExport = async () => {\r\n        try {\r\n            const mediaResponse = await fetch(`${API_URL}/api/export-links`, {\r\n                ...fetchConfig,\r\n                headers: {\r\n                    ...fetchConfig.headers,\r\n                    'Accept': 'application/json'\r\n                }\r\n            });\r\n            \r\n            if (!mediaResponse.ok) {\r\n                throw new Error(`Failed to export media links: ${mediaResponse.statusText}`);\r\n            }\r\n            \r\n            const scrapeResponse = await fetch(`${API_URL}/api/export-scrape-list`, {\r\n                ...fetchConfig,\r\n                headers: {\r\n                    ...fetchConfig.headers,\r\n                    'Accept': 'application/json'\r\n                }\r\n            });\r\n            \r\n            if (!scrapeResponse.ok) {\r\n                throw new Error(`Failed to export scrape links: ${scrapeResponse.statusText}`);\r\n            }\r\n\r\n            // Parse responses with error handling\r\n            let mediaData;\r\n            let scrapeData;\r\n            \r\n            try {\r\n                mediaData = await mediaResponse.json();\r\n                // Accept either array or object with links property\r\n                if (!Array.isArray(mediaData) && !mediaData.links) {\r\n                    mediaData = []; // Default to empty array if no valid data\r\n                }\r\n                // Convert to array if it's in object format\r\n                mediaData = Array.isArray(mediaData) ? mediaData : mediaData.links || [];\r\n            } catch (error) {\r\n                console.error('Media parse error:', error);\r\n                mediaData = []; // Default to empty array on parse error\r\n            }\r\n\r\n            try {\r\n                scrapeData = await scrapeResponse.json();\r\n                // Accept either array or object format\r\n                if (typeof scrapeData === 'string') {\r\n                    scrapeData = [scrapeData]; // Convert single string to array\r\n                } else if (!Array.isArray(scrapeData) && typeof scrapeData === 'object') {\r\n                    scrapeData = scrapeData.urls || Object.values(scrapeData) || []; // Try to extract URLs\r\n                } else if (!Array.isArray(scrapeData)) {\r\n                    scrapeData = []; // Default to empty array if no valid data\r\n                }\r\n            } catch (error) {\r\n                console.error('Scrape parse error:', error);\r\n                scrapeData = []; // Default to empty array on parse error\r\n            }\r\n            \r\n            // Create zip file with error handling\r\n            try {\r\n                const zip = new JSZip();\r\n                zip.file(\"media-links.json\", JSON.stringify(mediaData, null, 2));\r\n                zip.file(\"scrape-links.json\", JSON.stringify(scrapeData, null, 2));\r\n                \r\n                const content = await zip.generateAsync({ type: \"blob\" });\r\n                \r\n                // Create download link\r\n                const url = window.URL.createObjectURL(content);\r\n                const a = document.createElement('a');\r\n                a.href = url;\r\n                a.download = 'KupoNutEX.zip';\r\n                document.body.appendChild(a);\r\n                a.click();\r\n                window.URL.revokeObjectURL(url);\r\n                document.body.removeChild(a);\r\n                \r\n                showNotification('Collection exported successfully', 'success');\r\n            } catch (error) {\r\n                throw new Error('Failed to create zip file: ' + error.message);\r\n            }\r\n        } catch (error) {\r\n            console.error('Export error:', error);\r\n            showNotification(error.message || 'Failed to export collection', 'error');\r\n        }\r\n    };\r\n\r\n    const handleImport = async (event) => {\r\n        try {\r\n            const file = event.target.files[0];\r\n            if (!file) return;\r\n\r\n            const reader = new FileReader();\r\n            reader.onload = async (e) => {\r\n                try {\r\n                    let content = JSON.parse(e.target.result);\r\n                    \r\n                    // Convert old format if necessary\r\n                    if (!Array.isArray(content)) {\r\n                        content = Object.entries(content).map(([postLink, videoLinks]) => ({\r\n                            postLink,\r\n                            videoLinks: Array.isArray(videoLinks) ? videoLinks : [videoLinks]\r\n                        }));\r\n                    }\r\n\r\n                    // Validate content structure\r\n                    const validContent = content.filter(item => {\r\n                        return item && \r\n                               typeof item === 'object' && \r\n                               typeof item.postLink === 'string' && \r\n                               (Array.isArray(item.videoLinks) || typeof item.videoLinks === 'string');\r\n                    });\r\n\r\n                    if (validContent.length === 0) {\r\n                        throw new Error('No valid media links found in file');\r\n                    }\r\n\r\n                    const response = await fetch(`${API_URL}/api/import-links`, {\r\n                        method: 'POST',\r\n                        headers: { 'Content-Type': 'application/json' },\r\n                        ...fetchConfig,\r\n                        body: JSON.stringify(validContent)\r\n                    });\r\n\r\n                    if (!response.ok) throw new Error('Failed to import links');\r\n                    \r\n                    showNotification(`Successfully imported ${validContent.length} links`, 'success');\r\n                    // Refresh media after import\r\n                    setCurrentPage(1);\r\n                    setMediaUrls([]);\r\n                    await fetchMedia(1, initialMediaPerPage);\r\n                } catch (error) {\r\n                    console.error('Import error:', error);\r\n                    showNotification(error.message || 'Invalid file format', 'error');\r\n                }\r\n            };\r\n            reader.readAsText(file);\r\n        } catch (error) {\r\n            console.error('File reading error:', error);\r\n            showNotification('Failed to read import file', 'error');\r\n        }\r\n        // Reset file input\r\n        event.target.value = '';\r\n    };\r\n\r\n    const handleImportScrapeList = async (event) => {\r\n        try {\r\n            const file = event.target.files[0];\r\n            if (!file) return;\r\n\r\n            const reader = new FileReader();\r\n            reader.onload = async (e) => {\r\n                try {\r\n                    const content = JSON.parse(e.target.result);\r\n                    \r\n                    const response = await fetch(`${API_URL}/api/import-scrape-list`, {\r\n                        method: 'POST',\r\n                        headers: { 'Content-Type': 'application/json' },\r\n                        ...fetchConfig,\r\n                        body: JSON.stringify(content)\r\n                    });\r\n\r\n                    if (!response.ok) {\r\n                        const error = await response.json();\r\n                        throw new Error(error.message || 'Failed to import scrape list');\r\n                    }\r\n\r\n                    const result = await response.json();\r\n                    showNotification(`Successfully imported ${result.total} URLs and started scraping`, 'success');\r\n                    \r\n                    // Refresh media after import and scrape\r\n                    setCurrentPage(1);\r\n                    setMediaUrls([]);\r\n                    await fetchMedia(1, initialMediaPerPage);\r\n                } catch (error) {\r\n                    console.error('Import error:', error);\r\n                    showNotification(error.message || 'Invalid file format', 'error');\r\n                }\r\n            };\r\n            reader.readAsText(file);\r\n        } catch (error) {\r\n            console.error('File reading error:', error);\r\n            showNotification('Failed to read import file', 'error');\r\n        }\r\n        // Reset file input\r\n        event.target.value = '';\r\n    };\r\n\r\n    // Add function to mark media as loaded\r\n    const handleMediaLoad = (index) => {\r\n        setLoadedMedia(prev => ({\r\n            ...prev,\r\n            [index]: true\r\n        }));\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"notifications-container\">\r\n                {notifications.map((notification, index) => (\r\n                    <div \r\n                        key={notification.id} \r\n                        className={`notification ${notification.type}`}\r\n                        style={{ top: `${20 + (index * 70)}px` }}\r\n                    >\r\n                        <p className=\"notification-message\">{notification.message}</p>\r\n                        {notification.type === 'progress' && notification.isComplete && (\r\n                            <>\r\n                                <p className=\"notification-count\">\r\n                                    {notification.count} items found\r\n                                </p>\r\n                                <div \r\n                                    className=\"notification-progress-bar\" \r\n                                    style={{ width: '100%' }}\r\n                                />\r\n                            </>\r\n                        )}\r\n                        {notification.type === 'progress' && !notification.isComplete && (\r\n                            <div className=\"notification-loading\">\r\n                                <div className=\"notification-spinner\"></div>\r\n                            </div>\r\n                        )}\r\n                        {notification.type !== 'progress' && (\r\n                            <div className=\"notification-progress\" />\r\n                        )}\r\n                    </div>\r\n                ))}\r\n            </div>\r\n            <div className=\"main-content\">\r\n                <Masonry\r\n                    breakpointCols={breakpointColumnsObj}\r\n                    className=\"masonry-grid\"\r\n                    columnClassName=\"masonry-grid_column\"\r\n                >\r\n                    {selectedMedia.map((media, index) => {\r\n                        if (!media || !media[1]) return null;\r\n                        const [postLink, videoLinks] = media;\r\n                        const firstVideoLink = videoLinks[0];\r\n                        const isVideo = firstVideoLink && (firstVideoLink.endsWith('.mp4') || firstVideoLink.endsWith('.mov') || firstVideoLink.endsWith('.webm'));\r\n                        const isRule34Video = postLink.includes('rule34video');\r\n                        const embedUrl = firstVideoLink ? firstVideoLink.replace('/view/', '/embed/') : '';\r\n                        const isLoaded = loadedMedia[index];\r\n\r\n                        return (\r\n                            <div\r\n                                key={index}\r\n                                ref={index >= selectedMedia.length - breakpointColumnsObj.default ? lastMediaElementRef : null}\r\n                                className={`media-wrapper masonry-item ${fullscreenMedia === index ? 'fullscreen' : ''}`}\r\n                                onClick={() => handleMediaClick(index)}\r\n                            >\r\n                                <div className={`media-container ${isLoaded ? 'media-loaded' : 'media-loading'}`}>\r\n                                    {isRule34Video ? (\r\n                                        <iframe\r\n                                            className=\"media-container\"\r\n                                            src={embedUrl}\r\n                                            frameBorder=\"0\"\r\n                                            allowFullScreen\r\n                                            loop\r\n                                            title=\"Embedded Video\"\r\n                                            onLoad={() => handleMediaLoad(index)}\r\n                                        ></iframe>\r\n                                    ) : isVideo ? (\r\n                                        <video\r\n                                            ref={el => mediaRefs.current[index] = el}\r\n                                            src={firstVideoLink}\r\n                                            controls\r\n                                            muted={fullscreenMedia !== index}\r\n                                            loop\r\n                                            onLoadedData={() => handleMediaLoad(index)}\r\n                                            onError={(e) => handleVideoError(e, firstVideoLink)}\r\n                                            onLoadStart={() => {\r\n                                                setCookies();\r\n                                            }}\r\n                                        />\r\n                                    ) : (\r\n                                        <img\r\n                                            ref={el => mediaRefs.current[index] = el}\r\n                                            src={firstVideoLink}\r\n                                            alt=\"Media\"\r\n                                            onLoad={() => handleMediaLoad(index)}\r\n                                            onError={(e) => handleImageError(e, firstVideoLink, index)}\r\n                                        />\r\n                                    )}\r\n                                    {fullscreenMedia === index && videoLinks.slice(1).map((link, i) => (\r\n                                        <div key={i} className=\"fullscreen-media-container\">\r\n                                            <img className='fullscreen-media'\r\n                                                ref={el => mediaRefs.current[`${index}_${i}`] = el}\r\n                                                src={link}\r\n                                                alt=\"Media\"\r\n                                                onError={(e) => handleImageError(e, link, index)}\r\n                                                onLoad={() => {\r\n                                                    setCookies();\r\n                                                }}\r\n                                            />\r\n                                        </div>\r\n                                    ))}\r\n                                </div>\r\n                                <div className=\"icon-container\">\r\n                                    <button\r\n                                        className=\"close-icon\"\r\n                                        onClick={(e) => {\r\n                                            e.stopPropagation();\r\n                                            handleMediaClose();\r\n                                        }}\r\n                                        aria-label=\"Close media\"\r\n                                    >\r\n                                        <i className=\"fas fa-times\"></i>\r\n                                    </button>\r\n                                    <button\r\n                                        className=\"postlink-icon\"\r\n                                        onClick={(e) => {\r\n                                            e.stopPropagation();\r\n                                            handleIconClick(postLink);\r\n                                        }}\r\n                                        aria-label=\"Open post link\"\r\n                                    >\r\n                                        <i className=\"fas fa-link\"></i>\r\n                                    </button>\r\n                                    {!postLink.includes('kusowanka') && (\r\n                                        <button\r\n                                            className=\"similar-icon\"\r\n                                            onClick={(e) => {\r\n                                                e.stopPropagation();\r\n                                                handleSimilar(postLink);\r\n                                            }}\r\n                                            aria-label=\"Find similar media\"\r\n                                        >\r\n                                            <i className=\"fas fa-clone\"></i>\r\n                                        </button>\r\n                                    )}\r\n                                </div>\r\n                                {isLoggedIn && (\r\n                                    <button\r\n                                        className=\"remove-icon\"\r\n                                        onClick={(e) => {\r\n                                            e.stopPropagation();\r\n                                            handleRemove(postLink); // Now we just pass postLink, not the specific videoLink\r\n                                        }}\r\n                                        aria-label=\"Remove media\"\r\n                                    >\r\n                                        <i className=\"fas fa-trash\"></i>\r\n                                    </button>\r\n                                )}\r\n                            </div>\r\n                        );\r\n                    })}\r\n                    {loading && (\r\n                        <div className=\"loading-placeholder\"></div>\r\n                    )}\r\n                </Masonry>\r\n                <div id=\"bottom-of-page\"></div>\r\n                {!showLogin && (\r\n                    <div className=\"overlay-buttons\">\r\n                        {isLoggedIn && (\r\n                            <button\r\n                                onClick={() => setShowSettings(!showSettings)}\r\n                                className=\"settings-button\"\r\n                                aria-label=\"Settings\"\r\n                            >\r\n                                <i className=\"fas fa-cog\"></i>\r\n                            </button>\r\n                        )}\r\n                        <button\r\n                            onClick={() => setAutoScroll(!autoScroll)}\r\n                            className={`auto-scroll-button ${autoScroll ? 'active' : ''}`}\r\n                            aria-label=\"Toggle auto scroll\"\r\n                        >\r\n                            <i className=\"fas fa-arrow-down\"></i>\r\n                        </button>\r\n                        <button\r\n                            onClick={() => isLoggedIn ? setShowProfileMenu(!showProfileMenu) : setShowLogin(true)}\r\n                            className={`profile-button ${isLoggedIn ? 'logged-in' : ''}`}\r\n                            aria-label=\"Profile\"\r\n                        >\r\n                            <i className={`fas ${isLoggedIn ? 'fa-user-check' : 'fa-user'}`}></i>\r\n                        </button>\r\n                        {showProfileMenu && isLoggedIn && (\r\n                            <div className=\"profile-menu\">\r\n                                <div className=\"profile-menu-header\">\r\n                                    <h3>Profile Menu</h3>\r\n                                    <button onClick={() => setShowProfileMenu(false)}>\r\n                                        <i className=\"fas fa-times\"></i>\r\n                                    </button>\r\n                                </div>\r\n                                <div className=\"profile-menu-content\">\r\n                                    <button className=\"profile-menu-button\" onClick={handleExport}>\r\n                                        <i className=\"fas fa-download\"></i>\r\n                                        Export Collection\r\n                                    </button>\r\n                                    <label className=\"profile-menu-button\">\r\n                                        <i className=\"fas fa-upload\"></i>\r\n                                        Import Collection\r\n                                        <input\r\n                                            type=\"file\"\r\n                                            accept=\".json\"\r\n                                            onChange={handleImport}\r\n                                            style={{ display: 'none' }}\r\n                                        />\r\n                                    </label>\r\n                                    <label className=\"profile-menu-button\">\r\n                                        <i className=\"fas fa-list\"></i>\r\n                                        Import Scrape List\r\n                                        <input\r\n                                            type=\"file\"\r\n                                            accept=\".json\"\r\n                                            onChange={handleImportScrapeList}\r\n                                            style={{ display: 'none' }}\r\n                                        />\r\n                                    </label>\r\n                                    <div className=\"profile-menu-divider\"></div>\r\n                                    <button className=\"profile-menu-button danger\" onClick={handleLogout}>\r\n                                        <i className=\"fas fa-sign-out-alt\"></i>\r\n                                        Logout\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                )}\r\n                {showSettings && (\r\n                    <div className=\"settings-dialog\">\r\n                        <div className=\"settings-content\">\r\n                            <div className=\"settings-header\">\r\n                                <h2>Gallery Settings</h2>\r\n                                <button onClick={() => setShowSettings(false)}>\r\n                                    <i className=\"fas fa-times\"></i>\r\n                                </button>\r\n                            </div>\r\n                            <div className=\"settings-body\">\r\n                                <div className=\"settings-item\">\r\n                                    <label htmlFor=\"scrape-url\">Scrape URL</label>\r\n                                    <div className=\"scrape-input-container\">\r\n                                        <input\r\n                                            id=\"scrape-url\"\r\n                                            value={scrapeUrl}\r\n                                            onChange={(e) => setScrapeUrl(e.target.value)}\r\n                                            onKeyPress={handleScrapeInputKeyPress}\r\n                                            placeholder=\"Enter URL to scrape\"\r\n                                        />\r\n                                        <button\r\n                                            onClick={() => {\r\n                                                if (scrapeUrl.includes('@')) {\r\n                                                    const listId = scrapeUrl.replace('@', '');\r\n                                                    fetchTweetsFromList(listId);\r\n                                                } else if (scrapeUrl.includes('❤️')) {\r\n                                                    scrapeSavedLinks();\r\n                                                } else {\r\n                                                    addScrapeUrlToFile(scrapeUrl);\r\n                                                    handleScrape();\r\n                                                }\r\n                                                setScrapeUrl('');\r\n                                            }}\r\n                                            aria-label=\"Scrape URL\"\r\n                                        >\r\n                                            Scrape\r\n                                        </button>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"settings-item\">\r\n                                    <label htmlFor=\"filter\">Sort by:</label>\r\n                                    <select \r\n                                        id=\"filter\" \r\n                                        value={filter} \r\n                                        onChange={(e) => {\r\n                                            const newFilter = e.target.value;\r\n                                            setFilter(newFilter);\r\n                                            saveFilterPreference(newFilter);\r\n                                        }}\r\n                                    >\r\n                                        <option value=\"Default\">Default</option>\r\n                                        <option value=\"Newest\">Newest</option>\r\n                                        <option value=\"Random\">Random</option>\r\n                                    </select>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n                {showLogin && (\r\n                    <div className=\"login-dialog\">\r\n                        <div className=\"login-content\">\r\n                            <div className=\"login-header\">\r\n                                <h2>{isRegistering ? 'Create Account' : 'Login'}</h2>\r\n                                <button onClick={() => {\r\n                                    setShowLogin(false);\r\n                                    setIsRegistering(false);\r\n                                    setLoginError('');\r\n                                }}>\r\n                                    <i className=\"fas fa-times\"></i>\r\n                                </button>\r\n                            </div>\r\n                            {loginError && (\r\n                                <div className=\"login-error\">\r\n                                    {loginError}\r\n                                </div>\r\n                            )}\r\n                            <form className=\"login-form\" onSubmit={isRegistering ? handleRegister : handleLogin}>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    placeholder=\"Username\"\r\n                                    value={username}\r\n                                    onChange={(e) => setUsername(e.target.value)}\r\n                                    required\r\n                                />\r\n                                <input\r\n                                    type=\"password\"\r\n                                    placeholder=\"Password\"\r\n                                    value={password}\r\n                                    onChange={(e) => {\r\n                                        setPassword(e.target.value);\r\n                                        if (isRegistering) {\r\n                                            checkPasswordRequirements(e.target.value);\r\n                                        }\r\n                                    }}\r\n                                    required\r\n                                />\r\n                                {isRegistering && (\r\n                                    <div className=\"password-requirements\">\r\n                                        <p className={passwordRequirements.length ? 'met' : ''}>\r\n                                            ✓ At least 12 characters\r\n                                        </p>\r\n                                        <p className={passwordRequirements.uppercase ? 'met' : ''}>\r\n                                            ✓ One uppercase letter\r\n                                        </p>\r\n                                        <p className={passwordRequirements.lowercase ? 'met' : ''}>\r\n                                            ✓ One lowercase letter\r\n                                        </p>\r\n                                        <p className={passwordRequirements.number ? 'met' : ''}>\r\n                                            ✓ One number\r\n                                        </p>\r\n                                        <p className={passwordRequirements.special ? 'met' : ''}>\r\n                                            ✓ One special character (@$!%*?&)\r\n                                        </p>\r\n                                    </div>\r\n                                )}\r\n                                <button type=\"submit\">\r\n                                    {isRegistering ? 'Create Account' : 'Login'}\r\n                                </button>\r\n                            </form>\r\n                            <div className=\"login-options\">\r\n                                <button onClick={() => {\r\n                                    setIsRegistering(!isRegistering);\r\n                                    setLoginError('');\r\n                                }}>\r\n                                    {isRegistering \r\n                                        ? 'Already have an account? Login' \r\n                                        : 'Need an account? Register'}\r\n                                </button>\r\n                            </div>\r\n                            {isLoggedIn && (\r\n                                <div className=\"profile-actions\">\r\n                                    <button onClick={handleExport} className=\"export-button\">\r\n                                        <i className=\"fas fa-download\"></i> Export Links\r\n                                    </button>\r\n                                    <label className=\"import-button\">\r\n                                        <i className=\"fas fa-upload\"></i> Import Links\r\n                                        <input\r\n                                            type=\"file\"\r\n                                            accept=\".json\"\r\n                                            onChange={handleImport}\r\n                                            style={{ display: 'none' }}\r\n                                        />\r\n                                    </label>\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default React.memo(VideoList);\r\n"],"names":["DEFAULT_NGROK_URL","config","API_URL","localStorage","getItem","console","log","VideoList","mediaUrls","setMediaUrls","useState","currentPage","setCurrentPage","scrapeUrl","setScrapeUrl","fullscreenMedia","setFullscreenMedia","loading","setLoading","isLoggedIn","setIsLoggedIn","autoScroll","setAutoScroll","filter","setFilter","showSettings","setShowSettings","notifications","setNotifications","showLogin","setShowLogin","isRegistering","setIsRegistering","username","setUsername","password","setPassword","loginError","setLoginError","passwordRequirements","setPasswordRequirements","length","uppercase","lowercase","number","special","showProfileMenu","setShowProfileMenu","isClickable","setIsClickable","loadedMedia","setLoadedMedia","mediaRefs","useRef","mediaSet","Set","observer","shuffleArray","array","reverse","i","j","Math","floor","random","fetchConfig","credentials","headers","mode","cacheBustUrl","url","separator","includes","Date","now","useEffect","async","response","fetch","ok","data","json","error","status","testCorsSetup","fetchMedia","useCallback","page","limit","mediaLinks","sortedMediaLinks","cache","Array","from","entries","reduce","obj","_ref","key","val","contentType","get","Error","errorMessage","errorData","message","statusText","map","item","postLink","videoLinks","defaultLinks","shuffledLinks","reversedLinks","toLowerCase","startIndex","endIndex","newMediaUrls","slice","current","clear","uniqueMediaUrls","media","has","forEach","add","prevMediaUrls","showNotification","window","location","origin","setCookies","cookies","JSON","parse","cookie","document","name","value","domain","path","fetchTweetsFromList","method","body","stringify","alert","type","arguments","undefined","id","newNotification","prev","setTimeout","notification","showProgressNotification","count","isComplete","find","n","removeNotification","fetchLatestMedia","handleScrape","notificationId","split","result","linksAdded","latestMedia","existingUrls","uniqueNewMedia","addScrapeUrlToFile","scrapeSavedLinks","scrollToMedia","index","mediaElement","scrollIntoView","behavior","block","handleMediaClose","tagName","pause","mediaContainer","getElementById","classList","remove","querySelectorAll","button","style","zIndex","querySelector","display","handleClickOutside","event","_mediaRefs$current$fu","contains","target","closest","handleKeyPress","e","nextIndex","nextMedia","play","catch","prevIndex","prevMedia","lastMediaElementRef","node","disconnect","IntersectionObserver","some","entry","isIntersecting","prevPage","threshold","rootMargin","observe","addEventListener","overflow","removeEventListener","currentMedia","videoDuration","duration","timeoutId","clearTimeout","intervalId","setInterval","scrollBy","top","clearInterval","selectedMedia","useMemo","breakpointColumnsObj","default","handleImageError","link","every","mediaLink","el","savedFilter","getFilterFromCookie","match","checkLoginStatus","handleExport","mediaResponse","scrapeResponse","mediaData","scrapeData","isArray","links","urls","Object","values","zip","JSZip","file","content","generateAsync","URL","createObjectURL","a","createElement","href","download","appendChild","click","revokeObjectURL","removeChild","handleImport","files","reader","FileReader","onload","_ref2","validContent","readAsText","handleMediaLoad","_jsxs","children","_jsx","className","_Fragment","width","Masonry","breakpointCols","columnClassName","firstVideoLink","isVideo","endsWith","isRule34Video","embedUrl","replace","isLoaded","ref","onClick","handleMediaClick","src","frameBorder","allowFullScreen","loop","title","onLoad","controls","muted","onLoadedData","onError","code","keys","Number","handleVideoError","onLoadStart","alt","stopPropagation","open","handleSimilar","handleRemove","accept","onChange","total","reload","htmlFor","onKeyPress","listId","placeholder","newFilter","filterValue","onSubmit","preventDefault","required","test","checkPasswordRequirements","React"],"sourceRoot":""}