{"version":3,"file":"static/js/415.b00aa11e.chunk.js","mappings":"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","sources":["config.js","components/VideoList.js"],"sourcesContent":["// Dynamic configuration based on environment\n\n// Detect if we're running in development mode\nconst isDevelopment = process.env.NODE_ENV === 'development' || \n                      window.location.hostname === 'localhost' || \n                      window.location.hostname === '127.0.0.1';\n\n// Set API URL based on environment\nconst config = {\n  API_URL: process.env.NODE_ENV === 'production' \n    ? 'https://kupo-nuts.onrender.com'\n    : 'http://localhost:5000'\n};\n\nconsole.log('Running in', isDevelopment ? 'DEVELOPMENT' : 'PRODUCTION', 'mode');\nconsole.log('Using API URL:', config.API_URL);\n\nexport default config;\n","import React, { useState, useEffect, useRef, useCallback, useMemo } from 'react';\nimport Masonry from 'react-masonry-css';\nimport './VideoList.css';\nimport defaultLinks from './default-links.json';\nimport config from '../config'; // Import the config file\nimport io from 'socket.io-client';\n\nconst API_URL = config.API_URL;\nconst LOCAL_STORAGE_KEY = 'kupoNuts_mediaLinks'; // Add this constant for localStorage key\n\n// Add helper functions for localStorage\nconst saveToLocalStorage = (mediaLinks, storageKey = LOCAL_STORAGE_KEY) => {\n    try {\n        localStorage.setItem(storageKey, JSON.stringify(mediaLinks));\n    } catch (error) {\n        console.error('Error saving to localStorage:', error);\n    }\n};\n\nconst getFromLocalStorage = (storageKey = LOCAL_STORAGE_KEY) => {\n    try {\n        const data = localStorage.getItem(storageKey);\n        return data ? JSON.parse(data) : [];\n    } catch (error) {\n        console.error('Error reading from localStorage:', error);\n        return [];\n    }\n};\n\nconst addToLocalStorage = (mediaItem, storageKey = LOCAL_STORAGE_KEY) => {\n    try {\n        const currentLinks = getFromLocalStorage(storageKey);\n        // Check if item already exists to prevent duplicates\n        const exists = currentLinks.some(item => item.postLink === mediaItem.postLink);\n        if (!exists) {\n            currentLinks.push(mediaItem);\n            saveToLocalStorage(currentLinks, storageKey);\n        }\n        return currentLinks;\n    } catch (error) {\n        console.error('Error adding to localStorage:', error);\n        return [];\n    }\n};\n\nconst VideoList = () => {\n    const [mediaUrls, setMediaUrls] = useState([]);\n    const [currentPage, setCurrentPage] = useState(1);\n    const [fullscreenMedia, setFullscreenMedia] = useState(null);\n    const [loading, setLoading] = useState(false);\n    const [autoScroll, setAutoScroll] = useState(false);\n    const [filter, setFilter] = useState('random'); // Default to random\n    const [showSettings, setShowSettings] = useState(false);\n    const [notifications, setNotifications] = useState([]);\n    const [isClickable, setIsClickable] = useState(true);\n    const [loadedMedia, setLoadedMedia] = useState({});\n    const [randomSeed, setRandomSeed] = useState(Date.now());\n    const [tagFilter, setTagFilter] = useState(null);\n    const [contentFilter, setContentFilter] = useState('sfw'); // Default to 'sfw'\n    const [globalVolume, setGlobalVolume] = useState(0.1); // Add global volume state with default 10%\n    // eslint-disable-next-line no-unused-vars\n    const [socket, setSocket] = useState(null); // Add socket state here\n    const [searchQuery, setSearchQuery] = useState(''); // New unified search query\n    const guestId = useRef(localStorage.getItem('kupoguestid') || `guest-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`);\n    const [showDefaultLinks, setShowDefaultLinks] = useState(false); // Add state for showing default links\n    const [activeCollection, setActiveCollection] = useState('main'); // Add state for active collection\n    const [collections] = useState([\n        { id: 'main', name: 'Main', storageKey: LOCAL_STORAGE_KEY },\n        { id: 'sub', name: 'Sub', storageKey: 'kupoNuts_sub' },\n        { id: 'extra', name: 'Extra', storageKey: 'kupoNuts_extra' }\n    ]); // Add predefined collections\n    const [showMobileMenu, setShowMobileMenu] = useState(false); // Add state for mobile menu\n    const [isMobile, setIsMobile] = useState(false); // Add state to track mobile viewport\n    const prevScrollY = useRef(0); // Add ref to track previous scroll position\n    const scrollAnimation = useRef(null); // Add ref for scroll animation\n    const mediaRefs = useRef([]);\n    const mediaSet = useRef(new Set());\n    const observer = useRef();\n    const scrapeNotificationId = useRef(null);\n    const similarNotificationId = useRef(null); // Keep separate IDs for different operations\n    const tagSearchNotificationId = useRef(null);\n    const [showConfirmClear, setShowConfirmClear] = useState(false);\n    const [tagBlacklist, setTagBlacklist] = useState('');\n    const [scrollSpeed, setScrollSpeed] = useState(3); // Default scroll speed\n    // eslint-disable-next-line no-unused-vars\n    const [tagSearchQuery, setTagSearchQuery] = useState('');\n    // Konami Code state for hidden NSFW toggle\n    // eslint-disable-next-line no-unused-vars\n    const [konamiSequence, setKonamiSequence] = useState([]);\n    const konamiCode = useMemo(() => ['ArrowUp', 'ArrowUp', 'ArrowDown', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'ArrowLeft', 'ArrowRight', 'KeyB', 'KeyA'], []);\n\n    const initialMediaPerPage = 8;\n    const mediaPerPage = 16;\n\n    const shuffleArray = useCallback((array) => {\n        const newArray = [...array];\n        newArray.reverse();\n        const rand = seedrandom(randomSeed.toString());\n        for (let i = newArray.length - 1; i > 0; i--) {\n            const j = Math.floor(rand() * (i + 1));\n            [newArray[i], newArray[j]] = [newArray[j], newArray[i]];\n        }\n        newArray.reverse();\n        return newArray;\n    }, [randomSeed]);\n\n    const fetchConfig = {\n        credentials: 'include',\n    };\n\n    // Add a new helper function to filter media by tag\n    const filterMediaByTag = useCallback((mediaLinks, searchTerm) => {\n        if (!searchTerm) return mediaLinks;\n        \n        const lowercaseSearchTerm = searchTerm.toLowerCase();\n        return mediaLinks.filter(item => {\n            const tags = item[2];\n            \n            // Handle array format tags (legacy format)\n            if (Array.isArray(tags)) {\n                return tags.some(tag => tag.toLowerCase().includes(lowercaseSearchTerm));\n            }\n            \n            // Handle object format tags (current format)\n            return Object.values(tags).some(categoryTags => \n                Array.isArray(categoryTags) && categoryTags.some(tag => \n                    tag.toLowerCase().includes(lowercaseSearchTerm)\n                )\n            );\n        });\n    }, []);\n\n    const applyTagBlacklist = useCallback((media) => {\n        if (!tagBlacklist) return media;\n\n        const blacklist = tagBlacklist.split(',').map(tag => tag.trim().toLowerCase());\n\n        return media.filter(item => {\n            const tags = item[2];\n\n            if (!tags) return true;\n\n            const allTags = [];\n\n            if (Array.isArray(tags)) {\n                tags.forEach(tag => allTags.push(tag.toLowerCase()));\n            } else {\n                Object.values(tags).forEach(categoryTags => {\n                    if (Array.isArray(categoryTags)) {\n                        categoryTags.forEach(tag => allTags.push(tag.toLowerCase()));\n                    }\n                });\n            }\n\n            return !blacklist.some(blacklistedTag =>\n                allTags.some(tag => tag.includes(blacklistedTag))\n            );\n        });\n    }, [tagBlacklist]);\n\n    const applyContentFilter = useCallback((media) => {\n        // If content filter is set to NSFW, show all content\n        if (contentFilter === 'nsfw') return media;\n        \n        // If content filter is set to SFW, filter out NSFW content\n        return media.filter(item => {\n            const tags = item[2];\n            \n            if (!tags) return true; // Show content without tags\n            \n            const allTags = [];\n            \n            if (Array.isArray(tags)) {\n                tags.forEach(tag => allTags.push(tag.toLowerCase()));\n            } else {\n                Object.values(tags).forEach(categoryTags => {\n                    if (Array.isArray(categoryTags)) {\n                        categoryTags.forEach(tag => allTags.push(tag.toLowerCase()));\n                    }\n                });\n            }\n            \n            // Filter out content with 'nsfw' tag when in SFW mode\n            return !allTags.some(tag => tag.includes('nsfw'));\n        });\n    }, [contentFilter]);\n\n    const fetchMedia = useCallback(async (page, limit) => {\n        setLoading(true);\n        try {\n            let mediaLinks = [];\n            \n            // Always use localStorage based on active collection\n            const currentCollection = collections.find(c => c.id === activeCollection);\n            const storageKey = currentCollection?.storageKey || LOCAL_STORAGE_KEY;\n            const localStorageLinks = getFromLocalStorage(storageKey);\n            \n            if (localStorageLinks && localStorageLinks.length > 0) {\n                // Format localStorage data to match expected array format\n                mediaLinks = localStorageLinks.map(item => [\n                    item.postLink || '',\n                    item.videoLinks || [],\n                    item.tags || {}\n                ]);\n            }\n            \n            // Add default links when localStorage is empty or showDefaultLinks is enabled\n            if ((mediaLinks.length === 0 || showDefaultLinks) && defaultLinks?.length > 0) {\n                const defaultMediaLinks = defaultLinks.map(item => [item.postLink || '', item.videoLinks, item.tags || {}]);\n                mediaLinks = mediaLinks.length > 0 ? \n                    (showDefaultLinks ? [...mediaLinks, ...defaultMediaLinks] : mediaLinks) : \n                    defaultMediaLinks;\n            }\n\n            // Step 2: Apply tag filtering if needed\n            if (tagFilter) {\n                mediaLinks = filterMediaByTag(mediaLinks, tagFilter);\n            }\n\n            // Apply tag blacklist\n            mediaLinks = applyTagBlacklist(mediaLinks);\n\n            // Apply content filter (SFW/NSFW filtering)\n            mediaLinks = applyContentFilter(mediaLinks);\n\n            // Fallback: If show demo content is hidden, SFW mode is on, and no content remains after filtering,\n            // show default links as fallback to ensure user always has something to see\n            if (mediaLinks.length === 0 && !showDefaultLinks && contentFilter === 'sfw' && defaultLinks?.length > 0) {\n                const defaultMediaLinks = defaultLinks.map(item => [item.postLink || '', item.videoLinks, item.tags || {}]);\n                // Apply content filter to default links too (in case some default content is NSFW)\n                mediaLinks = applyContentFilter(defaultMediaLinks);\n            }\n\n            // Step 3: Apply sorting based on filter\n            const totalAvailableItems = mediaLinks.length;\n            const startIndex = (page - 1) * limit;\n\n            let sortedMediaLinks = [];\n\n            switch (filter.toLowerCase()) {\n                case 'newest': \n                    // For non-logged in users, keep local storage items first (in reverse order)\n                    // followed by default items (also in reverse order)\n                    sortedMediaLinks = [...mediaLinks].reverse();\n                    break;\n                case 'random':\n                    sortedMediaLinks = shuffleArray([...mediaLinks]);\n                    break;\n                case 'oldest':\n                    sortedMediaLinks = [...mediaLinks];\n                    break;\n                default:\n                    sortedMediaLinks = page % 2 === 0 \n                        ? [...mediaLinks].reverse() \n                        : shuffleArray([...mediaLinks]);\n                    break;\n            }\n\n            // Step 4: Paginate and update state\n            const endIndex = Math.min(startIndex + limit, totalAvailableItems);\n           \n            const pageMediaUrls = sortedMediaLinks.slice(startIndex, endIndex);\n\n            if (startIndex >= totalAvailableItems) {\n                console.log('Reached the end of media items, refreshing...');\n                return;\n            }\n\n            // Step 5: Update state with unique media items\n            if (page === 1) {\n                mediaSet.current.clear();\n                setMediaUrls(pageMediaUrls);\n            } else {\n                const uniqueMediaUrls = pageMediaUrls.filter(media => !mediaSet.current.has(media[1][0]));\n                uniqueMediaUrls.forEach(media => mediaSet.current.add(media[1][0]));\n                setMediaUrls(prevMediaUrls => [...prevMediaUrls, ...uniqueMediaUrls]);\n            }\n            \n        } catch (error) {\n            console.error('Error fetching media:', error);\n            \n            // Fallback to localStorage and defaults\n            const currentCollection = collections.find(c => c.id === activeCollection);\n            const storageKey = currentCollection?.storageKey || LOCAL_STORAGE_KEY;\n            const localStorageLinks = getFromLocalStorage(storageKey);\n            let mediaLinks = [];\n            \n            if (localStorageLinks && localStorageLinks.length > 0) {\n                mediaLinks = localStorageLinks.map(item => [\n                    item.postLink || '',\n                    item.videoLinks || [],\n                    item.tags || {},\n                    { isUserContent: true } // Mark as user content\n                ]);\n            }\n            \n            // Always show defaults in error cases if localStorage is empty\n            if (mediaLinks.length === 0 && defaultLinks?.length > 0) {\n                const defaultMediaLinks = defaultLinks.map(item => [\n                    item.postLink || '', \n                    item.videoLinks, \n                    item.tags || {},\n                    { isDefault: true } // Mark as default content\n                ]);\n                mediaLinks = defaultMediaLinks;\n            } else if (showDefaultLinks && defaultLinks?.length > 0) {\n                // Add default links when showDefaultLinks is enabled\n                const defaultMediaLinks = defaultLinks.map(item => [\n                    item.postLink || '', \n                    item.videoLinks, \n                    item.tags || {},\n                    { isDefault: true } // Mark as default content\n                ]);\n                mediaLinks = [...mediaLinks, ...defaultMediaLinks];\n            }\n            \n            if (mediaLinks.length > 0) {\n                // Apply filtering, sorting, and pagination similar to the main function\n                if (tagFilter) {\n                    mediaLinks = filterMediaByTag(mediaLinks, tagFilter);\n                }\n\n                mediaLinks = applyTagBlacklist(mediaLinks);\n                \n                // Apply content filter (SFW/NSFW filtering)\n                mediaLinks = applyContentFilter(mediaLinks);\n                \n                // Fallback: If show demo content is hidden, SFW mode is on, and no content remains after filtering,\n                // show default links as fallback to ensure user always has something to see\n                if (mediaLinks.length === 0 && !showDefaultLinks && contentFilter === 'sfw' && defaultLinks?.length > 0) {\n                    const defaultMediaLinks = defaultLinks.map(item => [\n                        item.postLink || '', \n                        item.videoLinks, \n                        item.tags || {},\n                        { isDefault: true } // Mark as default content\n                    ]);\n                    // Apply content filter to default links too (in case some default content is NSFW)\n                    mediaLinks = applyContentFilter(defaultMediaLinks);\n                }\n                \n                let sortedMediaLinks = [];\n\n                const userItems = mediaLinks.filter(item => item[3]?.isUserContent).reverse();\n                const defaultItems = mediaLinks.filter(item => item[3]?.isDefault).reverse();\n\n                switch (filter.toLowerCase()) {\n                    case 'newest':\n                        // Keep local storage items first (in reverse order)\n                        // followed by default items (also in reverse order)\n                        sortedMediaLinks = [...userItems, ...defaultItems];\n                        break;\n                    case 'random':\n                        sortedMediaLinks = shuffleArray([...mediaLinks]);\n                        break;\n                    case 'oldest':\n                        sortedMediaLinks = [...mediaLinks];\n                        break;\n                    default:\n                        sortedMediaLinks = shuffleArray([...mediaLinks]);\n                        break;\n                }\n                \n                const totalAvailableItems = sortedMediaLinks.length;\n                const startIndex = (page - 1) * limit;\n                const endIndex = Math.min(startIndex + limit, totalAvailableItems);\n                const pageMediaUrls = sortedMediaLinks.slice(startIndex, endIndex);\n                \n                if (startIndex >= totalAvailableItems) {\n                    console.log('Reached the end of media items, refreshing...');\n                    return;\n                }\n                \n                if (page === 1) {\n                    mediaSet.current.clear();\n                    setMediaUrls(pageMediaUrls);\n                } else {\n                    const uniqueMediaUrls = pageMediaUrls.filter(media => !mediaSet.current.has(media[1][0]));\n                    uniqueMediaUrls.forEach(media => mediaSet.current.add(media[1][0]));\n                    setMediaUrls(prevMediaUrls => [...prevMediaUrls, ...uniqueMediaUrls]);\n                }\n            }\n        } finally {\n            setLoading(false);\n        }\n    }, [filter, shuffleArray, tagFilter, showDefaultLinks, filterMediaByTag, applyTagBlacklist, applyContentFilter, activeCollection, collections, contentFilter]);\n\n    const setCookies = () => {\n        const cookies = JSON.parse(localStorage.getItem('cookies'));\n        if (cookies) {\n            cookies.forEach(cookie => {\n                document.cookie = `${cookie.name}=${cookie.value}; domain=${cookie.domain}; path=${cookie.path}`;\n            });\n        }\n    };\n\n    const showNotification = (message, type = 'info') => {\n        // Create a more unique ID using both timestamp and a random string\n        const id = `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`; \n        const newNotification = { id, message, type };\n        \n        setNotifications(prev => [...prev, newNotification]);\n        \n        // Remove this specific notification after 3 seconds\n        setTimeout(() => {\n            setNotifications(prev => prev.filter(notification => notification.id !== id));\n        }, 3000);\n    };\n\n    const removeNotification = (id) => {\n        setNotifications(prev => prev.filter(notification => notification.id !== id));\n    };\n\n    const showProgressNotification = (id, message, progress, isComplete) => {\n        setNotifications(prev => {\n            const existingNotificationIndex = prev.findIndex(n => n.id === id);\n\n            if (existingNotificationIndex !== -1) {\n                const updatedNotifications = [...prev];\n                updatedNotifications[existingNotificationIndex] = {\n                    ...updatedNotifications[existingNotificationIndex],\n                    message,\n                    progress,\n                    isComplete\n                };\n                return updatedNotifications;\n            } else {\n                return [...prev, { id, message, type: 'progress', progress, isComplete }];\n            }\n        });\n    };\n\n    const handleScrape = async (url = null) => {\n        const urlToScrape = url;\n\n        try {\n            const headers = {\n                'Content-Type': 'application/json',\n                'x-guest-id': guestId.current\n            };\n\n            console.log('Scraping URL:', urlToScrape);\n            console.log('Guest user');\n            \n            // Convert contentFilter string to numeric value for backend\n            const contentFilterValue = contentFilter === 'sfw' ? 0 : 1;\n            \n            const response = await fetch(`${API_URL}/api/scrape`, {\n                method: 'POST',\n                headers: headers,\n                ...fetchConfig,\n                body: JSON.stringify({ \n                    url: urlToScrape,\n                    contentType: contentFilterValue,\n                    socketId: socket?.id\n                }),\n            });\n            \n            if (!response.ok) {\n                throw new Error('Network response was not ok');\n            }\n            \n            // Results will come through WebSocket and be saved to browser\n            showNotification('Scraping started - results will be saved to your browser', 'info');\n            \n        } catch (error) {\n            console.error('Failed to scrape:', error);\n            showNotification(error.message || 'Failed to scrape. Please try again.', 'error');\n            removeNotification(scrapeNotificationId.current);\n        }\n    };\n\n    const handleRemove = async (postLink) => {\n        try {\n            // Get storage key for active collection\n            const currentCollection = collections.find(c => c.id === activeCollection);\n            const storageKey = currentCollection?.storageKey || LOCAL_STORAGE_KEY;\n            \n            // Remove from localStorage\n            const localStorageLinks = getFromLocalStorage(storageKey);\n            const filteredLinks = localStorageLinks.filter(item => item.postLink !== postLink);\n            saveToLocalStorage(filteredLinks, storageKey);\n\n            // Update UI state\n            setMediaUrls(prevMediaUrls => prevMediaUrls.filter(media => media[0] !== postLink));\n            \n            // Close fullscreen if this media is currently viewed\n            if (fullscreenMedia !== null && mediaUrls[fullscreenMedia]?.[0] === postLink) {\n                setFullscreenMedia(null);\n            }\n\n            showNotification('Media removed successfully', 'success');\n            \n        } catch (error) {\n            console.error('Failed to remove media:', error);\n            showNotification('Failed to remove media', 'error');\n        }\n    };\n\n    const scrapeSavedLinks = async () => {\n        try {\n            const response = await fetch(`${API_URL}/api/scrape-saved-links`, {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                ...fetchConfig\n            });\n            if (!response.ok) throw new Error('Network response was not ok');\n        } catch (error) {\n            alert('Failed to scrape media. Please try again later.');\n            showNotification('Failed to scrape media. Please try again later.', 'error');\n        }\n    };\n\n    // Updated handleSimilar function\n    const handleSimilar = async (postLink) => {\n\n        const headers = {\n            'Content-Type': 'application/json',\n            'x-guest-id': guestId.current\n        };\n\n        try {\n            // Convert contentFilter string to numeric value for backend\n            const contentFilterValue = contentFilter === 'sfw' ? 0 : 1;\n            \n            const response = await fetch(`${API_URL}/api/similar`, {\n                method: 'POST',\n                headers: headers,\n                ...fetchConfig,\n                body: JSON.stringify({ \n                    url: postLink,\n                    contentType: contentFilterValue,\n                    socketId: socket?.id\n                }),\n            });\n\n            if (!response.ok) {\n                const errorData = await response.json().catch(() => ({}));\n                throw new Error(errorData.message || 'Failed to find similar posts');\n            }\n            \n            // Show appropriate notification\n            showNotification('Similar search started - results will be saved to your browser', 'info');\n            \n        } catch (error) {\n            console.error('Failed to find similar:', error);\n            showNotification(error.message || 'Failed to find similar posts', 'error');\n            removeNotification(similarNotificationId.current);\n        }\n    };\n\n    const handleTagSearch = async (query) => {\n        if (!query || !query.trim()) {\n            showNotification('Please enter a tag to search', 'info');\n            return;\n        }\n        \n        let notificationId = tagSearchNotificationId.current;\n        if (!notificationId) {\n            notificationId = `tag_search-${Date.now()}-${Math.random().toString(36).substr(2, 5)}`;\n            tagSearchNotificationId.current = notificationId;\n        }\n        \n        try {\n            showProgressNotification(notificationId, 'Searching for tags...', 0, false);\n            \n            // Convert contentFilter string to numeric value\n            const contentFilterValue = contentFilter === 'sfw' ? 0 : 1;\n\n            const headers = {\n                'Content-Type': 'application/json',\n                'x-guest-id': guestId.current\n            };\n\n            console.log('Guest user');\n            \n            const response = await fetch(`${API_URL}/api/search-tags`, {\n                method: 'POST',\n                headers: headers,\n                ...fetchConfig,\n                body: JSON.stringify({ \n                    query: query,\n                    contentType: contentFilterValue,\n                    socketId: socket?.id\n                }),\n            });\n\n            if (!response.ok) {\n                throw new Error('Failed to search tags');\n            }\n            \n            // Show notification for guest users\n            showNotification('Tag search started - results will be saved to your browser', 'info');\n            \n        } catch (error) {\n            console.error('Failed to search tags:', error);\n            showNotification(error.message || 'Failed to search tags', 'error');\n        }\n    };\n\n    const scrollToMedia = useCallback((index) => {\n        const mediaElement = mediaRefs.current[index];\n        if (mediaElement) {\n            mediaElement.scrollIntoView({ behavior: 'smooth', block: 'center' });\n        }\n    }, []);\n\n    const handleMediaClick = useCallback((index) => {\n        if (!isClickable) return; // Prevent clicking if in cooldown\n        setFullscreenMedia(index);\n        console.log(\"HandleMediaClick was called\");\n        \n        // Pause all other videos first\n        mediaRefs.current.forEach((media, i) => {\n            if (media && i !== index && media.tagName === 'VIDEO') {\n                media.pause();\n                media.muted = true;\n            }\n        });\n\n        // Play the selected video and unmute it with a slight delay to ensure proper state\n        const selectedVideo = mediaRefs.current[index];\n        if (selectedVideo && selectedVideo.tagName === 'VIDEO') {\n            selectedVideo.muted = false;\n            selectedVideo.volume = globalVolume;\n            \n            // Use a timeout to ensure the video element is ready\n            setTimeout(() => {\n                selectedVideo.play().catch(err => {\n                    console.log('Autoplay prevented:', err);\n                    // Try to play again with user interaction context\n                    selectedVideo.muted = true;\n                    selectedVideo.play().then(() => {\n                        selectedVideo.muted = false;\n                    }).catch(secondErr => {\n                        console.log('Second autoplay attempt failed:', secondErr);\n                    });\n                });\n            }, 100);\n        }\n        \n        const mediaContainer = document.getElementById('media-container');\n        if (mediaContainer) {\n            mediaContainer.classList.add('fullscreen-active');\n        }\n        document.querySelectorAll('.postlink-icon, .close-icon, .remove-icon, .similar-icon, .tag, .tags-panel').forEach(button => {\n            button.style.zIndex = '1002';\n        });\n        scrollToMedia(index);\n    }, [isClickable, globalVolume, scrollToMedia]);\n\n    const handleMediaClose = useCallback(() => {\n        setFullscreenMedia(null);\n        setIsClickable(false); // Disable clicking\n       \n        // Resume playing only videos that are currently in view, but keep them muted\n        mediaRefs.current.forEach((media, index) => {\n            if (media && media.tagName === 'VIDEO') {\n                // Check if the video element is in the viewport\n                const rect = media.getBoundingClientRect();\n                const isInViewport = (\n                    rect.top >= 0 &&\n                    rect.left >= 0 &&\n                    rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&\n                    rect.right <= (window.innerWidth || document.documentElement.clientWidth)\n                );\n                \n                if (isInViewport) {\n                    media.muted = true;\n                    media.volume = globalVolume;\n                    media.play().catch(err => {\n                        console.log('Autoplay prevented:', err);\n                    });\n                } else {\n                    // Pause videos that are not in view\n                    media.pause();\n                }\n            }\n        });\n\n        const mediaContainer = document.getElementById('media-container');\n        if (mediaContainer) {\n            mediaContainer.classList.remove('fullscreen-active');\n        }\n        document.querySelectorAll('.postlink-icon, .close-icon, .remove-icon').forEach(button => {\n            button.style.zIndex = '';\n        });\n        \n        // Enable clicking after 500ms (0.5 seconds)\n        setTimeout(() => {\n            setIsClickable(true);\n        }, 100);\n    }, [globalVolume]);\n\n    const handleClickOutside = useCallback((event) => {\n        if (fullscreenMedia !== null && !mediaRefs.current[fullscreenMedia]?.contains(event.target) && !event.target.closest('.postlink-icon, .close-icon, .remove-icon, .scrape-button, .auto-scroll-button, .similar-icon, .tag, .tags-panel')) {\n            handleMediaClose();\n        }\n        \n        // Close mobile menu when clicking outside\n        if (isMobile && showMobileMenu && !event.target.closest('.mobile-menu-container, .mobile-menu-button, .mobile-dropdown-menu')) {\n            setShowMobileMenu(false);\n        }\n    }, [fullscreenMedia, isMobile, showMobileMenu, handleMediaClose]);\n\n    const handleKeyPress = useCallback((e) => {\n        if (fullscreenMedia === null) return;\n\n        if (e.key === 'ArrowDown') {\n            const nextIndex = (fullscreenMedia + 1) % mediaUrls.length;\n            \n            // Pause current video\n            const currentMedia = mediaRefs.current[fullscreenMedia];\n            if (currentMedia && currentMedia.tagName === 'VIDEO') {\n                currentMedia.pause();\n                currentMedia.muted = true;\n            }\n            \n            setFullscreenMedia(nextIndex);\n            \n            // Play next video\n            const nextMedia = mediaRefs.current[nextIndex];\n            if (nextMedia && nextMedia.tagName === 'VIDEO') {\n                nextMedia.muted = false;\n                nextMedia.volume = globalVolume;\n                setTimeout(() => {\n                    nextMedia.play().catch(err => {\n                        console.log('Autoplay prevented:', err);\n                        // Fallback: try muted first\n                        nextMedia.muted = true;\n                        nextMedia.play().then(() => {\n                            nextMedia.muted = false;\n                        }).catch(() => {});\n                    });\n                }, 100);\n            }\n            scrollToMedia(nextIndex);\n        } else if (e.key === 'ArrowUp') {\n            const prevIndex = (fullscreenMedia - 1 + mediaUrls.length) % mediaUrls.length;\n            \n            // Pause current video\n            const currentMedia = mediaRefs.current[fullscreenMedia];\n            if (currentMedia && currentMedia.tagName === 'VIDEO') {\n                currentMedia.pause();\n                currentMedia.muted = true;\n            }\n            \n            setFullscreenMedia(prevIndex);\n            \n            // Play previous video\n            const prevMedia = mediaRefs.current[prevIndex];\n            if (prevMedia && prevMedia.tagName === 'VIDEO') {\n                prevMedia.muted = false;\n                prevMedia.volume = globalVolume;\n                setTimeout(() => {\n                    prevMedia.play().catch(err => {\n                        console.log('Autoplay prevented:', err);\n                        // Fallback: try muted first\n                        prevMedia.muted = true;\n                        prevMedia.play().then(() => {\n                            prevMedia.muted = false;\n                        }).catch(() => {});\n                    });\n                }, 100);\n            }\n            scrollToMedia(prevIndex);\n        }\n    }, [fullscreenMedia, mediaUrls.length, scrollToMedia, globalVolume]);\n\n\n\n    // Debounced function to handle page increment\n    const debouncedPageIncrement = useCallback(() => {\n        const timeoutId = setTimeout(() => {\n            setCurrentPage(prevPage => prevPage + 1);\n        }, 300);\n        return () => clearTimeout(timeoutId);\n    }, []);\n\n    const lastMediaElementRef = useCallback(node => {\n        if (!node) return;\n        \n        if (observer.current) observer.current.disconnect();\n        observer.current = new IntersectionObserver(entries => {\n            if (entries.some(entry => entry.isIntersecting)) {\n               debouncedPageIncrement();\n            }\n        }, { \n            threshold: 0.1,\n            rootMargin: autoScroll ? '300px' : '100px' // Larger margin during auto-scroll\n        });\n                           \n        const lastColumnItems = document.querySelectorAll('.masonry-grid_column > div:last-child');\n        lastColumnItems.forEach(item => {\n            observer.current.observe(item);\n        });\n        \n        // Also observe the provided node\n        observer.current.observe(node);\n    }, [autoScroll, debouncedPageIncrement]); // Add debouncedPageIncrement dependency\n\n    // Handle window resize for responsive behavior\n    useEffect(() => {\n        const handleResize = () => {\n            const isMobileView = window.innerWidth <= 700; // Adjust breakpoint as needed\n            setIsMobile(isMobileView);\n            if (!isMobileView) {\n                setShowMobileMenu(false); // Close mobile menu when switching to desktop\n            }\n        };\n\n        // Set initial state\n        handleResize();\n\n        // Add event listener\n        window.addEventListener('resize', handleResize);\n\n        return () => {\n            window.removeEventListener('resize', handleResize);\n        };\n    }, []);\n\n    // Konami Code detection for hidden NSFW toggle\n    useEffect(() => {\n        const handleKonamiKeyPress = (e) => {\n            // Only track konami when not in fullscreen to avoid conflicts\n            if (fullscreenMedia !== null) return;\n            // Ignore if typing in input fields\n            if (e.target.tagName === 'INPUT' || e.target.tagName === 'TEXTAREA') return;\n            \n            setKonamiSequence(prev => {\n                const newSequence = [...prev, e.code].slice(-konamiCode.length);\n                \n                // Check if sequence matches konami code\n                if (newSequence.length === konamiCode.length && \n                    newSequence.every((key, index) => key === konamiCode[index])) {\n                    const newFilter = contentFilter === 'sfw' ? 'nsfw' : 'sfw';\n                    setContentFilter(newFilter);\n                    saveContentFilterPreference(newFilter);\n                    showNotification(`🎮 Konami activated! Content: ${newFilter.toUpperCase()}`, 'success');\n                    return []; // Reset sequence\n                }\n                \n                return newSequence;\n            });\n        };\n\n        document.addEventListener('keydown', handleKonamiKeyPress);\n        return () => document.removeEventListener('keydown', handleKonamiKeyPress);\n    }, [fullscreenMedia, contentFilter, konamiCode]);\n\n    useEffect(() => {\n        setCurrentPage(1);\n        setMediaUrls([]);\n        fetchMedia(1, initialMediaPerPage);\n    }, [filter, tagFilter, tagBlacklist, contentFilter, fetchMedia]);\n\n    useEffect(() => {\n        fetchMedia(currentPage, mediaPerPage);\n    }, [currentPage, fetchMedia]);\n\n    useEffect(() => {\n        document.addEventListener('mousedown', handleClickOutside);\n        document.addEventListener('keydown', handleKeyPress);\n        document.body.style.overflow = fullscreenMedia !== null ? 'hidden' : 'auto';\n        return () => {\n            document.removeEventListener('mousedown', handleClickOutside);\n            document.removeEventListener('keydown', handleKeyPress);\n            document.body.style.overflow = 'auto';\n        };\n    }, [fullscreenMedia, handleKeyPress, handleClickOutside]);\n\n    useEffect(() => {\n        if (autoScroll && fullscreenMedia !== null) {\n            const currentMedia = mediaRefs.current[fullscreenMedia];\n            const videoDuration = currentMedia && currentMedia.tagName === 'VIDEO' ? currentMedia.duration * 1000 : 10000;\n            const timeoutId = setTimeout(() => {\n                const nextIndex = (fullscreenMedia + 1) % mediaUrls.length;\n                \n                // Pause current video\n                if (currentMedia && currentMedia.tagName === 'VIDEO') {\n                    currentMedia.pause();\n                    currentMedia.muted = true;\n                }\n                \n                setFullscreenMedia(nextIndex);\n                \n                // Play next video\n                const nextMedia = mediaRefs.current[nextIndex];\n                if (nextMedia && nextMedia.tagName === 'VIDEO') {\n                    nextMedia.muted = false;\n                    nextMedia.volume = globalVolume;\n                    setTimeout(() => {\n                        nextMedia.play().catch(err => {\n                            console.log('Auto-scroll autoplay prevented:', err);\n                            // Fallback: try muted first\n                            nextMedia.muted = true;\n                            nextMedia.play().then(() => {\n                                nextMedia.muted = false;\n                            }).catch(() => {});\n                        });\n                    }, 100);\n                }\n            }, videoDuration <= 1 ? videoDuration * 5 : videoDuration);\n            return () => clearTimeout(timeoutId);\n        }\n    }, [fullscreenMedia, mediaUrls, autoScroll, globalVolume]);\n\n    useEffect(() => {\n        if (autoScroll && fullscreenMedia === null && !loading) {\n            // Use CSS scroll-behavior for smooth scrolling\n            document.documentElement.style.scrollBehavior = 'auto';\n            \n            // Calculate scroll distance based on viewport height\n            const scrollDistance = Math.max(1, scrollSpeed * 1);\n            \n            const smoothScroll = () => {\n                // Get current scroll position\n                const currentScroll = window.pageYOffset;\n                const maxScroll = document.documentElement.scrollHeight - window.innerHeight;\n                \n                // Check if we've reached the bottom\n                if (currentScroll >= maxScroll - 10) {\n                    // Reached bottom, you could implement wrap-around or stop here\n                    return;\n                }\n                \n                // Use smooth scrollTo instead of scrollBy\n                window.scrollTo({\n                    top: currentScroll + scrollDistance,\n                    behavior: 'auto'\n                });\n                \n                scrollAnimation.current = requestAnimationFrame(smoothScroll);\n            };\n            \n            // Start with a small delay to prevent immediate scrolling\n            const timeoutId = setTimeout(() => {\n                scrollAnimation.current = requestAnimationFrame(smoothScroll);\n            }, 100);\n            \n            return () => {\n                clearTimeout(timeoutId);\n                if (scrollAnimation.current) {\n                    cancelAnimationFrame(scrollAnimation.current);\n                }\n                // Reset scroll behavior\n                document.documentElement.style.scrollBehavior = '';\n            };\n        }\n    }, [autoScroll, fullscreenMedia, scrollSpeed, loading]);\n\n    useEffect(() => {\n        setRandomSeed(Date.now());\n    }, [filter]);\n\n    useEffect(() => {\n        const script = document.createElement('script');\n        script.src = 'https://cdnjs.cloudflare.com/ajax/libs/seedrandom/3.0.5/seedrandom.min.js';\n        script.async = true;\n        document.body.appendChild(script);\n\n        return () => {\n            document.body.removeChild(script);\n        };\n    }, []);\n\n    const seedrandom = (seed) => {\n        if (window.Math.seedrandom) {\n            return new window.Math.seedrandom(seed);\n        }\n        return () => Math.random();\n    };\n\n    const selectedMedia = useMemo(() => {\n        const startIndex = (currentPage - 1) * mediaPerPage;\n        return mediaUrls.slice(0, startIndex + (2 * mediaPerPage));\n    }, [currentPage, mediaUrls, mediaPerPage]);\n\n    const handleIconClick = (url) => window.open(url, '_blank');\n\n    const handleScroll = useCallback(() => {\n        const currentScrollY = window.scrollY;\n        \n        if (currentScrollY < 50) {\n            prevScrollY.current = currentScrollY;\n            return;\n        }\n        \n        prevScrollY.current = currentScrollY;\n    }, []);\n\n    useEffect(() => {\n        let scrollTimeout;\n        \n        const onScroll = () => {\n            if (scrollTimeout) return;\n            scrollTimeout = setTimeout(() => {\n                handleScroll();\n                scrollTimeout = null;\n            }, 200);\n        };\n        \n        window.addEventListener('scroll', onScroll);\n        return () => window.removeEventListener('scroll', onScroll);\n    }, [handleScroll]);\n\n    const breakpointColumnsObj = useMemo(() => ({\n        default: 4,\n        1100: 3,\n        700: 2,\n        500: 1\n    }), []);\n\n    const handleImageError = (e, link, index) => {\n        console.error('Image failed to load:', e);\n        e.target.style.display = 'none'; // Hide the broken image\n        \n        // If in fullscreen and all media in this item failed to display, move to next\n        if (fullscreenMedia === index) {\n            const mediaItem = mediaUrls[index];\n            const allMediaFailed = mediaItem[1].every(mediaLink => {\n                const mediaElement = Array.from(document.querySelectorAll(`img[src=\"${mediaLink}\"], video[src=\"${mediaLink}\"]`));\n                return mediaElement.every(el => el.style.display === 'none');\n            });\n            \n            if (allMediaFailed) {\n                const nextIndex = (index + 1) % mediaUrls.length;\n                setFullscreenMedia(nextIndex);\n                const nextMedia = mediaRefs.current[nextIndex];\n                if (nextMedia && nextMedia.tagName === 'VIDEO') {\n                    nextMedia.play().catch(() => {});\n                }\n            }\n        }\n    };\n\n    const handleVideoError = async (e) => {\n        console.error('Video failed to load:', e);\n        if (e.target.error.code === 4) { // 404 error\n            e.target.style.display = 'none'; // Hide the broken video\n            \n            // Get the index from the video element's reference in mediaRefs\n            const index = Object.keys(mediaRefs.current).find(key => \n                mediaRefs.current[key] === e.target\n            );\n            \n            if (fullscreenMedia === Number(index)) {\n                const nextIndex = (Number(index) + 1) % mediaUrls.length;\n                setFullscreenMedia(nextIndex);\n                const nextMedia = mediaRefs.current[nextIndex];\n                if (nextMedia && nextMedia.tagName === 'VIDEO') {\n                    nextMedia.play().catch(() => {});\n                }\n            }\n        }\n    };\n\n    // Add this function to handle saving filter preference\n    const saveFilterPreference = (filterValue) => {\n        document.cookie = `preferred_filter=${filterValue}; max-age=31536000; path=/`; // Expires in 1 year\n    };\n\n    // Add this function to get filter from cookie\n    const getFilterFromCookie = () => {\n        const match = document.cookie.match(/preferred_filter=([^;]+)/);\n        return match ? match[1] : 'default';\n    };\n\n    const saveScrollSpeedPreference = (speed) => {\n        document.cookie = `preferred_scroll_speed=${speed}; max-age=31536000; path=/`;\n    };\n\n    const getScrollSpeedFromCookie = () => {\n        const match = document.cookie.match(/preferred_scroll_speed=([^;]+)/);\n        return match ? parseFloat(match[1]) : 1;\n    };\n\n    const saveVolumePreference = (volume) => {\n        document.cookie = `preferred_volume=${volume}; max-age=31536000; path=/`;\n    };\n\n    const saveShowDefaultLinksPreference = (show) => {\n        document.cookie = `show_default_links=${show ? '1' : '0'}; max-age=31536000; path=/`;\n    };\n\n    const getShowDefaultLinksFromCookie = () => {\n        const match = document.cookie.match(/show_default_links=([^;]+)/);\n        return match ? match[1] === '1' : false;\n    };\n\n    // Add new functions for content filter preference\n    const saveContentFilterPreference = (filter) => {\n        document.cookie = `content_filter=${filter}; max-age=31536000; path=/`;\n    };\n\n    const getContentFilterFromCookie = () => {\n        const match = document.cookie.match(/content_filter=([^;]+)/);\n        return match ? match[1] : 'sfw';\n    };\n\n    // Add new functions for tag blacklist preference\n    const saveTagBlacklistPreference = (blacklist) => {\n        document.cookie = `tag_blacklist=${encodeURIComponent(blacklist)}; max-age=31536000; path=/`;\n    };\n\n    const getTagBlacklistFromCookie = () => {\n        const match = document.cookie.match(/tag_blacklist=([^;]+)/);\n        return match ? decodeURIComponent(match[1]) : '';\n    };\n\n    // Add new functions for auto scroll preference\n    const saveAutoScrollPreference = (autoScroll) => {\n        document.cookie = `auto_scroll=${autoScroll ? '1' : '0'}; max-age=31536000; path=/`;\n    };\n\n    const getAutoScrollFromCookie = () => {\n        const match = document.cookie.match(/auto_scroll=([^;]+)/);\n        return match ? match[1] === '1' : false;\n    };\n\n    const handleFilterChange = (newFilter) => {\n        setFilter(newFilter);\n        saveFilterPreference(newFilter);\n        setRandomSeed(Date.now()); // Ensure random seed is updated when filter changes\n        \n        // Reset pagination and reload content\n        setCurrentPage(1);\n        setMediaUrls([]);\n        // Don't call fetchMedia here to prevent recursion in useEffect dependencies\n    };\n\n    const loadPreferences = useCallback(() => {\n        // Load preferences from cookies\n        setScrollSpeed(getScrollSpeedFromCookie());\n        setShowDefaultLinks(getShowDefaultLinksFromCookie());\n        setContentFilter(getContentFilterFromCookie());\n        setAutoScroll(getAutoScrollFromCookie());\n        setTagBlacklist(getTagBlacklistFromCookie());\n        setFilter(getFilterFromCookie() || 'random');\n    }, []);\n\n    useEffect(() => {\n        // Load all saved preferences on component mount\n        const savedTagBlacklist = getTagBlacklistFromCookie();\n        setTagBlacklist(savedTagBlacklist);\n        \n        const savedShowDefaultLinks = getShowDefaultLinksFromCookie();\n        setShowDefaultLinks(savedShowDefaultLinks);\n        \n        const savedContentFilter = getContentFilterFromCookie();\n        setContentFilter(savedContentFilter);\n        \n        const savedActiveCollection = getActiveCollectionFromCookie();\n        setActiveCollection(savedActiveCollection);\n    }, []);\n\n    useEffect(() => {\n        Object.values(mediaRefs.current).forEach(ref => {\n            if (ref && ref.tagName === 'VIDEO') {\n                ref.volume = globalVolume;\n            }\n        });\n    }, [globalVolume]);\n\n    const handleExport = async () => {\n        try {\n            // Export the active collection from localStorage\n            const currentCollection = collections.find(c => c.id === activeCollection);\n            const storageKey = currentCollection?.storageKey || LOCAL_STORAGE_KEY;\n            const localData = getFromLocalStorage(storageKey);\n            \n            if (localData && localData.length > 0) {\n                const dataStr = JSON.stringify(localData, null, 2);\n                const dataBlob = new Blob([dataStr], { type: 'application/json' });\n                const url = URL.createObjectURL(dataBlob);\n                const a = document.createElement('a');\n                a.href = url;\n                a.download = `kupo-nuts-${currentCollection.id}-collection.json`;\n                document.body.appendChild(a);\n                a.click();\n                document.body.removeChild(a);\n                URL.revokeObjectURL(url);\n                showNotification(`${currentCollection.name} collection exported successfully`, 'success');\n            } else {\n                showNotification(`No items in ${currentCollection.name} collection to export`, 'info');\n            }\n        } catch (error) {\n            console.error('Export error:', error);\n            showNotification(error.message || 'Failed to export collection', 'error');\n        }\n    };\n\n    const handleImport = async (event) => {\n        try {\n            const file = event.target.files[0];\n            if (!file) return;\n\n            const reader = new FileReader();\n            reader.onload = async (e) => {\n                try {\n                    let content = JSON.parse(e.target.result);\n                    \n                    // Convert old format if necessary\n                    if (!Array.isArray(content)) {\n                        content = Object.entries(content).map(([postLink, videoLinks]) => ({\n                            postLink,\n                            videoLinks: Array.isArray(videoLinks) ? videoLinks : [videoLinks]\n                        }));\n                    }\n\n                    // Validate content structure\n                    const validContent = content.filter(item => {\n                        return item && \n                               typeof item === 'object' && \n                               typeof item.postLink === 'string' && \n                               (Array.isArray(item.videoLinks) || typeof item.videoLinks === 'string');\n                    });\n\n                    if (validContent.length === 0) {\n                        throw new Error('No valid media links found in file');\n                    }\n\n                    // Import to localStorage using active collection\n                    const currentCollection = collections.find(c => c.id === activeCollection);\n                    const storageKey = currentCollection?.storageKey || LOCAL_STORAGE_KEY;\n                    saveToLocalStorage(validContent, storageKey);\n                    showNotification(`Successfully imported ${validContent.length} links to ${currentCollection.name} collection`, 'success');\n                    \n                    // Refresh the display\n                    setCurrentPage(1);\n                    setMediaUrls([]);\n                    await fetchMedia(1, initialMediaPerPage);\n                    \n                } catch (error) {\n                    console.error('Import error:', error);\n                    showNotification(error.message || 'Invalid file format', 'error');\n                }\n            };\n            reader.readAsText(file);\n        } catch (error) {\n            console.error('File reading error:', error);\n            showNotification('Failed to read import file', 'error');\n        }\n        // Reset file input\n        event.target.value = '';\n    };\n\n\n\n    // Add function to mark media as loaded\n    const handleMediaLoad = (index) => {\n        setLoadedMedia(prev => ({\n            ...prev,\n            [index]: true\n        }));\n    };\n\n    // Handle tag click for filtering\n    const handleTagClick = (tag, e) => {\n        e.stopPropagation(); // Prevent triggering the media click\n        \n        if (tagFilter === tag) {\n            // If clicking the same tag again, clear the filter\n            setTagFilter(null);\n        } else {\n            // Set the new tag filter (replacing any existing filter)\n            const query = tag; // Use the tag directly\n            setTagSearchQuery(query);\n            setTagFilter(query);\n            handleTagSearch(query);\n        }\n        \n        // Close fullscreen view when setting a tag filter\n        if (fullscreenMedia !== null) {\n            handleMediaClose();\n        }\n        \n        // Reset to page 1 when changing filters\n        setCurrentPage(1);\n        setMediaUrls([]);\n        \n        // Scroll to top when filtering or clearing tags\n        window.scrollTo({ top: 0, behavior: 'smooth' });\n    };\n\n    // Handle adding tag to current filter\n    const handleAddTagToFilter = (tag, e) => {\n        e.stopPropagation(); // Prevent triggering the media click\n        \n        if (!tagFilter) {\n            // If no current filter, just set this tag\n            handleTagClick(tag, e);\n        } else if (!tagFilter.includes(tag)) {\n            // Only add if tag isn't already in filter\n            const combinedFilter = `${tagFilter} + ${tag}`;\n            setTagSearchQuery(combinedFilter);\n            setTagFilter(combinedFilter);\n            handleTagSearch(combinedFilter);\n            \n            // Reset to page 1 when changing filters\n            setCurrentPage(1);\n            setMediaUrls([]);\n            \n            // Scroll to top when adding tags\n            window.scrollTo({ top: 0, behavior: 'smooth' });\n        }\n    };\n\n    // Add a component for the tags panel that supports categorized tags\n    const TagsPanel = ({ tags }) => {\n        // Handle the case where tags is null or empty\n        if (!tags) return <div className=\"tags-panel\"><div className=\"tags-header\">No tags available</div></div>;\n        \n        // Convert old format (array) to new format (object with categories) if needed\n        const categorizedTags = Array.isArray(tags) ? { general: tags } : tags;\n        \n        // Check if we have any tags in any category\n        const hasTags = Object.values(categorizedTags).some(categoryTags => \n            Array.isArray(categoryTags) && categoryTags.length > 0\n        );\n        \n        if (!hasTags) return <div className=\"tags-panel\"><div className=\"tags-header\">No tags available</div></div>;\n        \n        // Define category display order and labels\n        const categories = [\n            { key: 'author', label: 'Artists' },\n            { key: 'copyright', label: 'Copyright' },\n            { key: 'character', label: 'Characters' },\n            { key: 'general', label: 'General' }\n        ];\n        \n        const addTagToBlacklist = (tag, e) => {\n            e.stopPropagation(); // Prevent triggering the media click\n            \n            // Get current blacklist and add the new tag\n            let currentBlacklist = tagBlacklist ? tagBlacklist.split(',').map(t => t.trim()) : [];\n            // Make sure we don't add duplicates\n            if (!currentBlacklist.includes(tag)) {\n                currentBlacklist.push(tag);\n                const newBlacklist = currentBlacklist.join(', ');\n                setTagBlacklist(newBlacklist);\n                saveTagBlacklistPreference(newBlacklist);\n                showNotification(`Added \"${tag}\" to blacklist`, 'info');\n            } else {\n                showNotification(`\"${tag}\" is already in blacklist`, 'info');\n            }\n        };\n        \n        return (\n            <div className=\"tags-panel\">\n                <div className=\"tags-header\">\n                    Tags\n                </div>\n                \n                {categories.map(category => {\n                    const categoryTags = categorizedTags[category.key];\n                    if (!categoryTags || categoryTags.length === 0) return null;\n                    \n                    return (\n                        <div key={category.key} className=\"tag-category\">\n                            <h3 className=\"tag-category-header\">{category.label}</h3>\n                            <div className=\"tags-list\">\n                                {categoryTags.map((tag, idx) => (\n                                    <div \n                                        key={`${category.key}-${idx}`}\n                                        className={`tag-container`}\n                                    >\n                                        <span \n                                            className={`tag tag-${category.key} ${tagFilter === tag ? 'active' : ''}`}\n                                            onClick={(e) => handleTagClick(tag, e)}\n                                        >\n                                            {tag}\n                                        </span>\n                                        <div className=\"tag-actions\">\n                                            <button \n                                                className=\"tag-action tag-action-plus\" \n                                                onClick={(e) => handleAddTagToFilter(tag, e)}\n                                                title=\"Filter by this tag\"\n                                            >\n                                                <i className=\"fas fa-plus\"></i>\n                                            </button>\n                                            <button \n                                                className=\"tag-action tag-action-minus\" \n                                                onClick={(e) => addTagToBlacklist(tag, e)}\n                                                title=\"Add to blacklist\"\n                                            >\n                                                <i className=\"fas fa-minus\"></i>\n                                            </button>\n                                        </div>\n                                    </div>\n                                ))}\n                            </div>\n                        </div>\n                    );\n                })}\n            </div>\n        );\n    };\n\n    useEffect(() => {\n        // Store the guest ID in localStorage for persistence\n        localStorage.setItem('kupoguestid', guestId.current);\n        \n        // Load preferences on component mount\n        loadPreferences();\n        \n        const setupSocket = () => {\n            const newSocket = io(API_URL, {\n                withCredentials: true,\n                transports: ['websocket', 'polling'],\n                reconnection: true,\n                reconnectionAttempts: 10,\n                reconnectionDelay: 1000,\n                reconnectionDelayMax: 5000,\n                timeout: 20000\n            });\n            \n            newSocket.on('connect', () => {\n                console.log('Connected');\n                // Always authenticate as a guest\n                newSocket.emit('authenticate', { isGuest: true, guestId: guestId.current });\n            });\n            \n            const handleProgressEvent = (data, type) => {\n                \n                let notificationIdRef;\n                switch (type) {\n                    case 'scrape':\n                        notificationIdRef = scrapeNotificationId;\n                        break;\n                    case 'similar':\n                        notificationIdRef = similarNotificationId;\n                        break;\n                    case 'tag_search':\n                        notificationIdRef = tagSearchNotificationId;\n                        break;\n                    default:\n                        notificationIdRef = scrapeNotificationId;\n                }\n                \n                if (!notificationIdRef.current) {\n                    // Create a more unique ID for progress notifications\n                    notificationIdRef.current = `${type}-${Date.now()}-${Math.random().toString(36).substr(2, 5)}`;\n                }\n                \n                setNotifications(prevNotifications => {\n                    const currentNotification = prevNotifications.find(n => n.id === notificationIdRef.current);\n                    \n                    const totalLinksAdded = currentNotification?.linksAdded || 0;\n                    const newLinksCount = data.newItems?.length || 0;\n                    \n                    const updatedLinksAdded = data.count !== undefined ? \n                        data.count :\n                        (totalLinksAdded + newLinksCount);\n                    \n                    const typeLabel = type.split('_')\n                        .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n                        .join(' ');\n                    \n                    let linkCountMessage;\n                    if (data.isComplete) {\n                        linkCountMessage = `${typeLabel}: ${updatedLinksAdded} links found`;\n                    } else if (updatedLinksAdded > 0) {\n                        linkCountMessage = `${typeLabel}: ${updatedLinksAdded} links found so far`;\n                    } else {\n                        linkCountMessage = `${typeLabel}: ${data.message || 'Processing...'}`;\n                    }\n                    \n                    const updated = currentNotification \n                        ? prevNotifications.map(n => n.id === notificationIdRef.current ? {\n                            ...n,\n                            message: linkCountMessage,\n                            count: data.count !== undefined ? data.count : n.count || 0,\n                            isComplete: data.isComplete,\n                            linksAdded: updatedLinksAdded\n                        } : n)\n                        : [...prevNotifications, {\n                            id: notificationIdRef.current,\n                            message: linkCountMessage,\n                            type: 'progress',\n                            count: data.count || 0,\n                            isComplete: data.isComplete,\n                            linksAdded: updatedLinksAdded\n                        }];\n                    \n                    return updated;\n                });\n                \n                if (data.isComplete) {\n                    setTimeout(() => {\n                        const currentId = notificationIdRef.current;\n                        notificationIdRef.current = null;\n                        \n                        \n                        setNotifications(prev => prev.filter(n => n.id !== currentId));\n                    }, 3000);\n                }\n                \n                if (data.newItems && data.newItems.length > 0) {\n                    try {\n                        setMediaUrls(prevMediaUrls => {\n                            let formattedItems = data.newItems.map(item => [\n                                item.postLink || '',\n                                item.videoLinks || [],\n                                item.tags || {}\n                            ]);\n                            \n                            // Add to localStorage\n                            const currentCollection = collections.find(c => c.id === activeCollection);\n                            const storageKey = currentCollection?.storageKey || LOCAL_STORAGE_KEY;\n                            \n                            data.newItems.forEach(item => {\n                                // Use the active collection's storage key\n                                addToLocalStorage(item, storageKey);\n                            });\n\n                            return [...prevMediaUrls, ...formattedItems];\n                        });\n                        \n                    } catch (error) {\n                        console.error(`Error processing new ${type} items:`, error);\n                    }\n                }\n            };\n            \n            newSocket.on('scrape_progress', (data) => handleProgressEvent(data, 'scrape'));\n            newSocket.on('similar_progress', (data) => handleProgressEvent(data, 'similar'));\n            newSocket.on('tag_search_progress', (data) => handleProgressEvent(data, 'tag_search'));\n            \n            newSocket.on('error', (error) => {\n                console.error('WebSocket error:', error);\n                showNotification('WebSocket error. Some features may be affected.', 'error');\n            });\n\n            newSocket.on('reconnect', () => {\n                // Always authenticate as guest on reconnect\n                newSocket.emit('authenticate', { isGuest: true, guestId: guestId.current });\n                showNotification('WebSocket reconnected', 'success');\n            });\n            \n            newSocket.on('reconnect_error', (error) => {\n                console.error('WebSocket reconnect error:', error);\n                showNotification('Failed to reconnect WebSocket', 'error');\n            });\n            \n            return newSocket;\n        };\n        \n        // Create socket connection\n        const newSocket = setupSocket();\n        setSocket(newSocket);\n        \n        return () => {\n            if (newSocket) {\n                newSocket.disconnect();\n            }\n        };\n        \n    }, [loadPreferences, activeCollection, collections]); // Removed API_URL dependency\n\n    const handleSettingsOpen = () => {\n        setShowSettings(true);\n    };\n\n    const handleClearCollection = () => {\n        setShowConfirmClear(true);\n    };\n\n    const confirmClearCollection = () => {\n        try {\n            // Clear from localStorage for the active collection\n            const currentCollection = collections.find(c => c.id === activeCollection);\n            const storageKey = currentCollection?.storageKey || LOCAL_STORAGE_KEY;\n            localStorage.removeItem(storageKey);\n            setMediaUrls([]);\n            showNotification(`${currentCollection.name} collection cleared`, 'success');\n            setShowConfirmClear(false);\n        } catch (error) {\n            console.error('Error clearing collection:', error);\n            showNotification('Failed to clear collection', 'error');\n        } finally {\n            // Reset media URLs to default\n            const defaultMediaLinks = defaultLinks.map(item => [item.postLink || '', item.videoLinks, item.tags || {}]);\n            setMediaUrls(defaultMediaLinks);\n        }\n    };\n\n    const cancelClearCollection = () => {\n        setShowConfirmClear(false);\n    };\n\n    const handleTagBlacklistChange = (event) => {\n        const newBlacklist = event.target.value;\n        setTagBlacklist(newBlacklist);\n        saveTagBlacklistPreference(newBlacklist);\n    };\n\n    const handleDeleteBlacklisted = () => {\n        try {\n            if (!tagBlacklist.trim()) {\n                showNotification('No tags in blacklist to delete', 'info');\n                return;\n            }\n\n            // Get storage key for active collection\n            const currentCollection = collections.find(c => c.id === activeCollection);\n            const storageKey = currentCollection?.storageKey || LOCAL_STORAGE_KEY;\n            \n            // Get current stored media\n            const localStorageLinks = getFromLocalStorage(storageKey);\n            \n            // Create blacklist array\n            const blacklist = tagBlacklist.split(',').map(tag => tag.trim().toLowerCase());\n            \n            // Filter function to check if media should be kept (not blacklisted)\n            const shouldKeepMedia = (media) => {\n                const tags = media.tags || media[2]; // Handle both storage format and display format\n                if (!tags) return true; // Keep media without tags\n                \n                const allTags = [];\n                if (Array.isArray(tags)) {\n                    tags.forEach(tag => allTags.push(tag.toLowerCase()));\n                } else {\n                    Object.values(tags).forEach(categoryTags => {\n                        if (Array.isArray(categoryTags)) {\n                            categoryTags.forEach(tag => allTags.push(tag.toLowerCase()));\n                        }\n                    });\n                }\n                \n                // Return false if any blacklisted tag is found (meaning don't keep it)\n                return !blacklist.some(blacklistedTag =>\n                    allTags.some(tag => tag.includes(blacklistedTag))\n                );\n            };\n            \n            // Filter localStorage data\n            const filteredStorageLinks = localStorageLinks.filter(shouldKeepMedia);\n            \n            // Filter current display data\n            const filteredDisplayMedia = mediaUrls.filter(media => shouldKeepMedia(media));\n            \n            // Calculate how many items were removed\n            const removedCount = localStorageLinks.length - filteredStorageLinks.length;\n            \n            // Save filtered data back to localStorage\n            saveToLocalStorage(filteredStorageLinks, storageKey);\n            \n            // Update UI state\n            setMediaUrls(filteredDisplayMedia);\n            \n            // Close fullscreen if needed\n            if (fullscreenMedia !== null && !filteredDisplayMedia[fullscreenMedia]) {\n                setFullscreenMedia(null);\n            }\n            \n            showNotification(`Deleted ${removedCount} media items containing blacklisted tags`, 'success');\n            \n        } catch (error) {\n            console.error('Error deleting blacklisted media:', error);\n            showNotification('Failed to delete blacklisted media', 'error');\n        }\n    };\n\n    const handleUnifiedSearch = () => {\n        if (searchQuery.trim().toLowerCase().startsWith('http')) {\n            // It's a URL, trigger scraping\n            \n            // Handle special cases\n            if (searchQuery.includes('❤️')) {\n                scrapeSavedLinks();\n            } else {\n                handleScrape(searchQuery.trim()); // Pass URL directly\n            }\n        } else {\n            // It's a tag, trigger tag search\n            const query = searchQuery.trim();\n            setTagSearchQuery(query);\n            handleTagSearch(query);\n        }\n        \n        // Clear the search input\n        setSearchQuery('');\n    };\n\n    // Add a new ref to store video observers\n    const videoObservers = useRef({});\n\n    // Create a function to handle visibility changes for videos\n    const handleVideoVisibilityChange = useCallback((entries, observer) => {\n        entries.forEach(entry => {\n            const video = entry.target;\n            \n            // If video is intersecting (visible in viewport)\n            if (entry.isIntersecting) {\n                // Only play if not in fullscreen mode and autoplay is enabled\n                if (fullscreenMedia === null && video.tagName === 'VIDEO') {\n                    video.play().catch(err => {\n                        // Silent catch for autoplay restrictions\n                        console.log('Autoplay prevented:', err);\n                    });\n                }\n            } else {\n                // If video is not visible and not the fullscreen video, pause it\n                if (fullscreenMedia === null && video.tagName === 'VIDEO') {\n                    video.pause();\n                }\n            }\n        });\n    }, [fullscreenMedia]);\n\n    // Function to setup observers for all video elements\n        const setupVideoObservers = useCallback(() => {\n            // Skip if currently loading to avoid performance issues\n            if (loading) return;\n            \n            // Clean up any existing observers more efficiently\n            Object.values(videoObservers.current).forEach(observer => {\n                if (observer) observer.disconnect();\n            });\n            \n            // Clear the observers object\n            videoObservers.current = {};\n            \n            // Setup new observers for all video elements (except fullscreen video)\n            Object.entries(mediaRefs.current).forEach(([index, ref]) => {\n                if (ref && ref.tagName === 'VIDEO' && parseInt(index) !== fullscreenMedia) {\n                    const observer = new IntersectionObserver(\n                        handleVideoVisibilityChange, \n                        {\n                            root: null, // viewport\n                            threshold: 0.2, // 20% visibility triggers callback\n                            rootMargin: '50px' // Add margin to reduce frequent triggering\n                        }\n                    );\n                    \n                    observer.observe(ref);\n                    videoObservers.current[index] = observer;\n                }\n            });\n        }, [handleVideoVisibilityChange, fullscreenMedia, loading]);\n\n    // Setup video observers when media refs change\n    useEffect(() => {\n        // Only setup observers if not currently loading to avoid interrupting autoscroll\n        if (!loading) {\n            const timer = setTimeout(() => {\n                setupVideoObservers();\n            }, 1000); // Increased delay to let loading settle\n            \n            return () => {\n                clearTimeout(timer);\n                // Clean up observers on unmount\n                Object.values(videoObservers.current).forEach(observer => {\n                    if (observer) observer.disconnect();\n                });\n            };\n        }\n    }, [mediaUrls.length, setupVideoObservers, loading]); // Added loading dependency\n\n    // Refresh video observers after page changes\n    useEffect(() => {\n        if (!loading) {\n            const timer = setTimeout(() => {\n                setupVideoObservers();\n            }, 1000);\n            \n            return () => clearTimeout(timer);\n        }\n    }, [currentPage, loading, setupVideoObservers]);\n\n    // Refresh video observers when fullscreen changes\n    useEffect(() => {\n        if (!loading) {\n            const timer = setTimeout(() => {\n                setupVideoObservers();\n            }, 500);\n            \n            return () => clearTimeout(timer);\n        }\n    }, [fullscreenMedia, setupVideoObservers, loading]);\n\n\n\n    const handleCollectionSwitch = (collectionId) => {\n        if (collectionId === activeCollection) return;\n        \n        // Complete reset of all media-related state\n        setActiveCollection(collectionId);\n        setCurrentPage(1);\n        setMediaUrls([]);\n        setLoadedMedia({}); // Reset loaded media state\n        setFullscreenMedia(null); // Close any fullscreen media\n        setTagFilter(null); // Clear any tag filters\n        setSearchQuery(''); // Clear search query\n        setTagSearchQuery(''); // Clear tag search query\n        mediaSet.current.clear();\n        \n        // Clear media refs\n        mediaRefs.current = [];\n        \n        // Scroll to top when switching collections\n        window.scrollTo({ top: 0, behavior: 'smooth' });\n        \n        // Save preference\n        document.cookie = `active_collection=${collectionId}; max-age=31536000; path=/`;\n        \n        // Show notification\n        const collection = collections.find(c => c.id === collectionId);\n        if (collection) {\n            showNotification(`Switched to ${collection.name} collection`, 'success');\n        }\n        \n        // Reload content with the new collection\n        fetchMedia(1, initialMediaPerPage);\n    };\n\n    // Get active collection from cookie on init\n    const getActiveCollectionFromCookie = () => {\n        const match = document.cookie.match(/active_collection=([^;]+)/);\n        return match ? match[1] : 'main';\n    };\n\n    return (\n        <div>\n            <div className=\"top-search-bar\">\n                <div className=\"left-section\">\n                    <div \n                        className=\"app-title\"\n                        onClick={() => window.location.reload()}\n                        style={{ cursor: 'pointer' }}\n                    >\n                        <i className=\"fas fa-cat logo-icon\"></i>\n                        <span>Kupo Nuts</span>\n                    </div>\n                    \n                    {/* NSFW indicator - only visible when NSFW mode is active */}\n                    {contentFilter === 'nsfw' && (\n                        <button\n                            onClick={() => {\n                                setContentFilter('sfw');\n                                saveContentFilterPreference('sfw');\n                                showNotification('Content filter set to SFW', 'info');\n                            }}\n                            className=\"nsfw-indicator\"\n                            title=\"Click to switch to SFW mode\"\n                            style={{\n                                background: '#ff4757',\n                                color: 'white',\n                                border: 'none',\n                                padding: '8px 12px',\n                                borderRadius: '6px',\n                                fontSize: '16px',\n                                fontWeight: 'bold',\n                                cursor: 'pointer',\n                                marginLeft: '10px',\n                                animation: 'pulse 2s infinite'\n                            }}\n                        >\n                            🔞 NSFW\n                        </button>\n                    )}\n                    \n                    {!isMobile && (\n                        <>\n                            {/* NSFW button hidden - use Konami code ↑↑↓↓←→←→BA to toggle */}\n                            \n                            <div className=\"collection-tabs\">\n                                {collections.map(collection => (\n                                    <button\n                                        key={collection.id}\n                                        className={`collection-tab ${activeCollection === collection.id ? 'active' : ''}`}\n                                        onClick={() => handleCollectionSwitch(collection.id)}\n                                        title={`Switch to ${collection.name} collection`}\n                                    >\n                                        {collection.name}\n                                    </button>\n                                ))}\n                            </div>\n                        </>\n                    )}\n                </div>\n                \n                {isMobile ? (\n                    <div className=\"right-section\">\n                        <div className=\"mobile-search-and-menu\">\n                            <div className=\"mobile-search-container\">\n                                <input\n                                    type=\"text\"\n                                    value={searchQuery}\n                                    onChange={(e) => setSearchQuery(e.target.value)}\n                                    onKeyPress={(e) => e.key === 'Enter' && handleUnifiedSearch()}\n                                    placeholder=\"Search or URL...\"\n                                    className=\"search-input\"\n                                />\n                                <button\n                                    onClick={handleUnifiedSearch}\n                                    className=\"search-button\"\n                                >\n                                    <i className={`fas ${searchQuery.trim().toLowerCase().startsWith('http') ? 'fa-download' : 'fa-search'}`}></i>\n                                </button>\n                            </div>\n                            \n                            {/* NSFW indicator for mobile - only visible when NSFW mode is active */}\n                            {contentFilter === 'nsfw' && (\n                                <button\n                                    onClick={() => {\n                                        setContentFilter('sfw');\n                                        saveContentFilterPreference('sfw');\n                                        showNotification('Content filter set to SFW', 'info');\n                                    }}\n                                    className=\"nsfw-indicator mobile-nsfw\"\n                                    title=\"Click to switch to SFW mode\"\n                                    style={{\n                                        background: '#ff4757',\n                                        color: 'white',\n                                        border: 'none',\n                                        padding: '6px 10px',\n                                        borderRadius: '5px',\n                                        fontSize: '14px',\n                                        fontWeight: 'bold',\n                                        cursor: 'pointer',\n                                        marginLeft: '5px',\n                                        marginRight: '5px',\n                                        animation: 'pulse 2s infinite'\n                                    }}\n                                >\n                                    🔞\n                                </button>\n                            )}\n                            \n                            <div className=\"mobile-menu-container\">\n                                <button \n                                    className=\"mobile-menu-button\"\n                                    onClick={() => setShowMobileMenu(!showMobileMenu)}\n                                    aria-label=\"Open menu\"\n                                >\n                                    <i className=\"fas fa-bars\"></i>\n                                </button>\n                            \n                            {showMobileMenu && (\n                                <div className=\"mobile-dropdown-menu\">\n                                    {/* Content Filter hidden - use Konami code ↑↑↓↓←→←→BA to toggle */}\n                                    \n                                    <div className=\"mobile-menu-section\">\n                                        <div className=\"mobile-menu-header\">Collections</div>\n                                        {collections.map(collection => (\n                                            <button\n                                                key={collection.id}\n                                                className={`mobile-menu-item collection-item ${activeCollection === collection.id ? 'active' : ''}`}\n                                                onClick={() => {\n                                                    handleCollectionSwitch(collection.id);\n                                                    setShowMobileMenu(false);\n                                                }}\n                                            >\n                                                <i className=\"fas fa-folder\"></i>\n                                                {collection.name}\n                                                {activeCollection === collection.id && <i className=\"fas fa-check\"></i>}\n                                            </button>\n                                        ))}\n                                    </div>\n                                    \n                                    <div className=\"mobile-menu-section\">\n                                        <div className=\"mobile-menu-header\">Actions</div>\n                                        <button \n                                            className=\"mobile-menu-item\" \n                                            onClick={() => {\n                                                handleExport();\n                                                setShowMobileMenu(false);\n                                            }}\n                                        >\n                                            <i className=\"fas fa-download\"></i>\n                                            Export Collection\n                                        </button>\n                                        <button \n                                            className=\"mobile-menu-item\" \n                                            onClick={() => {\n                                                document.getElementById('top-import-file-input').click();\n                                                setShowMobileMenu(false);\n                                            }}\n                                        >\n                                            <i className=\"fas fa-upload\"></i>\n                                            Import Collection\n                                        </button>\n                                        <button \n                                            className=\"mobile-menu-item clear-item\" \n                                            onClick={() => {\n                                                handleClearCollection();\n                                                setShowMobileMenu(false);\n                                            }}\n                                        >\n                                            <i className=\"fas fa-trash\"></i>\n                                            Clear Collection\n                                        </button>\n                                    </div>\n                                </div>\n                            )}\n                            \n                            <input\n                                id=\"top-import-file-input\"\n                                type=\"file\"\n                                accept=\".json\"\n                                onChange={handleImport}\n                                style={{ display: 'none' }}\n                            />\n                        </div>\n                    </div>\n                    </div>\n                ) : (\n                    <>\n                        <div className=\"search-container\">\n                            <input\n                                type=\"text\"\n                                value={searchQuery}\n                                onChange={(e) => setSearchQuery(e.target.value)}\n                                onKeyPress={(e) => e.key === 'Enter' && handleUnifiedSearch()}\n                                placeholder=\"Enter tag to search or URL to scrape...\"\n                                className=\"search-input\"\n                            />\n                            <button\n                                onClick={handleUnifiedSearch}\n                                className=\"search-button\"\n                            >\n                                <i className={`fas ${searchQuery.trim().toLowerCase().startsWith('http') ? 'fa-download' : 'fa-search'}`}></i>\n                            </button>\n                        </div>\n\n                        <div className=\"right-section\">\n                            <div className=\"collection-management\">\n                                <button \n                                    className=\"collection-mgmt-btn export-btn\" \n                                    onClick={handleExport}\n                                    title=\"Export Collection\"\n                                >\n                                    <i className=\"fas fa-download\"></i>\n                                    <span>Export</span>\n                                </button>\n                                <button \n                                    className=\"collection-mgmt-btn import-btn\" \n                                    onClick={() => document.getElementById('top-import-file-input').click()}\n                                    title=\"Import Collection\"\n                                >\n                                    <i className=\"fas fa-upload\"></i>\n                                    <span>Import</span>\n                                </button>\n                                <input\n                                    id=\"top-import-file-input\"\n                                    type=\"file\"\n                                    accept=\".json\"\n                                    onChange={handleImport}\n                                    style={{ display: 'none' }}\n                                />\n                                <button \n                                    className=\"collection-mgmt-btn clear-btn\" \n                                    onClick={handleClearCollection}\n                                    title=\"Clear Collection\"\n                                >\n                                    <i className=\"fas fa-trash\"></i>\n                                    <span>Clear</span>\n                                </button>\n                            </div>\n                        </div>\n                    </>\n                )}\n            </div>\n            \n            {tagFilter && fullscreenMedia === null && (\n                <div className=\"active-filter-indicator\">\n                    <span>Filtering by: {tagFilter}</span>\n                    <button \n                        className=\"clear-button\" \n                        onClick={() => {\n                            setTagFilter(null);\n                            // Scroll to top when clearing filter\n                            window.scrollTo({ top: 0, behavior: 'smooth' });\n                        }}\n                        aria-label=\"Clear filter\"\n                    >\n                        <i className=\"fas fa-times\"></i>\n                    </button>\n                </div>\n            )}\n            <div className=\"notifications-container\">\n                {notifications.map((notification) => (\n                    <div \n                        key={notification.id} \n                        className={`notification ${notification.type}`}\n                        style={{ top: `${20 + (Array.from(notifications).findIndex(n => n.id === notification.id) * 70)}px` }}\n                    >\n                        <p className=\"notification-message\">{notification.message}</p>\n                        {notification.type === 'progress' && notification.isComplete && (\n                            <>\n                                <p className=\"notification-count\">\n                                    {notification.count} items found\n                                </p>\n                                <div \n                                    className=\"notification-progress-bar\" \n                                    style={{ width: '100%' }}\n                                />\n                            </>\n                        )}\n                        {notification.type === 'progress' && !notification.isComplete && (\n                            <div className=\"notification-loading\">\n                                <div className=\"notification-spinner\"></div>\n                            </div>\n                        )}\n                        {notification.type !== 'progress' && (\n                            <div className=\"notification-progress\" />\n                        )}\n                    </div>\n                ))}\n            </div>\n            <div className=\"main-content\">\n                <Masonry\n                    breakpointCols={breakpointColumnsObj}\n                    className=\"masonry-grid\"\n                    columnClassName=\"masonry-grid_column\"\n                >\n                    {selectedMedia && selectedMedia.map((media, index) => {\n                        const [postLink, videoLinks = [], tags] = media || [];\n                        if (!media || videoLinks.length === 0 || !videoLinks[0]) return null;\n                        const firstVideoLink = videoLinks && videoLinks[0];\n                        const isVideo = firstVideoLink && (firstVideoLink.endsWith('.mp4') || firstVideoLink.endsWith('.mov') || firstVideoLink.endsWith('.webm'));\n                        const isRule34Video = postLink && postLink.includes('rule34video');\n                        const embedUrl = firstVideoLink ? firstVideoLink.replace('/view/', '/embed/') : '';\n                        const isLoaded = loadedMedia[index];\n\n                        return (\n                            <div\n                                key={index}\n                                ref={index >= selectedMedia.length - breakpointColumnsObj.default ? lastMediaElementRef : null}\n                                className={`media-wrapper masonry-item ${fullscreenMedia === index ? 'fullscreen' : ''}`}\n                                onClick={() => handleMediaClick(index)}\n                            >\n                                {fullscreenMedia === index && <TagsPanel tags={tags} />}\n                                \n                                <div className={`media-container ${isLoaded ? 'media-loaded' : 'media-loading'}`}>\n                                    {isRule34Video ? (\n                                        <iframe\n                                            className=\"media-container\"\n                                            src={embedUrl}\n                                            frameBorder=\"0\"\n                                            allowFullScreen\n                                            loop\n                                            title=\"Embedded Video\"\n                                            onLoad={() => handleMediaLoad(index)}\n                                        ></iframe>\n                                    ) : isVideo ? (\n                                        <video\n                                            ref={el => mediaRefs.current[index] = el}\n                                            src={firstVideoLink}\n                                            controls\n                                            muted={fullscreenMedia !== index}\n                                            volume={globalVolume}\n                                            loop\n                                            \n                                            onClick={fullscreenMedia === index ? (e) => {\n                                            e.stopPropagation();\n                                            e.preventDefault();\n                                            \n                                            const video = mediaRefs.current[index];\n                                            if (video && video.tagName === 'VIDEO') {\n                                                if (video.paused) {\n                                                    video.play().catch(err => console.log('Play prevented:', err));\n                                                } else {\n                                                    video.pause();\n                                                }\n                                            }\n                                        } : undefined}\n                                            onLoadedData={() => {\n                                                handleMediaLoad(index);\n                                                // Apply global volume on load\n                                                if (mediaRefs.current[index]) {\n                                                    mediaRefs.current[index].volume = globalVolume;\n                                                }\n                                            }}\n                                            onError={(e) => handleVideoError(e, firstVideoLink)}\n                                            onLoadStart={() => {\n                                                setCookies();\n                                            }}\n                                        />\n                                    ) : (\n                                        <img\n                                            ref={el => mediaRefs.current[index] = el}\n                                            src={firstVideoLink}\n                                            alt=\"Media\"\n                                            onLoad={() => handleMediaLoad(index)}\n                                            onError={(e) => handleImageError(e, firstVideoLink, index)}\n                                        />\n                                    )}\n                                    {fullscreenMedia === index && videoLinks && Array.isArray(videoLinks) && videoLinks.slice(1).map((link, i) => (\n                                        <div key={i} className=\"fullscreen-media-container\">\n                                            <img className='fullscreen-media'\n                                                ref={el => mediaRefs.current[`${index}_${i}`] = el}\n                                                src={link}\n                                                alt=\"Media\"\n                                                onError={(e) => handleImageError(e, link, index)}\n                                                onLoad={() => {\n                                                    setCookies();\n                                                }}\n                                            />\n                                        </div>\n                                    ))}\n                                </div>\n                                <div className=\"icon-container\">\n                                    <button\n                                        className=\"close-icon\"\n                                        onClick={(e) => {\n                                            e.stopPropagation();\n                                            handleMediaClose();\n                                        }}\n                                        aria-label=\"Close media\"\n                                    >\n                                        <i className=\"fas fa-times\"></i>\n                                    </button>\n                                    <button\n                                        className=\"postlink-icon\"\n                                        onClick={(e) => {\n                                            e.stopPropagation();\n                                            handleIconClick(postLink);\n                                        }}\n                                        aria-label=\"Open post link\"\n                                    >\n                                        <i className=\"fas fa-link\"></i>\n                                    </button>\n                                    {(!postLink.includes('kusowanka') && !postLink.includes('donmai')  && !postLink.includes('e621')) && (\n                                        <button\n                                            className=\"similar-icon\"\n                                            onClick={(e) => {\n                                                e.stopPropagation();\n                                                handleSimilar(postLink);\n                                            }}\n                                            aria-label=\"Find similar media\"\n                                        >\n                                            <i className=\"fas fa-clone\"></i>\n                                        </button>\n                                    )}\n                                </div>\n                                <button\n                                    className=\"remove-icon\"\n                                    onClick={(e) => {\n                                        e.stopPropagation();\n                                        handleRemove(postLink);\n                                    }}\n                                    aria-label=\"Remove media\"\n                                >\n                                        <i className=\"fas fa-trash\"></i>\n                                </button>\n                            </div>\n                        );\n                    })}\n                    {loading && (\n                        <div className=\"loading-placeholder\"></div>\n                    )}\n                </Masonry>\n                <div id=\"bottom-of-page\"></div>\n                <div className=\"overlay-buttons\">\n                    <button\n                        onClick={handleSettingsOpen}\n                        className=\"settings-button\"\n                        aria-label=\"Settings\"\n                    >\n                        <i className=\"fas fa-cog\"></i>\n                        </button>\n                    <button\n                        onClick={() => {\n                            const newAutoScroll = !autoScroll;\n                            setAutoScroll(newAutoScroll);\n                            saveAutoScrollPreference(newAutoScroll);\n                        }}\n                        className={`auto-scroll-button ${autoScroll ? 'active' : ''}`}\n                        aria-label=\"Toggle auto scroll\"\n                    >\n                        <i className=\"fas fa-arrow-down\"></i>\n                    </button>\n                </div>\n                {showSettings && (\n                    <div className=\"settings-dialog\">\n                        <div className=\"settings-content\">\n                            <div className=\"settings-header\">\n                                <h2>Gallery Settings</h2>\n                                <button onClick={() => setShowSettings(false)}>\n                                    <i className=\"fas fa-times\"></i>\n                                </button>\n                            </div>\n                            <div className=\"settings-body\">\n                                {/* 1. Tag Blacklist */}\n                                <div className=\"settings-item\">\n                                    <label htmlFor=\"tag-blacklist\">\n                                        <i className=\"fas fa-ban\"></i>\n                                        Tag Blacklist (comma-separated)\n                                    </label>\n                                    <div className=\"blacklist-controls\">\n                                        <input\n                                            type=\"text\"\n                                            id=\"tag-blacklist\"\n                                            value={tagBlacklist}\n                                            onChange={handleTagBlacklistChange}\n                                            placeholder=\"Enter tags to blacklist\"\n                                        />\n                                        <button \n                                            className=\"delete-blacklisted-button\"\n                                            onClick={handleDeleteBlacklisted}\n                                            title=\"Delete all media containing blacklisted tags\"\n                                        >\n                                            <i className=\"fas fa-trash-alt\"></i>\n                                            Delete All\n                                        </button>\n                                    </div>\n                                </div>\n\n                                {/* 3. Include Demo Content */}\n                                <div className=\"settings-item\">\n                                    <label>\n                                        <i className=\"fas fa-eye\"></i>\n                                        Include Demo Content\n                                    </label>\n                                    <div className=\"default-links-toggle settings-toggle\">\n                                        <button \n                                            className={`content-filter-option ${showDefaultLinks ? 'active' : ''}`}\n                                            onClick={() => {\n                                                const newValue = true;\n                                                setShowDefaultLinks(newValue);\n                                                saveShowDefaultLinksPreference(newValue);\n                                                setCurrentPage(1);\n                                                setMediaUrls([]);\n                                                fetchMedia(1, initialMediaPerPage);\n                                            }}\n                                        >\n                                            Show\n                                        </button>\n                                        <button \n                                            className={`content-filter-option ${!showDefaultLinks ? 'active' : ''}`}\n                                            onClick={() => {\n                                                const newValue = false;\n                                                setShowDefaultLinks(newValue);\n                                                saveShowDefaultLinksPreference(newValue);\n                                                setCurrentPage(1);\n                                                setMediaUrls([]);\n                                                fetchMedia(1, initialMediaPerPage);\n                                            }}\n                                        >\n                                            Hide\n                                        </button>\n                                    </div>\n                                </div>\n\n                                {/* 4. Sort by */}\n                                <div className=\"settings-item\">\n                                    <label htmlFor=\"filter\">\n                                        <i className=\"fas fa-sort\"></i>\n                                        Sort by\n                                    </label>\n                                    <select \n                                        id=\"filter\" \n                                        value={filter} \n                                        onChange={(e) => {\n                                            handleFilterChange(e.target.value);\n                                        }}\n                                    >\n                                        <option value=\"Default\">Default</option>\n                                        <option value=\"Newest\">Newest</option>\n                                        <option value=\"Random\">Random</option>\n                                        <option value=\"Oldest\">Oldest</option>\n                                    </select>\n                                </div>\n\n                                {/* 5. Auto-Scroll Speed */}\n                                <div className=\"settings-item\">\n                                    <label htmlFor=\"scroll-speed\">\n                                        <i className=\"fas fa-arrow-down\"></i>\n                                        Auto-Scroll Speed: {scrollSpeed}px/tick\n                                    </label>\n                                    <input\n                                        id=\"scroll-speed\"\n                                        type=\"range\"\n                                        min=\"0.2\"\n                                        max=\"2\"\n                                        step=\"0.2\"\n                                        value={scrollSpeed}\n                                        onChange={(e) => {\n                                            const newSpeed = parseFloat(e.target.value);\n                                            setScrollSpeed(newSpeed);\n                                            saveScrollSpeedPreference(newSpeed);\n                                        }}\n                                        className=\"scroll-speed-slider\"\n                                    />\n                                    <div className=\"speed-range-labels\">\n                                        <span>Very Slow</span>\n                                        <span>Fast</span>\n                                    </div>\n                                </div>\n\n                                {/* 6. Volume */}\n                                <div className=\"settings-item\">\n                                    <label htmlFor=\"volume-control\">\n                                        <i className=\"fas fa-volume-up\"></i>\n                                        Volume: {Math.round(globalVolume * 100)}%\n                                    </label>\n                                    <input\n                                        id=\"volume-control\"\n                                        type=\"range\"\n                                        min=\"0\"\n                                        max=\"1\"\n                                        step=\"0.01\"\n                                        value={globalVolume}\n                                        onChange={(e) => {\n                                            const newVolume = parseFloat(e.target.value);\n                                            setGlobalVolume(newVolume);\n                                            saveVolumePreference(newVolume);\n                                        }}\n                                        className=\"volume-slider\"\n                                    />\n                                    <div className=\"volume-range-labels\">\n                                        <span>0%</span>\n                                        <span>100%</span>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                )}\n                {showConfirmClear && (\n                    <div className=\"confirm-dialog\">\n                        <div className=\"confirm-content\">\n                            <div className=\"confirm-header\">\n                                <h2>Confirm Clear Collection</h2>\n                            </div>\n                            <div className=\"confirm-body\">\n                                <p>Are you sure you want to clear your <strong>{collections.find(c => c.id === activeCollection)?.name}</strong> collection?</p>\n                                <p>This action cannot be undone and will remove all saved media.</p>\n                            </div>\n                            <div className=\"confirm-options\">\n                                <button onClick={cancelClearCollection}>\n                                    Cancel\n                                </button>\n                                <button onClick={confirmClearCollection}>\n                                    Yes, Clear Collection\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default React.memo(VideoList);"],"names":["isDevelopment","window","location","hostname","config","API_URL","console","log","LOCAL_STORAGE_KEY","saveToLocalStorage","mediaLinks","storageKey","arguments","length","undefined","localStorage","setItem","JSON","stringify","error","getFromLocalStorage","data","getItem","parse","VideoList","_collections$find","mediaUrls","setMediaUrls","useState","currentPage","setCurrentPage","fullscreenMedia","setFullscreenMedia","loading","setLoading","autoScroll","setAutoScroll","filter","setFilter","showSettings","setShowSettings","notifications","setNotifications","isClickable","setIsClickable","loadedMedia","setLoadedMedia","randomSeed","setRandomSeed","Date","now","tagFilter","setTagFilter","contentFilter","setContentFilter","globalVolume","setGlobalVolume","socket","setSocket","searchQuery","setSearchQuery","guestId","useRef","Math","random","toString","substr","showDefaultLinks","setShowDefaultLinks","activeCollection","setActiveCollection","collections","id","name","showMobileMenu","setShowMobileMenu","isMobile","setIsMobile","prevScrollY","scrollAnimation","mediaRefs","mediaSet","Set","observer","scrapeNotificationId","similarNotificationId","tagSearchNotificationId","showConfirmClear","setShowConfirmClear","tagBlacklist","setTagBlacklist","scrollSpeed","setScrollSpeed","tagSearchQuery","setTagSearchQuery","konamiSequence","setKonamiSequence","konamiCode","useMemo","shuffleArray","useCallback","array","newArray","reverse","rand","seedrandom","i","j","floor","fetchConfig","credentials","filterMediaByTag","searchTerm","lowercaseSearchTerm","toLowerCase","item","tags","Array","isArray","some","tag","includes","Object","values","categoryTags","applyTagBlacklist","media","blacklist","split","map","trim","allTags","forEach","push","blacklistedTag","applyContentFilter","fetchMedia","async","page","limit","currentCollection","find","c","localStorageLinks","postLink","videoLinks","defaultLinks","defaultMediaLinks","totalAvailableItems","startIndex","sortedMediaLinks","endIndex","min","pageMediaUrls","slice","current","clear","uniqueMediaUrls","has","add","prevMediaUrls","isUserContent","isDefault","userItems","_item$","defaultItems","_item$2","setCookies","cookies","cookie","document","value","domain","path","showNotification","message","type","newNotification","prev","setTimeout","notification","removeNotification","handleTagSearch","query","notificationId","progress","isComplete","existingNotificationIndex","findIndex","n","updatedNotifications","contentFilterValue","headers","fetch","method","body","contentType","socketId","ok","Error","showProgressNotification","scrollToMedia","index","mediaElement","scrollIntoView","behavior","block","handleMediaClick","tagName","pause","muted","selectedVideo","volume","play","catch","err","then","secondErr","mediaContainer","getElementById","classList","querySelectorAll","button","style","zIndex","handleMediaClose","rect","getBoundingClientRect","top","left","bottom","innerHeight","documentElement","clientHeight","right","innerWidth","clientWidth","remove","handleClickOutside","event","_mediaRefs$current$fu","contains","target","closest","handleKeyPress","e","key","nextIndex","currentMedia","nextMedia","prevIndex","prevMedia","debouncedPageIncrement","timeoutId","prevPage","clearTimeout","lastMediaElementRef","node","disconnect","IntersectionObserver","entries","entry","isIntersecting","threshold","rootMargin","observe","useEffect","handleResize","isMobileView","addEventListener","removeEventListener","handleKonamiKeyPress","newSequence","code","every","newFilter","saveContentFilterPreference","toUpperCase","overflow","videoDuration","duration","scrollBehavior","scrollDistance","max","smoothScroll","currentScroll","pageYOffset","scrollHeight","scrollTo","requestAnimationFrame","cancelAnimationFrame","script","createElement","src","appendChild","removeChild","seed","selectedMedia","handleScroll","currentScrollY","scrollY","scrollTimeout","onScroll","breakpointColumnsObj","default","handleImageError","link","display","mediaLink","from","el","saveShowDefaultLinksPreference","show","getShowDefaultLinksFromCookie","match","getContentFilterFromCookie","saveTagBlacklistPreference","encodeURIComponent","getTagBlacklistFromCookie","decodeURIComponent","handleFilterChange","filterValue","loadPreferences","getScrollSpeedFromCookie","parseFloat","getAutoScrollFromCookie","getFilterFromCookie","savedTagBlacklist","savedShowDefaultLinks","savedContentFilter","savedActiveCollection","getActiveCollectionFromCookie","ref","handleExport","localData","dataStr","dataBlob","Blob","url","URL","createObjectURL","a","href","download","click","revokeObjectURL","handleImport","file","files","reader","FileReader","onload","content","result","_ref","validContent","readAsText","handleMediaLoad","handleTagClick","stopPropagation","TagsPanel","_ref2","_jsx","className","children","categorizedTags","general","_jsxs","label","category","idx","onClick","handleAddTagToFilter","combinedFilter","title","addTagToBlacklist","currentBlacklist","t","newBlacklist","join","newSocket","setupSocket","io","withCredentials","transports","reconnection","reconnectionAttempts","reconnectionDelay","reconnectionDelayMax","timeout","on","emit","isGuest","handleProgressEvent","notificationIdRef","prevNotifications","_data$newItems","currentNotification","totalLinksAdded","linksAdded","newLinksCount","newItems","updatedLinksAdded","count","typeLabel","word","charAt","linkCountMessage","currentId","formattedItems","mediaItem","currentLinks","addToLocalStorage","handleClearCollection","handleUnifiedSearch","startsWith","alert","scrapeSavedLinks","urlToScrape","handleScrape","videoObservers","handleVideoVisibilityChange","video","setupVideoObservers","_ref3","parseInt","root","timer","handleCollectionSwitch","collectionId","collection","reload","cursor","background","color","border","padding","borderRadius","fontSize","fontWeight","marginLeft","animation","_Fragment","onChange","onKeyPress","placeholder","marginRight","accept","width","Masonry","breakpointCols","columnClassName","firstVideoLink","isVideo","endsWith","isRule34Video","embedUrl","replace","isLoaded","frameBorder","allowFullScreen","loop","onLoad","controls","preventDefault","paused","onLoadedData","onError","keys","Number","handleVideoError","onLoadStart","alt","open","response","errorData","json","handleSimilar","_mediaUrls$fullscreen","filteredLinks","handleRemove","handleSettingsOpen","newAutoScroll","saveAutoScrollPreference","htmlFor","handleDeleteBlacklisted","shouldKeepMedia","filteredStorageLinks","filteredDisplayMedia","removedCount","newValue","step","newSpeed","speed","round","newVolume","cancelClearCollection","confirmClearCollection","removeItem","React"],"sourceRoot":""}